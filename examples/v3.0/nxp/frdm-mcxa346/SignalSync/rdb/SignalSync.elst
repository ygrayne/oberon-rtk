. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  0000051B0              <Pad: 0>
MODULE SignalSync;
(**
  Oberon RTK Framework v3.0
  --
  Example program, multi-threaded, single-core
  Description: https://oberon-rtk.org/examples/v2/signalsync/
  --
  MCU: MCX-A346
  Board: FRDM-MCXA346
  --
  Copyright (c) 2024 Gray, gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT Main, Kernel, Out, Cores, Signals, Errors, LED;

  CONST
    MillisecsPerTick  = 10;
    ThreadStackSize = 1024;

    T0period = 50;
    T3period = 100;

  VAR
    t0, t1, t2, t3: Kernel.Thread;
    tid0, tid1, tid2, tid3: INTEGER;
    sig: Signals.Signal;


  PROCEDURE writeThreadInfo(tid, cid: INTEGER);
  BEGIN
.     4  0000051B4      0B503  push      { r0, r1, lr }
    Out.String("c"); Out.Int(cid, 0);
.     6  0000051B6      0BF00  nop       
.     8  0000051B8      0A000  adr       r0,pc,#0 -> 12
.    10  0000051BA      0E001  b         2 -> 16
.    12  0000051BC  000000063  <String: "c...">
.    16  0000051C0      02102  movs      r1,#2
.    18  0000051C2  0F7FFF893  bl.w      Ext Proc #4
.    22  0000051C6      0E000  b         0 -> 26
.    24  0000051C8      00020  <LineNo: 32>
.    26  0000051CA      09801  ldr       r0,[sp,#4]
.    28  0000051CC      02100  movs      r1,#0
.    30  0000051CE  0F7FFF8C3  bl.w      Ext Proc #6
.    34  0000051D2      0E000  b         0 -> 38
.    36  0000051D4      00020  <LineNo: 32>
    Out.String("-t"); Out.Int(tid, 0)
.    38  0000051D6      0BF00  nop       
.    40  0000051D8      0A000  adr       r0,pc,#0 -> 44
.    42  0000051DA      0E001  b         2 -> 48
.    44  0000051DC  00000742D  <String: "-t..">
.    48  0000051E0      02103  movs      r1,#3
.    50  0000051E2  0F7FFF883  bl.w      Ext Proc #4
.    54  0000051E6      0E000  b         0 -> 58
.    56  0000051E8      00021  <LineNo: 33>
.    58  0000051EA      09800  ldr       r0,[sp]
.    60  0000051EC      02100  movs      r1,#0
  END writeThreadInfo;
.    62  0000051EE  0F7FFF8B3  bl.w      Ext Proc #6
.    66  0000051F2      0E000  b         0 -> 70
.    68  0000051F4      00021  <LineNo: 33>
.    70  0000051F6      0B002  add       sp,#8
.    72  0000051F8      0BD00  pop       { pc }
.    74  0000051FA      0BF00  nop       


  PROCEDURE t0c;
  BEGIN
.    76  0000051FC      0B500  push      { lr }
    LED.Set({LED.Pico});
.    78  0000051FE  0F44F2000  mov.w     r0,#0080000H
.    82  000005202  0F7FBF9F7  bl.w      Ext Proc #1
.    86  000005206      0E000  b         0 -> 90
.    88  000005208      00027  <LineNo: 39>
    Kernel.SetPeriod(T0period, 0);
.    90  00000520A      02032  movs      r0,#50
.    92  00000520C      02100  movs      r1,#0
.    94  00000520E  0F7FFFCAF  bl.w      Ext Proc #16
.    98  000005212      0E000  b         0 -> 102
.   100  000005214      00028  <LineNo: 40>
    REPEAT
      LED.Toggle({LED.Pico});
.   102  000005216  0F44F2000  mov.w     r0,#0080000H
.   106  00000521A  0F7FBF9FF  bl.w      Ext Proc #3
.   110  00000521E      0E000  b         0 -> 114
.   112  000005220      0002A  <LineNo: 42>
      Kernel.Next
    UNTIL FALSE
.   114  000005222  0F7FFFBA1  bl.w      Ext Proc #7
.   118  000005226      0E000  b         0 -> 122
.   120  000005228      0002B  <LineNo: 43>
  END t0c;
.   122  00000522A      04280  cmp       r0,r0
.   124  00000522C  0F43FAFF3  beq.w     -26 -> 102
.   128  000005230      0BD00  pop       { pc }
.   130  000005232      0BF00  nop       


  PROCEDURE t1c;
    VAR tid, cid: INTEGER;
  BEGIN
.   132  000005234      0B500  push      { lr }
.   134  000005236      0B082  sub       sp,#8
    cid := Cores.CoreId();
.   136  000005238  0F7FBFC32  bl.w      Ext Proc #3
.   140  00000523C      0E000  b         0 -> 144
.   142  00000523E      00033  <LineNo: 51>
.   144  000005240      09001  str       r0,[sp,#4]
    tid := Kernel.Tid();
.   146  000005242  0F7FFFCD5  bl.w      Ext Proc #18
.   150  000005246      0E000  b         0 -> 154
.   152  000005248      00034  <LineNo: 52>
.   154  00000524A      09000  str       r0,[sp]
    REPEAT
      writeThreadInfo(tid, cid);
.   156  00000524C      09800  ldr       r0,[sp]
.   158  00000524E      09901  ldr       r1,[sp,#4]
.   160  000005250  0F7FFFFB0  bl.w      -160 -> 4
.   164  000005254      0E000  b         0 -> 168
.   166  000005256      00036  <LineNo: 54>
      Out.String(" await sig"); Out.Ln;
.   168  000005258      0A000  adr       r0,pc,#0 -> 172
.   170  00000525A      0E005  b         10 -> 184
.   172  00000525C  061776120  <String: " awa">
.   176  000005260  073207469  <String: "it s">
.   180  000005264  000006769  <String: "ig..">
.   184  000005268      0210B  movs      r1,#11
.   186  00000526A  0F7FFF83F  bl.w      Ext Proc #4
.   190  00000526E      0E000  b         0 -> 194
.   192  000005270      00037  <LineNo: 55>
.   194  000005272  0F7FFF857  bl.w      Ext Proc #5
.   198  000005276      0E000  b         0 -> 202
.   200  000005278      00037  <LineNo: 55>
      Signals.Await(sig);
.   202  00000527A  0F8DF0044  ldr.w     r0,[pc,#68] -> 272
.   206  00000527E      06800  ldr       r0,[r0]
.   208  000005280  0F7FFFF62  bl.w      Ext Proc #2
.   212  000005284      0E000  b         0 -> 216
.   214  000005286      00038  <LineNo: 56>
      writeThreadInfo(tid, cid);
.   216  000005288      09800  ldr       r0,[sp]
.   218  00000528A      09901  ldr       r1,[sp,#4]
.   220  00000528C  0F7FFFF92  bl.w      -220 -> 4
.   224  000005290      0E000  b         0 -> 228
.   226  000005292      00039  <LineNo: 57>
      Out.String(" ==> sig"); Out.Ln
.   228  000005294      0A000  adr       r0,pc,#0 -> 232
.   230  000005296      0E005  b         10 -> 244
.   232  000005298  03E3D3D20  <String: " ==>">
.   236  00000529C  067697320  <String: " sig">
.   240  0000052A0  000000000  <String: "....">
.   244  0000052A4      02109  movs      r1,#9
.   246  0000052A6  0F7FFF821  bl.w      Ext Proc #4
.   250  0000052AA      0E000  b         0 -> 254
.   252  0000052AC      0003A  <LineNo: 58>
    UNTIL FALSE
.   254  0000052AE  0F7FFF839  bl.w      Ext Proc #5
.   258  0000052B2      0E000  b         0 -> 262
.   260  0000052B4      0003A  <LineNo: 58>
  END t1c;
.   262  0000052B6      04280  cmp       r0,r0
.   264  0000052B8  0F43FAFC8  beq.w     -112 -> 156
.   268  0000052BC      0B002  add       sp,#8
.   270  0000052BE      0BD00  pop       { pc }
.   272  0000052C0  020027E64  <Global: SignalSync data>


  PROCEDURE t3c;
    VAR tid, cid, cnt: INTEGER;
  BEGIN
.   276  0000052C4      0B500  push      { lr }
.   278  0000052C6      0B083  sub       sp,#12
    Kernel.SetPeriod(T3period, T3period);
.   280  0000052C8      02064  movs      r0,#100
.   282  0000052CA      02164  movs      r1,#100
.   284  0000052CC  0F7FFFC50  bl.w      Ext Proc #16
.   288  0000052D0      0E000  b         0 -> 292
.   290  0000052D2      00042  <LineNo: 66>
    cid := Cores.CoreId();
.   292  0000052D4  0F7FBFBE4  bl.w      Ext Proc #3
.   296  0000052D8      0E000  b         0 -> 300
.   298  0000052DA      00043  <LineNo: 67>
.   300  0000052DC      09001  str       r0,[sp,#4]
    tid := Kernel.Tid();
.   302  0000052DE  0F7FFFC87  bl.w      Ext Proc #18
.   306  0000052E2      0E000  b         0 -> 310
.   308  0000052E4      00044  <LineNo: 68>
.   310  0000052E6      09000  str       r0,[sp]
    cnt := 0;
.   312  0000052E8      02000  movs      r0,#0
.   314  0000052EA      09002  str       r0,[sp,#8]
    REPEAT
      writeThreadInfo(tid, cid);
.   316  0000052EC      09800  ldr       r0,[sp]
.   318  0000052EE      09901  ldr       r1,[sp,#4]
.   320  0000052F0  0F7FFFF60  bl.w      -320 -> 4
.   324  0000052F4      0E000  b         0 -> 328
.   326  0000052F6      00047  <LineNo: 71>
      Signals.Send(sig);
.   328  0000052F8  0F8DF0050  ldr.w     r0,[pc,#80] -> 412
.   332  0000052FC      06800  ldr       r0,[r0]
.   334  0000052FE  0F7FFFF2F  bl.w      Ext Proc #3
.   338  000005302      0E000  b         0 -> 342
.   340  000005304      00048  <LineNo: 72>
      INC(cnt);
.   342  000005306      09802  ldr       r0,[sp,#8]
.   344  000005308      03001  adds      r0,#1
.   346  00000530A      09002  str       r0,[sp,#8]
      Out.String(" <== sig "); Out.Int(cnt, 0); Out.Ln;
.   348  00000530C      0A000  adr       r0,pc,#0 -> 352
.   350  00000530E      0E005  b         10 -> 364
.   352  000005310  03D3D3C20  <String: " <==">
.   356  000005314  067697320  <String: " sig">
.   360  000005318  000000020  <String: " ...">
.   364  00000531C      0210A  movs      r1,#10
.   366  00000531E  0F7FEFFE5  bl.w      Ext Proc #4
.   370  000005322      0E000  b         0 -> 374
.   372  000005324      0004A  <LineNo: 74>
.   374  000005326      09802  ldr       r0,[sp,#8]
.   376  000005328      02100  movs      r1,#0
.   378  00000532A  0F7FFF815  bl.w      Ext Proc #6
.   382  00000532E      0E000  b         0 -> 386
.   384  000005330      0004A  <LineNo: 74>
.   386  000005332  0F7FEFFF7  bl.w      Ext Proc #5
.   390  000005336      0E000  b         0 -> 394
.   392  000005338      0004A  <LineNo: 74>
      Kernel.Next
    UNTIL FALSE
.   394  00000533A  0F7FFFB15  bl.w      Ext Proc #7
.   398  00000533E      0E000  b         0 -> 402
.   400  000005340      0004B  <LineNo: 75>
  END t3c;
.   402  000005342      04280  cmp       r0,r0
.   404  000005344  0F43FAFD2  beq.w     -92 -> 316
.   408  000005348      0B003  add       sp,#12
.   410  00000534A      0BD00  pop       { pc }
.   412  00000534C  020027E64  <Global: SignalSync data>


  PROCEDURE run;
    VAR res: INTEGER;
  BEGIN
.   416  000005350      0B500  push      { lr }
.   418  000005352      0B081  sub       sp,#4
    NEW(sig); ASSERT(sig # NIL, Errors.HeapOverflow);
.   420  000005354  0F8DF0134  ldr.w     r0,[pc,#308] -> 732
.   424  000005358  0F8DF112C  ldr.w     r1,[pc,#300] -> 728
.   428  00000535C  0F7FBFAC2  bl.w      Ext Proc #1
.   432  000005360      0E000  b         0 -> 436
.   434  000005362      00053  <LineNo: 83>
.   436  000005364  0F8DF0124  ldr.w     r0,[pc,#292] -> 732
.   440  000005368      06800  ldr       r0,[r0]
.   442  00000536A      02800  cmp       r0,#0
.   444  00000536C      0D101  bne.n     2 -> 450
.   446  00000536E      0DF29  svc       41
.   448  000005370      00053  <LineNo: 83>
    Signals.Init(sig);
.   450  000005372  0F8DF0118  ldr.w     r0,[pc,#280] -> 732
.   454  000005376      06800  ldr       r0,[r0]
.   456  000005378  0F7FFFF12  bl.w      Ext Proc #5
.   460  00000537C      0E000  b         0 -> 464
.   462  00000537E      00054  <LineNo: 84>
    Kernel.Install(MillisecsPerTick);
.   464  000005380      0200A  movs      r0,#10
.   466  000005382  0F7FFFD99  bl.w      Ext Proc #22
.   470  000005386      0E000  b         0 -> 474
.   472  000005388      00055  <LineNo: 85>
    (* heartbeat blinker *)
    Kernel.Allocate(t0c, ThreadStackSize, t0, tid0, res); ASSERT(res = Kernel.OK, Errors.ProgError);
.   474  00000538A      0BF00  nop       
.   476  00000538C  0F2AF1094  adr.w     r0,pc,#-404 -> 76
.   480  000005390  0F2404100  movw      r1,#1024
.   484  000005394  0F8DF20F8  ldr.w     r2,[pc,#248] -> 736
.   488  000005398  0F8DF30F8  ldr.w     r3,[pc,#248] -> 740
.   492  00000539C      0466C  mov       r4,sp
.   494  00000539E  0F7FFFA4D  bl.w      Ext Proc #4
.   498  0000053A2      0E000  b         0 -> 502
.   500  0000053A4      00057  <LineNo: 87>
.   502  0000053A6      09800  ldr       r0,[sp]
.   504  0000053A8      02800  cmp       r0,#0
.   506  0000053AA      0D001  beq.n     2 -> 512
.   508  0000053AC      0DF25  svc       37
.   510  0000053AE      00057  <LineNo: 87>
    Kernel.Enable(t0);
.   512  0000053B0  0F8DF00DC  ldr.w     r0,[pc,#220] -> 736
.   516  0000053B4      06800  ldr       r0,[r0]
.   518  0000053B6  0F7FFFACF  bl.w      Ext Proc #6
.   522  0000053BA      0E000  b         0 -> 526
.   524  0000053BC      00058  <LineNo: 88>
    (* two receivers, running the same code *)
    Kernel.Allocate(t1c, ThreadStackSize, t1, tid1, res); ASSERT(res = Kernel.OK, Errors.ProgError);
.   526  0000053BE      0BF00  nop       
.   528  0000053C0  0F2AF1090  adr.w     r0,pc,#-400 -> 132
.   532  0000053C4  0F2404100  movw      r1,#1024
.   536  0000053C8  0F8DF20CC  ldr.w     r2,[pc,#204] -> 744
.   540  0000053CC  0F8DF30CC  ldr.w     r3,[pc,#204] -> 748
.   544  0000053D0      0466C  mov       r4,sp
.   546  0000053D2  0F7FFFA33  bl.w      Ext Proc #4
.   550  0000053D6      0E000  b         0 -> 554
.   552  0000053D8      0005A  <LineNo: 90>
.   554  0000053DA      09800  ldr       r0,[sp]
.   556  0000053DC      02800  cmp       r0,#0
.   558  0000053DE      0D001  beq.n     2 -> 564
.   560  0000053E0      0DF25  svc       37
.   562  0000053E2      0005A  <LineNo: 90>
    Kernel.Enable(t1); (* note: no period as triggered by signal *)
.   564  0000053E4  0F8DF00B0  ldr.w     r0,[pc,#176] -> 744
.   568  0000053E8      06800  ldr       r0,[r0]
.   570  0000053EA  0F7FFFAB5  bl.w      Ext Proc #6
.   574  0000053EE      0E000  b         0 -> 578
.   576  0000053F0      0005B  <LineNo: 91>
    Kernel.Allocate(t1c, ThreadStackSize, t2, tid2, res); ASSERT(res = Kernel.OK, Errors.ProgError);
.   578  0000053F2      0BF00  nop       
.   580  0000053F4  0F2AF10C4  adr.w     r0,pc,#-452 -> 132
.   584  0000053F8  0F2404100  movw      r1,#1024
.   588  0000053FC  0F8DF20A0  ldr.w     r2,[pc,#160] -> 752
.   592  000005400  0F8DF30A0  ldr.w     r3,[pc,#160] -> 756
.   596  000005404      0466C  mov       r4,sp
.   598  000005406  0F7FFFA19  bl.w      Ext Proc #4
.   602  00000540A      0E000  b         0 -> 606
.   604  00000540C      0005C  <LineNo: 92>
.   606  00000540E      09800  ldr       r0,[sp]
.   608  000005410      02800  cmp       r0,#0
.   610  000005412      0D001  beq.n     2 -> 616
.   612  000005414      0DF25  svc       37
.   614  000005416      0005C  <LineNo: 92>
    Kernel.Enable(t2); (* note: no period as triggered by signal *)
.   616  000005418  0F8DF0084  ldr.w     r0,[pc,#132] -> 752
.   620  00000541C      06800  ldr       r0,[r0]
.   622  00000541E  0F7FFFA9B  bl.w      Ext Proc #6
.   626  000005422      0E000  b         0 -> 630
.   628  000005424      0005D  <LineNo: 93>
    (* one sender *)
    Kernel.Allocate(t3c, ThreadStackSize, t3, tid3, res); ASSERT(res = Kernel.OK, Errors.ProgError);
.   630  000005426      0BF00  nop       
.   632  000005428  0F2AF1068  adr.w     r0,pc,#-360 -> 276
.   636  00000542C  0F2404100  movw      r1,#1024
.   640  000005430  0F8DF2074  ldr.w     r2,[pc,#116] -> 760
.   644  000005434  0F8DF3074  ldr.w     r3,[pc,#116] -> 764
.   648  000005438      0466C  mov       r4,sp
.   650  00000543A  0F7FFF9FF  bl.w      Ext Proc #4
.   654  00000543E      0E000  b         0 -> 658
.   656  000005440      0005F  <LineNo: 95>
.   658  000005442      09800  ldr       r0,[sp]
.   660  000005444      02800  cmp       r0,#0
.   662  000005446      0D001  beq.n     2 -> 668
.   664  000005448      0DF25  svc       37
.   666  00000544A      0005F  <LineNo: 95>
    Kernel.Enable(t3);
.   668  00000544C  0F8DF0058  ldr.w     r0,[pc,#88] -> 760
.   672  000005450      06800  ldr       r0,[r0]
.   674  000005452  0F7FFFA81  bl.w      Ext Proc #6
.   678  000005456      0E000  b         0 -> 682
.   680  000005458      00060  <LineNo: 96>
    Out.String("start"); Out.Ln;
.   682  00000545A      0BF00  nop       
.   684  00000545C      0A000  adr       r0,pc,#0 -> 688
.   686  00000545E      0E003  b         6 -> 696
.   688  000005460  072617473  <String: "star">
.   692  000005464  000000074  <String: "t...">
.   696  000005468      02106  movs      r1,#6
.   698  00000546A  0F7FEFF3F  bl.w      Ext Proc #4
.   702  00000546E      0E000  b         0 -> 706
.   704  000005470      00061  <LineNo: 97>
.   706  000005472  0F7FEFF57  bl.w      Ext Proc #5
.   710  000005476      0E000  b         0 -> 714
.   712  000005478      00061  <LineNo: 97>
    Kernel.Run
    (* we'll not return here *)
  END run;
.   714  00000547A  0F7FFFCE7  bl.w      Ext Proc #21
.   718  00000547E      0E000  b         0 -> 722
.   720  000005480      00062  <LineNo: 98>
.   722  000005482      0B001  add       sp,#4
.   724  000005484      0BD00  pop       { pc }
.   726  000005486      0BF00  nop       
.   728  000005488      050DC  <Global: Signals code>
.   732  00000548C  020027E64  <Global: SignalSync data>
.   736  000005490  020027E84  <Global: SignalSync data>
.   740  000005494  020027E74  <Global: SignalSync data>
.   744  000005498  020027E80  <Global: SignalSync data>
.   748  00000549C  020027E70  <Global: SignalSync data>
.   752  0000054A0  020027E7C  <Global: SignalSync data>
.   756  0000054A4  020027E6C  <Global: SignalSync data>
.   760  0000054A8  020027E78  <Global: SignalSync data>
.   764  0000054AC  020027E68  <Global: SignalSync data>

BEGIN
.   768  0000054B0      0B500  push      { lr }
  run
END SignalSync.
.   770  0000054B2  0F7FFFF4D  bl.w      -358 -> 416
.   774  0000054B6      0E000  b         0 -> 778
.   776  0000054B8      00067  <LineNo: 103>
.   778  0000054BA      0BD00  pop       { pc }
 