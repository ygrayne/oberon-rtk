. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  0000011F4              <Pad: 0>
MODULE RuntimeErrors;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Exception handling: run-time errors and faults
  --
  * Error: run-time errors, including ASSERT, triggered by SVC calls in software
  * Fault: hardware faults, triggered by MCU hardware
  --
  MCU: MCX-A346
  --
  Copyright (c) 2020-2025 Gray, gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT
    SYSTEM, MCU := MCU2, LED, Config;

  CONST
    NumCores* = MCU.NumCores;
    TraceDepth* = 16;

    (* register offsets from stacked r0 *)
    PCoffset = 24;

    (* register numbers *)
    SP = 13;

    (* PPB_SHCSR bits *)
    SECUREFAULTENA  = 19;
    USGFAULTENA     = 18;
    BUSFAULTENA     = 17;
    MEMFAULTENA     = 16;

    (* EXC_RETURN bits *)
    (*EXC_RET_S     = 6;*)  (* = 1: secure stack frame, faulty code was running in secure domain *)
    (*EXC_RET_DCRS  = 5;*)  (* = 0: all CPU regs stacked by hardware, extended state context *)
    (*EXC_RET_FType = 4;*)  (* = 0: all FPU regs stacked by hardware, extended FPU context *)
    EXC_RET_Mode  = 3;      (* = 1: thread mode, faulty code was running in thread mode *)
    EXC_RET_SPSEL = 2;      (* = 1: PSP used for stacking *)
    (*EXC_RET_ES    = 0;*)  (* = 1: exception running in secure domain *)

    (* MCU.PPB_ICSR bits *)
    PENDSVSET = 28;


  TYPE
    (* data collected for an error/fault *)
    ErrorDesc* = RECORD
      core*: BYTE;       (* MCU core *)
      errCode*: BYTE;    (* error or fault code *)
      errType*: BYTE;    (* type of error: error or fault, handler or thread mode *)
      errAddr*: INTEGER; (* error/fault code address *)
      errLineNo*: INTEGER;      (* error source code line no, if available *)
      stackframeBase*: INTEGER; (* address of exception frame stack *)
      excRetVal*: INTEGER;
      xpsr*: INTEGER
    END;
.     4  0000011F8      011F8      00018  <Type:   24>
.     8  0000011FC      011FC      00000  <Type:   0>
.    12  000001200      01200      00000  <Type:   0>
.    16  000001204      01204      00000  <Type:   0>
.    20  000001208      01208      00000  <Type:   0>


  VAR
    ErrorRec*: ARRAY NumCores OF ErrorDesc;


  PROCEDURE excHandler[0];
    CONST FaultCodeBase = 2; R11 = 11;
    VAR
      cid, excNo, stackframeBase, excRetAddr, excRetVal, retAddr: INTEGER;
      b0, b1: BYTE; icsr: SET;
      er: ErrorDesc;
  BEGIN
.    24  00000120C  0F84DED04  push.w    { lr }
.    28  000001210      0B08E  sub       sp,#56
    SYSTEM.GET(MCU.PPB_VTOR, cid);
.    30  000001212  0F8DF0100  ldr.w     r0,[pc,#256] -> 288
.    34  000001216      06801  ldr       r1,[r0]
.    36  000001218      09100  str       r1,[sp]
    SYSTEM.GET(cid, cid);
.    38  00000121A      09800  ldr       r0,[sp]
.    40  00000121C      06801  ldr       r1,[r0]
.    42  00000121E      09100  str       r1,[sp]
    excRetAddr := SYSTEM.REG(SP) + 56; (* addr of EXC_RETURN value on stack *)
.    44  000001220      04668  mov       r0,sp
.    46  000001222      03038  adds      r0,#56
.    48  000001224      09003  str       r0,[sp,#12]
    SYSTEM.GET(excRetAddr, excRetVal);
.    50  000001226      09803  ldr       r0,[sp,#12]
.    52  000001228      06801  ldr       r1,[r0]
.    54  00000122A      09104  str       r1,[sp,#16]
    IF EXC_RET_SPSEL IN BITS(excRetVal) THEN (* PSP used for stacking *)
.    56  00000122C      09804  ldr       r0,[sp,#16]
.    58  00000122E  0F0100F04  tst.w     r0,#4
.    62  000001232  0F0008006  beq.w     12 -> 78
      SYSTEM.EMIT(MCU.MRS_R11_PSP);
.    66  000001236  0F3EF8B09  .word     0x8B09F3EF /* EMIT */
      stackframeBase := SYSTEM.REG(R11)
    ELSE (* MSP used *)
.    70  00000123A      04658  mov       r0,r11
.    72  00000123C      09002  str       r0,[sp,#8]
      stackframeBase := excRetAddr + 4;
.    74  00000123E  0F000B803  b.w       6 -> 84
.    78  000001242      09803  ldr       r0,[sp,#12]
.    80  000001244      03004  adds      r0,#4
.    82  000001246      09002  str       r0,[sp,#8]
    END;
    SYSTEM.GET(stackframeBase + PCoffset, retAddr);
.    84  000001248      09802  ldr       r0,[sp,#8]
.    86  00000124A      03018  adds      r0,#24
.    88  00000124C      06801  ldr       r1,[r0]
.    90  00000124E      09105  str       r1,[sp,#20]
    SYSTEM.EMIT(MCU.MRS_R11_XPSR);
.    92  000001250  0F3EF8B03  .word     0x8B03F3EF /* EMIT */
    er.xpsr := SYSTEM.REG(R11);
.    96  000001254      04658  mov       r0,r11
.    98  000001256      0900D  str       r0,[sp,#52]
    er.core := cid;
.   100  000001258      09800  ldr       r0,[sp]
.   102  00000125A  0F88D0020  strb.w    r0,[sp,#32]
    er.excRetVal := excRetVal;
.   106  00000125E      09804  ldr       r0,[sp,#16]
.   108  000001260      0900C  str       r0,[sp,#48]
    er.errAddr := retAddr;
.   110  000001262      09805  ldr       r0,[sp,#20]
.   112  000001264      09009  str       r0,[sp,#36]
    er.stackframeBase := stackframeBase;
.   114  000001266      09802  ldr       r0,[sp,#8]
.   116  000001268      0900B  str       r0,[sp,#44]

    SYSTEM.EMIT(MCU.MRS_R11_IPSR);
.   118  00000126A  0F3EF8B05  .word     0x8B05F3EF /* EMIT */
    excNo := SYSTEM.REG(R11);
.   122  00000126E      04658  mov       r0,r11
.   124  000001270      09001  str       r0,[sp,#4]
    IF excNo = MCU.EXC_SVC THEN (* SVC exception *)
.   126  000001272      09801  ldr       r0,[sp,#4]
.   128  000001274      0280B  cmp       r0,#11
.   130  000001276  0F040801C  bne.w     56 -> 190
      (* get source line number *)
      SYSTEM.GET(retAddr + 1, b1);
.   134  00000127A      09805  ldr       r0,[sp,#20]
.   136  00000127C      03001  adds      r0,#1
.   138  00000127E      07801  ldrb      r1,[r0]
.   140  000001280  0F88D1019  strb.w    r1,[sp,#25]
      SYSTEM.GET(retAddr, b0);
.   144  000001284      09805  ldr       r0,[sp,#20]
.   146  000001286      07801  ldrb      r1,[r0]
.   148  000001288  0F88D1018  strb.w    r1,[sp,#24]
      er.errLineNo := LSL(b1, 8) + b0;
.   152  00000128C  0F89D0019  ldrb.w    r0,[sp,#25]
.   156  000001290      00200  lsls      r0,r0,#8
.   158  000001292  0F89D1018  ldrb.w    r1,[sp,#24]
.   162  000001296      04408  add       r0,r1
.   164  000001298      0900A  str       r0,[sp,#40]
      (* get imm svc value = error code *)
      SYSTEM.GET(retAddr - 2, er.errCode); (* svc instr is two bytes, imm value is lower byte *)
.   166  00000129A      09805  ldr       r0,[sp,#20]
.   168  00000129C      03802  subs      r0,#2
.   170  00000129E      07801  ldrb      r1,[r0]
.   172  0000012A0  0F88D1021  strb.w    r1,[sp,#33]
      (* type: 0 = error in handler mode, 1 = error in thread mode *)
      er.errType := BFX(excRetVal, EXC_RET_Mode);
.   176  0000012A4      09804  ldr       r0,[sp,#16]
.   178  0000012A6  0F3C000C0  ubfx      r0,r0,3,1
.   182  0000012AA  0F88D0022  strb.w    r0,[sp,#34]
    ELSE (* all others *)
      er.errLineNo := 0;
.   186  0000012AE  0F000B80B  b.w       22 -> 212
.   190  0000012B2      02000  movs      r0,#0
.   192  0000012B4      0900A  str       r0,[sp,#40]
      er.errCode := excNo;
.   194  0000012B6      09801  ldr       r0,[sp,#4]
.   196  0000012B8  0F88D0021  strb.w    r0,[sp,#33]
      (* type: 2 = fault in handler mode, 3 = fault in thread mode *)
      er.errType := FaultCodeBase + BFX(excRetVal, EXC_RET_Mode);
.   200  0000012BC      09804  ldr       r0,[sp,#16]
.   202  0000012BE  0F3C000C0  ubfx      r0,r0,3,1
.   206  0000012C2      03002  adds      r0,#2
.   208  0000012C4  0F88D0022  strb.w    r0,[sp,#34]
    END;
    ErrorRec[cid] := er;
.   212  0000012C8      09800  ldr       r0,[sp]
.   214  0000012CA      02801  cmp       r0,#1
.   216  0000012CC      0D301  bcc.n     2 -> 222
.   218  0000012CE      0DF01  svc       1
.   220  0000012D0      0006C  <LineNo: 108>
.   222  0000012D2  0F8DF1048  ldr.w     r1,[pc,#72] -> 296
.   226  0000012D6      02218  movs      r2,#24
.   228  0000012D8  0FB021000  mla.w     r0,r2,r0,r1
.   232  0000012DC      02106  movs      r1,#6
.   234  0000012DE  0F11D0220  adds.w    r2,sp,#32
.   238  0000012E2  0F8523B04  ldr.w     r3,[r2],#4
.   242  0000012E6  0F8403B04  str.w     r3,[r0],#4
.   246  0000012EA      03901  subs      r1,#1
.   248  0000012EC      0D1F9  bne.n     -14 -> 238

    (* set PendSV pending to trigger error handler *)
    SYSTEM.GET(MCU.PPB_ICSR, icsr);
.   250  0000012EE  0F8DF0028  ldr.w     r0,[pc,#40] -> 292
.   254  0000012F2      06801  ldr       r1,[r0]
.   256  0000012F4      09107  str       r1,[sp,#28]
    icsr := icsr + {PENDSVSET};
.   258  0000012F6      09807  ldr       r0,[sp,#28]
.   260  0000012F8  0F0505080  orrs.w    r0,r0,#010000000H
.   264  0000012FC      09007  str       r0,[sp,#28]
    SYSTEM.PUT(MCU.PPB_ICSR, icsr);
.   266  0000012FE  0F8DF0018  ldr.w     r0,[pc,#24] -> 292
.   270  000001302      09907  ldr       r1,[sp,#28]
.   272  000001304      06001  str       r1,[r0]
    SYSTEM.EMIT(MCU.DSB); SYSTEM.EMIT(MCU.ISB)
.   274  000001306  0F3BF8F4F  dsb       
  END excHandler;
.   278  00000130A  0F3BF8F6F  isb       
.   282  00000130E      0B00E  add       sp,#56
.   284  000001310  0F85DFB04  pop.w     { pc }
.   288  000001314  0E000ED08  <Const:  -536810232>
.   292  000001318  0E000ED04  <Const:  -536810236>
.   296  00000131C  020027ED8  <Global: RuntimeErrors data>


  PROCEDURE errorHandler[0];
    (* default handler: simply blink LED *)
    VAR cid, errorLed, i: INTEGER; er: ErrorDesc;
  BEGIN
.   300  000001320  0F84DED04  push.w    { lr }
.   304  000001324      0B089  sub       sp,#36
    SYSTEM.GET(MCU.PPB_VTOR, cid);
.   306  000001326  0F8DF0084  ldr.w     r0,[pc,#132] -> 440
.   310  00000132A      06801  ldr       r1,[r0]
.   312  00000132C      09100  str       r1,[sp]
    SYSTEM.GET(cid, cid);
.   314  00000132E      09800  ldr       r0,[sp]
.   316  000001330      06801  ldr       r1,[r0]
.   318  000001332      09100  str       r1,[sp]
    er := ErrorRec[cid];
.   320  000001334      09800  ldr       r0,[sp]
.   322  000001336      02801  cmp       r0,#1
.   324  000001338      0D301  bcc.n     2 -> 330
.   326  00000133A      0DF01  svc       1
.   328  00000133C      0007C  <LineNo: 124>
.   330  00000133E  0F8DF1078  ldr.w     r1,[pc,#120] -> 452
.   334  000001342      02218  movs      r2,#24
.   336  000001344  0FB021000  mla.w     r0,r2,r0,r1
.   340  000001348      02106  movs      r1,#6
.   342  00000134A  0F11D020C  adds.w    r2,sp,#12
.   346  00000134E  0F8503B04  ldr.w     r3,[r0],#4
.   350  000001352  0F8423B04  str.w     r3,[r2],#4
.   354  000001356      03901  subs      r1,#1
.   356  000001358      0D1F9  bne.n     -14 -> 346
    IF er.errType IN {0, 1} THEN
.   358  00000135A      02003  movs      r0,#3
.   360  00000135C  0F89D100E  ldrb.w    r1,[sp,#14]
.   364  000001360      02201  movs      r2,#1
.   366  000001362      0408A  lsls      r2,r1
.   368  000001364  0EA100F02  tst.w     r0,r2
.   372  000001368  0F0008004  beq.w     8 -> 384
      errorLed := LED.Blue
    ELSE
.   376  00000136C      02015  movs      r0,#21
.   378  00000136E      09001  str       r0,[sp,#4]
      errorLed := LED.Red
.   380  000001370  0F000B802  b.w       4 -> 388
    END;
.   384  000001374      02012  movs      r0,#18
.   386  000001376      09001  str       r0,[sp,#4]
    REPEAT
      SYSTEM.PUT(LED.LXOR, {errorLed});
.   388  000001378      09801  ldr       r0,[sp,#4]
.   390  00000137A      02101  movs      r1,#1
.   392  00000137C  0FA11F000  lsls.w    r0,r1,r0
.   396  000001380  0F8DF102C  ldr.w     r1,[pc,#44] -> 444
.   400  000001384      06008  str       r0,[r1]
      i := 0;
.   402  000001386      02000  movs      r0,#0
.   404  000001388      09002  str       r0,[sp,#8]
      WHILE i < 1000000 DO INC(i) END
.   406  00000138A      09802  ldr       r0,[sp,#8]
.   408  00000138C  0F8DF1024  ldr.w     r1,[pc,#36] -> 448
.   412  000001390      04288  cmp       r0,r1
.   414  000001392  0F2808005  bge.w     10 -> 428
.   418  000001396      09802  ldr       r0,[sp,#8]
.   420  000001398      03001  adds      r0,#1
.   422  00000139A      09002  str       r0,[sp,#8]
.   424  00000139C  0F7FFBFF5  b.w       -22 -> 406
    UNTIL FALSE
  END errorHandler;
.   428  0000013A0      04280  cmp       r0,r0
.   430  0000013A2  0F43FAFE9  beq.w     -46 -> 388
.   434  0000013A6      0B009  add       sp,#36
.   436  0000013A8  0F85DFB04  pop.w     { pc }
.   440  0000013AC  0E000ED08  <Const:  -536810232>
.   444  0000013B0  04010504C  <Const:  1074810956>
.   448  0000013B4  0000F4240  <Const:  1000000>
.   452  0000013B8  020027ED8  <Global: RuntimeErrors data>


  PROCEDURE* install(vectAddr: INTEGER; p: PROCEDURE);
  BEGIN
.   456  0000013BC      0B500  push      { lr }
    INCL(SYSTEM.VAL(SET, p), 0); (* thumb code *)
.   458  0000013BE  0F0510101  orrs.w    r1,r1,#1
    SYSTEM.PUT(vectAddr, p)
  END install;
.   462  0000013C2      06001  str       r1,[r0]
.   464  0000013C4      0BD00  pop       { pc }
.   466  0000013C6      0BF00  nop       


  PROCEDURE InstallErrorHandler*(cid: INTEGER; eh: PROCEDURE);
    VAR vectorTableBase: INTEGER;
  BEGIN
.   468  0000013C8      0B503  push      { r0, r1, lr }
.   470  0000013CA      0B081  sub       sp,#4
    vectorTableBase := Config.DataMem[cid].start;
.   472  0000013CC      09801  ldr       r0,[sp,#4]
.   474  0000013CE      02801  cmp       r0,#1
.   476  0000013D0      0D301  bcc.n     2 -> 482
.   478  0000013D2      0DF01  svc       1
.   480  0000013D4      00094  <LineNo: 148>
.   482  0000013D6  0F8DF1020  ldr.w     r1,[pc,#32] -> 516
.   486  0000013DA      000C2  lsls      r2,r0,#3
.   488  0000013DC  0EB020001  add.w     r0,r2,r1
.   492  0000013E0      06800  ldr       r0,[r0]
.   494  0000013E2      09000  str       r0,[sp]
    install(vectorTableBase + MCU.EXC_PendSV_Offset, eh);
.   496  0000013E4      09800  ldr       r0,[sp]
.   498  0000013E6      03038  adds      r0,#56
.   500  0000013E8      09902  ldr       r1,[sp,#8]
.   502  0000013EA  0F7FFFFE7  bl.w      -50 -> 456
.   506  0000013EE      0E000  b         0 -> 510
.   508  0000013F0      00095  <LineNo: 149>
  END InstallErrorHandler;
.   510  0000013F2      0B003  add       sp,#12
.   512  0000013F4      0BD00  pop       { pc }
.   514  0000013F6      0BF00  nop       
.   516  0000013F8  020027FCC  <Global: Config data>


  PROCEDURE* EnableFaults*;
  (* call from code running on core 0 AND on core 1*)
    VAR x: SET;
  BEGIN
.   520  0000013FC      0B500  push      { lr }
    SYSTEM.GET(MCU.PPB_SHCSR, x);
.   522  0000013FE  0F8DF101C  ldr.w     r1,[pc,#28] -> 552
.   526  000001402      06808  ldr       r0,[r1]
    x := x + {MEMFAULTENA, BUSFAULTENA, USGFAULTENA, SECUREFAULTENA};
.   528  000001404  0F4502170  orrs.w    r1,r0,#00F0000H
.   532  000001408      04608  mov       r0,r1
    SYSTEM.PUT(MCU.PPB_SHCSR, x);
.   534  00000140A  0F8DF1010  ldr.w     r1,[pc,#16] -> 552
.   538  00000140E      06008  str       r0,[r1]
    SYSTEM.EMIT(MCU.DSB); SYSTEM.EMIT(MCU.ISB)
.   540  000001410  0F3BF8F4F  dsb       
  END EnableFaults;
.   544  000001414  0F3BF8F6F  isb       
.   548  000001418      0BD00  pop       { pc }
.   550  00000141A      0BF00  nop       
.   552  00000141C  0E000ED24  <Const:  -536810204>


  PROCEDURE Init*;
    VAR cid, addr, vectorTableBase, vectorTableTop: INTEGER;
  BEGIN
.   556  000001420      0B500  push      { lr }
.   558  000001422      0B084  sub       sp,#16
    cid := 0;
.   560  000001424      02000  movs      r0,#0
.   562  000001426      09000  str       r0,[sp]
    WHILE cid < NumCores DO
.   564  000001428      09800  ldr       r0,[sp]
.   566  00000142A      02801  cmp       r0,#1
.   568  00000142C  0F2808062  bge.w     196 -> 768
      (* initialise vector tables for each core *)
      (* install exception handlers for all errors and faults *)
      vectorTableBase := Config.DataMem[cid].start;
.   572  000001430      09800  ldr       r0,[sp]
.   574  000001432      02801  cmp       r0,#1
.   576  000001434      0D301  bcc.n     2 -> 582
.   578  000001436      0DF01  svc       1
.   580  000001438      000AB  <LineNo: 171>
.   582  00000143A  0F8DF10BC  ldr.w     r1,[pc,#188] -> 772
.   586  00000143E      000C2  lsls      r2,r0,#3
.   588  000001440  0EB020001  add.w     r0,r2,r1
.   592  000001444      06800  ldr       r0,[r0]
.   594  000001446      09002  str       r0,[sp,#8]
      vectorTableTop := vectorTableBase + MCU.VectorTableSize;
.   596  000001448      09802  ldr       r0,[sp,#8]
.   598  00000144A  0F5007009  add.w     r0,r0,#548
.   602  00000144E      09003  str       r0,[sp,#12]
      install(vectorTableBase + MCU.EXC_NMI_Offset, excHandler);
.   604  000001450      09802  ldr       r0,[sp,#8]
.   606  000001452      03008  adds      r0,#8
.   608  000001454  0F2AF214C  adr.w     r1,pc,#-588 -> 24
.   612  000001458  0F7FFFFB0  bl.w      -160 -> 456
.   616  00000145C      0E000  b         0 -> 620
.   618  00000145E      000AD  <LineNo: 173>
      install(vectorTableBase + MCU.EXC_HardFault_Offset, excHandler);
.   620  000001460      09802  ldr       r0,[sp,#8]
.   622  000001462      0300C  adds      r0,#12
.   624  000001464  0F2AF215C  adr.w     r1,pc,#-604 -> 24
.   628  000001468  0F7FFFFA8  bl.w      -176 -> 456
.   632  00000146C      0E000  b         0 -> 636
.   634  00000146E      000AE  <LineNo: 174>
      install(vectorTableBase + MCU.EXC_BusFault_Offset, excHandler);
.   636  000001470      09802  ldr       r0,[sp,#8]
.   638  000001472      03014  adds      r0,#20
.   640  000001474  0F2AF216C  adr.w     r1,pc,#-620 -> 24
.   644  000001478  0F7FFFFA0  bl.w      -192 -> 456
.   648  00000147C      0E000  b         0 -> 652
.   650  00000147E      000AF  <LineNo: 175>
      install(vectorTableBase + MCU.EXC_UsageFault_Offset, excHandler);
.   652  000001480      09802  ldr       r0,[sp,#8]
.   654  000001482      03018  adds      r0,#24
.   656  000001484  0F2AF217C  adr.w     r1,pc,#-636 -> 24
.   660  000001488  0F7FFFF98  bl.w      -208 -> 456
.   664  00000148C      0E000  b         0 -> 668
.   666  00000148E      000B0  <LineNo: 176>
      install(vectorTableBase + MCU.EXC_SVC_Offset, excHandler);
.   668  000001490      09802  ldr       r0,[sp,#8]
.   670  000001492      0302C  adds      r0,#44
.   672  000001494  0F2AF218C  adr.w     r1,pc,#-652 -> 24
.   676  000001498  0F7FFFF90  bl.w      -224 -> 456
.   680  00000149C      0E000  b         0 -> 684
.   682  00000149E      000B1  <LineNo: 177>
      install(vectorTableBase + MCU.EXC_DebugMon_Offset, excHandler);
.   684  0000014A0      09802  ldr       r0,[sp,#8]
.   686  0000014A2      03030  adds      r0,#48
.   688  0000014A4  0F2AF219C  adr.w     r1,pc,#-668 -> 24
.   692  0000014A8  0F7FFFF88  bl.w      -240 -> 456
.   696  0000014AC      0E000  b         0 -> 700
.   698  0000014AE      000B2  <LineNo: 178>
      (* install default error handler *)
      install(vectorTableBase + MCU.EXC_PendSV_Offset, errorHandler);
.   700  0000014B0      09802  ldr       r0,[sp,#8]
.   702  0000014B2      03038  adds      r0,#56
.   704  0000014B4  0F2AF1198  adr.w     r1,pc,#-408 -> 300
.   708  0000014B8  0F7FFFF80  bl.w      -256 -> 456
.   712  0000014BC      0E000  b         0 -> 716
.   714  0000014BE      000B4  <LineNo: 180>

      (* install excHandler across the rest of the vector table *)
      (* will catch any exception with a missing handler *)
      addr := vectorTableBase + MCU.EXC_SysTick_Offset;
.   716  0000014C0      09802  ldr       r0,[sp,#8]
.   718  0000014C2      0303C  adds      r0,#60
.   720  0000014C4      09001  str       r0,[sp,#4]
      WHILE addr < vectorTableTop DO
.   722  0000014C6      09801  ldr       r0,[sp,#4]
.   724  0000014C8      09903  ldr       r1,[sp,#12]
.   726  0000014CA      04288  cmp       r0,r1
.   728  0000014CC  0F280800D  bge.w     26 -> 758
        install(addr, excHandler); INC(addr, 4)
.   732  0000014D0      09801  ldr       r0,[sp,#4]
.   734  0000014D2      0BF00  nop       
.   736  0000014D4  0F2AF21CC  adr.w     r1,pc,#-716 -> 24
.   740  0000014D8  0F7FFFF70  bl.w      -288 -> 456
.   744  0000014DC      0E000  b         0 -> 748
.   746  0000014DE      000BA  <LineNo: 186>
      END;
.   748  0000014E0      09801  ldr       r0,[sp,#4]
.   750  0000014E2      03004  adds      r0,#4
.   752  0000014E4      09001  str       r0,[sp,#4]
.   754  0000014E6  0F7FFBFEE  b.w       -36 -> 722
      INC(cid)
    END
.   758  0000014EA      09800  ldr       r0,[sp]
.   760  0000014EC      03001  adds      r0,#1
.   762  0000014EE      09000  str       r0,[sp]
.   764  0000014F0  0F7FFBF9A  b.w       -204 -> 564
  END Init;
.   768  0000014F4      0B004  add       sp,#16
.   770  0000014F6      0BD00  pop       { pc }
.   772  0000014F8  020027FCC  <Global: Config data>

END RuntimeErrors.
.   776  0000014FC      0B500  push      { lr }
.   778  0000014FE      0BD00  pop       { pc }
 