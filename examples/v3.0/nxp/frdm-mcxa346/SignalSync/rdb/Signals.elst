. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  0000050D8              <Pad: 0>
MODULE Signals;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Signals for thread synchronisation
  --
  Based on Programming in Modula-2, N. Wirth, 3rd edition, 1985
  --
  Copyright (c) 2020-2025 Gray, gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT Kernel;

  TYPE
    Signal* = POINTER TO SignalDesc;
    SignalDesc* = RECORD
      queue: Kernel.Thread
    END;
.     4  0000050DC      050DC      00004  <Type:   4>
.     8  0000050E0      050E0      00000  <Type:   0>
.    12  0000050E4      050E4      00000  <Type:   0>
.    16  0000050E8      050E8      00000  <Type:   0>
.    20  0000050EC      050EC      00000  <Type:   0>


  PROCEDURE queue(s: Signal);
    VAR t: Kernel.Thread;
  BEGIN
.    24  0000050F0      0B501  push      { r0, lr }
.    26  0000050F2      0B081  sub       sp,#4
    IF s.queue = NIL THEN
.    28  0000050F4      09801  ldr       r0,[sp,#4]
.    30  0000050F6      06800  ldr       r0,[r0]
.    32  0000050F8      02800  cmp       r0,#0
.    34  0000050FA  0F040800C  bne.w     24 -> 62
      s.queue := Kernel.Ct();
.    38  0000050FE  0F7FFFD5F  bl.w      Ext Proc #17
.    42  000005102      0E000  b         0 -> 46
.    44  000005104      0001B  <LineNo: 27>
.    46  000005106      09901  ldr       r1,[sp,#4]
.    48  000005108      06008  str       r0,[r1]
      s.queue.next := NIL
.    50  00000510A      09801  ldr       r0,[sp,#4]
.    52  00000510C      06800  ldr       r0,[r0]
    ELSE
.    54  00000510E      02100  movs      r1,#0
.    56  000005110      062C1  str       r1,[r0,#44]
      t := s.queue;
.    58  000005112  0F000B817  b.w       46 -> 108
.    62  000005116      09801  ldr       r0,[sp,#4]
.    64  000005118      06800  ldr       r0,[r0]
.    66  00000511A      09000  str       r0,[sp]
      WHILE t.next # NIL DO
.    68  00000511C      09800  ldr       r0,[sp]
.    70  00000511E      06AC0  ldr       r0,[r0,#44]
.    72  000005120      02800  cmp       r0,#0
.    74  000005122  0F0008005  beq.w     10 -> 88
        t := t.next
      END;
.    78  000005126      09800  ldr       r0,[sp]
.    80  000005128      06AC0  ldr       r0,[r0,#44]
.    82  00000512A      09000  str       r0,[sp]
.    84  00000512C  0F7FFBFF6  b.w       -20 -> 68
      t.next := Kernel.Ct();
.    88  000005130  0F7FFFD46  bl.w      Ext Proc #17
.    92  000005134      0E000  b         0 -> 96
.    94  000005136      00022  <LineNo: 34>
.    96  000005138      09900  ldr       r1,[sp]
.    98  00000513A      062C8  str       r0,[r1,#44]
      t.next.next := NIL
.   100  00000513C      09800  ldr       r0,[sp]
.   102  00000513E      06AC0  ldr       r0,[r0,#44]
    END
.   104  000005140      02100  movs      r1,#0
.   106  000005142      062C1  str       r1,[r0,#44]
  END queue;
.   108  000005144      0B002  add       sp,#8
.   110  000005146      0BD00  pop       { pc }


  PROCEDURE Await*(s: Signal);
  BEGIN
.   112  000005148      0B501  push      { r0, lr }
    queue(s);
.   114  00000514A      09800  ldr       r0,[sp]
.   116  00000514C  0F7FFFFD0  bl.w      -96 -> 24
.   120  000005150      0E000  b         0 -> 124
.   122  000005152      0002A  <LineNo: 42>
    Kernel.SuspendMe
  END Await;
.   124  000005154  0F7FFFC40  bl.w      Ext Proc #9
.   128  000005158      0E000  b         0 -> 132
.   130  00000515A      0002B  <LineNo: 43>
.   132  00000515C      0B001  add       sp,#4
.   134  00000515E      0BD00  pop       { pc }


  PROCEDURE Send*(s: Signal);
    VAR t: Kernel.Thread;
  BEGIN
.   136  000005160      0B501  push      { r0, lr }
.   138  000005162      0B081  sub       sp,#4
    IF s.queue # NIL THEN
.   140  000005164      09801  ldr       r0,[sp,#4]
.   142  000005166      06800  ldr       r0,[r0]
.   144  000005168      02800  cmp       r0,#0
.   146  00000516A  0F000800C  beq.w     24 -> 174
      t := s.queue;
.   150  00000516E      09801  ldr       r0,[sp,#4]
.   152  000005170      06800  ldr       r0,[r0]
.   154  000005172      09000  str       r0,[sp]
      s.queue := t.next;
.   156  000005174      09800  ldr       r0,[sp]
.   158  000005176      06AC0  ldr       r0,[r0,#44]
.   160  000005178      09901  ldr       r1,[sp,#4]
.   162  00000517A      06008  str       r0,[r1]
      Kernel.Enable(t)
.   164  00000517C      09800  ldr       r0,[sp]
    END
.   166  00000517E  0F7FFFBEB  bl.w      Ext Proc #6
.   170  000005182      0E000  b         0 -> 174
.   172  000005184      00035  <LineNo: 53>
  END Send;
.   174  000005186      0B002  add       sp,#8
.   176  000005188      0BD00  pop       { pc }
.   178  00000518A      0BF00  nop       


  PROCEDURE* Awaited*(s: Signal): BOOLEAN;
    RETURN s.queue # NIL
.   180  00000518C      0B500  push      { lr }
  END Awaited;
.   182  00000518E      06801  ldr       r1,[r0]
.   184  000005190      02900  cmp       r1,#0
.   186  000005192      0BF14  ite       ne
.   188  000005194  0F04F0101  movne.w   r1,#1
.   192  000005198  0F04F0100  moveq.w   r1,#0
.   196  00000519C      04608  mov       r0,r1
.   198  00000519E      0BD00  pop       { pc }


  PROCEDURE Init*(s: Signal);
  BEGIN
.   200  0000051A0      0B501  push      { r0, lr }
    s.queue := NIL
  END Init;
.   202  0000051A2      02000  movs      r0,#0
.   204  0000051A4      09900  ldr       r1,[sp]
.   206  0000051A6      06008  str       r0,[r1]
.   208  0000051A8      0B001  add       sp,#4
.   210  0000051AA      0BD00  pop       { pc }

END Signals.
.   212  0000051AC      0B500  push      { lr }
.   214  0000051AE      0BD00  pop       { pc }
 