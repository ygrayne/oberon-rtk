. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  000003C88              <Pad: 0>
MODULE ClockCtrl;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Clock control
  --
  MCU: MCX-A346
  --
  Copyright (c) 2025 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT SYSTEM, MCU := MCU2;

  CONST
    ClkRegOffset = 4;

    (* bits in CLKDIV *)
    CLKDIV_UNSTABLE = 31;

    (* clocks for 'clk' parameter (functional clock) *)
    CLK_FRO_LF_DIV*   = 0;  (* CTIMER, I2C, SPI, UART, LPTMR *)
    CLK_FRO_HF_GATED* = 1;  (* CTIMER *)
    CLK_FRO_HF_DIV*   = 2;  (* I2C, SPI, UART, LPTMR *)
    CLK_CLK_IN*       = 3;  (* CTIMER, I2C, SPI, UART, LPTMR *)
    CLK_CLK_16K*      = 4;  (* CTIMER, UART *)
    CLK_CLK_1M*       = 5;  (* CTIMER, I2C, SPI, UART, LPTMR *)
    CLK_PLL_CLK_DIV*  = 6;  (* CTIMER, I2C, SPI, UART, LPTMR *)

    CLK_ST_CPU_CLK*      = 0;  (* SYSTICK *)
    CLK_ST_CLK_1M*       = 1;
    CLK_ST_OUT_CLK_16K*  = 2;

    CLK_OUT_FRO_12M*    = 0; (* CLK_CLKOUT *)
    CLK_OUT_FRO_HF_DIV* = 1;
    CLK_OUT_CLK_IN*     = 2;
    CLK_OUT_CLK_16K*    = 3;
    CLK_OUT_PLL_CLK*    = 5;
    CLK_OUT_CLK_SLOW*   = 6;


  PROCEDURE ConfigDevClock*(device: INTEGER; clk, div: INTEGER);
  (* set functional clock *)
  (* use with clock disabled *)
  (* MCU.CLK_* devices *)
    VAR selReg, divReg: INTEGER;
  BEGIN
.     4  000003C8C      0B507  push      { r0, r1, r2, lr }
.     6  000003C8E      0B082  sub       sp,#8
    selReg := MCU.MRCC_CLKSEL + (device * MCU.MRCC_CLK_Offset);
.     8  000003C90      09802  ldr       r0,[sp,#8]
.    10  000003C92      000C0  lsls      r0,r0,#3
.    12  000003C94  0F8DF1034  ldr.w     r1,[pc,#52] -> 68
.    16  000003C98      04408  add       r0,r1
.    18  000003C9A      09000  str       r0,[sp]
    divReg := selReg + ClkRegOffset;
.    20  000003C9C      09800  ldr       r0,[sp]
.    22  000003C9E      03004  adds      r0,#4
.    24  000003CA0      09001  str       r0,[sp,#4]
    clk := clk MOD 8H;
.    26  000003CA2      09803  ldr       r0,[sp,#12]
.    28  000003CA4  0F0000007  and.w     r0,r0,#7
.    32  000003CA8      09003  str       r0,[sp,#12]
    div := div MOD 10H;
.    34  000003CAA      09804  ldr       r0,[sp,#16]
.    36  000003CAC  0F000000F  and.w     r0,r0,#15
.    40  000003CB0      09004  str       r0,[sp,#16]
    SYSTEM.PUT(selReg, clk);
.    42  000003CB2      09800  ldr       r0,[sp]
.    44  000003CB4      09903  ldr       r1,[sp,#12]
.    46  000003CB6      06001  str       r1,[r0]
    SYSTEM.PUT(divReg, div);
.    48  000003CB8      09801  ldr       r0,[sp,#4]
.    50  000003CBA      09904  ldr       r1,[sp,#16]
.    52  000003CBC      06001  str       r1,[r0]
    REPEAT UNTIL ~SYSTEM.BIT(divReg, CLKDIV_UNSTABLE)
  END ConfigDevClock;
.    54  000003CBE      09801  ldr       r0,[sp,#4]
.    56  000003CC0      06801  ldr       r1,[r0]
.    58  000003CC2      00009  movs      r1,r1
.    60  000003CC4  0F53FAFFB  bmi.w     -10 -> 54
.    64  000003CC8      0B005  add       sp,#20
.    66  000003CCA      0BD00  pop       { pc }
.    68  000003CCC  0400910A0  <Const:  1074335904>

END ClockCtrl.
.    72  000003CD0      0B500  push      { lr }
.    74  000003CD2      0BD00  pop       { pc }
 