. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  000002F8C              <Pad: 0>
MODULE RuntimeErrorsOut;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Human-readable output for run-time errors.
  --
  MCU: MCX-A346
  --
  Copyright (c) 2020-2025 Gray, gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT
    RuntimeErrors, Stacktrace, Cores, TextIO, Texts, Errors, ProgData, Config;

  CONST NumCores = RuntimeErrors.NumCores;

  TYPE Name = ProgData.EntryString;

  VAR W: ARRAY NumCores OF TextIO.Writer;


  PROCEDURE nameLength(s: Name): INTEGER;
    VAR l: INTEGER;
  BEGIN
.     4  000002F90      0B501  push      { r0, lr }
.     6  000002F92      0B081  sub       sp,#4
    l := 0;
.     8  000002F94      02000  movs      r0,#0
.    10  000002F96      09000  str       r0,[sp]
    WHILE (l < LEN(s)) & (s[l] # 0X) DO INC(l) END;
.    12  000002F98      09800  ldr       r0,[sp]
.    14  000002F9A      02810  cmp       r0,#16
.    16  000002F9C  0F2808011  bge.w     34 -> 54
.    20  000002FA0      09800  ldr       r0,[sp]
.    22  000002FA2      02810  cmp       r0,#16
.    24  000002FA4      0D301  bcc.n     2 -> 30
.    26  000002FA6      0DF01  svc       1
.    28  000002FA8      0001C  <LineNo: 28>
.    30  000002FAA      09901  ldr       r1,[sp,#4]
.    32  000002FAC  0EB100001  adds.w    r0,r0,r1
.    36  000002FB0      07800  ldrb      r0,[r0]
.    38  000002FB2      02800  cmp       r0,#0
.    40  000002FB4  0F0008005  beq.w     10 -> 54
.    44  000002FB8      09800  ldr       r0,[sp]
.    46  000002FBA      03001  adds      r0,#1
.    48  000002FBC      09000  str       r0,[sp]
.    50  000002FBE  0F7FFBFEB  b.w       -42 -> 12
    RETURN l
  END nameLength;
.    54  000002FC2      09800  ldr       r0,[sp]
.    56  000002FC4      0B002  add       sp,#8
.    58  000002FC6      0BD00  pop       { pc }


  PROCEDURE printTraceLine(W: TextIO.Writer; modName, procName: Name; addr, lineNo, stkAddr: INTEGER);
    VAR l: INTEGER;
  BEGIN
.    60  000002FC8      0B53F  push      { r0, r1, r2, r3, r4, r5, lr }
.    62  000002FCA      0B081  sub       sp,#4
    Texts.WriteString(W, "  "); Texts.WriteString(W, modName);
.    64  000002FCC      09801  ldr       r0,[sp,#4]
.    66  000002FCE      0BF00  nop       
.    68  000002FD0      0A100  adr       r1,pc,#0 -> 72
.    70  000002FD2      0E001  b         2 -> 76
.    72  000002FD4  000002020  <String: "  ..">
.    76  000002FD8      02203  movs      r2,#3
.    78  000002FDA  0F7FFFB97  bl.w      Ext Proc #5
.    82  000002FDE      0E000  b         0 -> 86
.    84  000002FE0      00024  <LineNo: 36>
.    86  000002FE2      09801  ldr       r0,[sp,#4]
.    88  000002FE4      09902  ldr       r1,[sp,#8]
.    90  000002FE6      02210  movs      r2,#16
.    92  000002FE8  0F7FFFB90  bl.w      Ext Proc #5
.    96  000002FEC      0E000  b         0 -> 100
.    98  000002FEE      00024  <LineNo: 36>
    Texts.WriteString(W, "."); Texts.WriteString(W, procName);
.   100  000002FF0      09801  ldr       r0,[sp,#4]
.   102  000002FF2      0BF00  nop       
.   104  000002FF4      0A100  adr       r1,pc,#0 -> 108
.   106  000002FF6      0E001  b         2 -> 112
.   108  000002FF8  00000002E  <String: "....">
.   112  000002FFC      02202  movs      r2,#2
.   114  000002FFE  0F7FFFB85  bl.w      Ext Proc #5
.   118  000003002      0E000  b         0 -> 122
.   120  000003004      00025  <LineNo: 37>
.   122  000003006      09801  ldr       r0,[sp,#4]
.   124  000003008      09903  ldr       r1,[sp,#12]
.   126  00000300A      02210  movs      r2,#16
.   128  00000300C  0F7FFFB7E  bl.w      Ext Proc #5
.   132  000003010      0E000  b         0 -> 136
.   134  000003012      00025  <LineNo: 37>
    l := nameLength(modName) + nameLength(procName) + 1;
.   136  000003014      09802  ldr       r0,[sp,#8]
.   138  000003016  0F7FFFFBB  bl.w      -138 -> 4
.   142  00000301A      0E000  b         0 -> 146
.   144  00000301C      00026  <LineNo: 38>
.   146  00000301E      0B401  push      { r0 }
.   148  000003020      09804  ldr       r0,[sp,#16]
.   150  000003022  0F7FFFFB5  bl.w      -150 -> 4
.   154  000003026      0E000  b         0 -> 158
.   156  000003028      00026  <LineNo: 38>
.   158  00000302A      04601  mov       r1,r0
.   160  00000302C      0BC01  pop       { r0 }
.   162  00000302E      04408  add       r0,r1
.   164  000003030      03001  adds      r0,#1
.   166  000003032      09000  str       r0,[sp]
    Texts.WriteHex(W, addr, 36 - l);
.   168  000003034      09801  ldr       r0,[sp,#4]
.   170  000003036      09904  ldr       r1,[sp,#16]
.   172  000003038      09A00  ldr       r2,[sp]
.   174  00000303A  0F1C20224  rsb.w     r2,r2,#36
.   178  00000303E  0F7FFFBF3  bl.w      Ext Proc #8
.   182  000003042      0E000  b         0 -> 186
.   184  000003044      00027  <LineNo: 39>
    IF lineNo > 0 THEN
.   186  000003046      09805  ldr       r0,[sp,#20]
.   188  000003048      02800  cmp       r0,#0
.   190  00000304A  0F3408009  ble.w     18 -> 212
      Texts.WriteInt(W, lineNo, 6);
.   194  00000304E      09801  ldr       r0,[sp,#4]
.   196  000003050      09905  ldr       r1,[sp,#20]
.   198  000003052      02206  movs      r2,#6
.   200  000003054  0F7FFFBCE  bl.w      Ext Proc #7
.   204  000003058      0E000  b         0 -> 208
.   206  00000305A      00029  <LineNo: 41>
    ELSE
      Texts.WriteString(W, "      ")
.   208  00000305C  0F000B80D  b.w       26 -> 238
.   212  000003060      09801  ldr       r0,[sp,#4]
.   214  000003062      0BF00  nop       
.   216  000003064      0A100  adr       r1,pc,#0 -> 220
.   218  000003066      0E003  b         6 -> 228
.   220  000003068  020202020  <String: "    ">
.   224  00000306C  000002020  <String: "  ..">
.   228  000003070      02207  movs      r2,#7
    END;
.   230  000003072  0F7FFFB4B  bl.w      Ext Proc #5
.   234  000003076      0E000  b         0 -> 238
.   236  000003078      0002B  <LineNo: 43>
    IF stkAddr > 0 THEN
.   238  00000307A      09806  ldr       r0,[sp,#24]
.   240  00000307C      02800  cmp       r0,#0
.   242  00000307E  0F3408007  ble.w     14 -> 260
      Texts.WriteHex(W, stkAddr, 12);
.   246  000003082      09801  ldr       r0,[sp,#4]
.   248  000003084      09906  ldr       r1,[sp,#24]
.   250  000003086      0220C  movs      r2,#12
.   252  000003088  0F7FFFBCE  bl.w      Ext Proc #8
.   256  00000308C      0E000  b         0 -> 260
.   258  00000308E      0002E  <LineNo: 46>
    END;
    Texts.WriteLn(W)
.   260  000003090      09801  ldr       r0,[sp,#4]
  END printTraceLine;
.   262  000003092  0F7FFFB69  bl.w      Ext Proc #6
.   266  000003096      0E000  b         0 -> 270
.   268  000003098      00030  <LineNo: 48>
.   270  00000309A      0B007  add       sp,#28
.   272  00000309C      0BD00  pop       { pc }
.   274  00000309E      0BF00  nop       


  PROCEDURE printAnnotation(W: TextIO.Writer; ann: INTEGER);
  BEGIN
.   276  0000030A0      0B503  push      { r0, r1, lr }
    IF ann = Stacktrace.AnnStackframe THEN
.   278  0000030A2      09801  ldr       r0,[sp,#4]
.   280  0000030A4  0F1100F01  cmn.w     r0,#1
.   284  0000030A8  0F0408016  bne.w     44 -> 332
      Texts.WriteString(W, "  --- exc ---"); Texts.WriteLn(W)
.   288  0000030AC      09800  ldr       r0,[sp]
.   290  0000030AE      0BF00  nop       
.   292  0000030B0      0A100  adr       r1,pc,#0 -> 296
.   294  0000030B2      0E007  b         14 -> 312
.   296  0000030B4  02D2D2020  <String: "  --">
.   300  0000030B8  07865202D  <String: "- ex">
.   304  0000030BC  02D2D2063  <String: "c --">
.   308  0000030C0  00000002D  <String: "-...">
.   312  0000030C4      0220E  movs      r2,#14
.   314  0000030C6  0F7FFFB21  bl.w      Ext Proc #5
.   318  0000030CA      0E000  b         0 -> 322
.   320  0000030CC      00037  <LineNo: 55>
.   322  0000030CE      09800  ldr       r0,[sp]
    END
.   324  0000030D0  0F7FFFB4A  bl.w      Ext Proc #6
.   328  0000030D4      0E000  b         0 -> 332
.   330  0000030D6      00037  <LineNo: 55>
  END printAnnotation;
.   332  0000030D8      0B002  add       sp,#8
.   334  0000030DA      0BD00  pop       { pc }


  PROCEDURE PrintStacktrace*(tr: Stacktrace.Trace);
    VAR
      i, modEntryAddr, procEntryAddr, startSeqAddr: INTEGER;
      moduleName, procName: Name;
      tp: Stacktrace.TracePoint;
      We: TextIO.Writer;
  BEGIN
.   336  0000030DC      0B503  push      { r0, r1, lr }
.   338  0000030DE      0B091  sub       sp,#68
    We := W[Cores.CoreId()];
.   340  0000030E0  0F7FDFCDE  bl.w      Ext Proc #3
.   344  0000030E4      0E000  b         0 -> 348
.   346  0000030E6      00043  <LineNo: 67>
.   348  0000030E8      02801  cmp       r0,#1
.   350  0000030EA      0D301  bcc.n     2 -> 356
.   352  0000030EC      0DF01  svc       1
.   354  0000030EE      00043  <LineNo: 67>
.   356  0000030F0  0F8DF1188  ldr.w     r1,[pc,#392] -> 752
.   360  0000030F4      00082  lsls      r2,r0,#2
.   362  0000030F6  0EB020001  add.w     r0,r2,r1
.   366  0000030FA      06800  ldr       r0,[r0]
.   368  0000030FC      09010  str       r0,[sp,#64]
    startSeqAddr := Config.ResMem.start - 8;
.   370  0000030FE  0F8DF0178  ldr.w     r0,[pc,#376] -> 748
.   374  000003102      06800  ldr       r0,[r0]
.   376  000003104      03808  subs      r0,#8
.   378  000003106      09003  str       r0,[sp,#12]
    IF tr.count > 1 THEN
.   380  000003108      09811  ldr       r0,[sp,#68]
.   382  00000310A  0F8D00100  ldr.w     r0,[r0,#256]
.   386  00000310E      02801  cmp       r0,#1
.   388  000003110  0F340809C  ble.w     312 -> 704
      Texts.WriteString(We, "trace:"); Texts.WriteLn(We);
.   392  000003114      09810  ldr       r0,[sp,#64]
.   394  000003116      0BF00  nop       
.   396  000003118      0A100  adr       r1,pc,#0 -> 400
.   398  00000311A      0E003  b         6 -> 408
.   400  00000311C  063617274  <String: "trac">
.   404  000003120  000003A65  <String: "e:..">
.   408  000003124      02207  movs      r2,#7
.   410  000003126  0F7FFFAF1  bl.w      Ext Proc #5
.   414  00000312A      0E000  b         0 -> 418
.   416  00000312C      00046  <LineNo: 70>
.   418  00000312E      09810  ldr       r0,[sp,#64]
.   420  000003130  0F7FFFB1A  bl.w      Ext Proc #6
.   424  000003134      0E000  b         0 -> 428
.   426  000003136      00046  <LineNo: 70>
      i := 0;
.   428  000003138      02000  movs      r0,#0
.   430  00000313A      09000  str       r0,[sp]
      WHILE i < tr.count DO
.   432  00000313C      09800  ldr       r0,[sp]
.   434  00000313E      09911  ldr       r1,[sp,#68]
.   436  000003140  0F8D11100  ldr.w     r1,[r1,#256]
.   440  000003144      04288  cmp       r0,r1
.   442  000003146  0F2808063  bge.w     198 -> 644
        tp := tr.tp[i];
.   446  00000314A      09800  ldr       r0,[sp]
.   448  00000314C      02810  cmp       r0,#16
.   450  00000314E      0D301  bcc.n     2 -> 456
.   452  000003150      0DF01  svc       1
.   454  000003152      00049  <LineNo: 73>
.   456  000003154      09911  ldr       r1,[sp,#68]
.   458  000003156      00102  lsls      r2,r0,#4
.   460  000003158  0EB020001  add.w     r0,r2,r1
.   464  00000315C      02104  movs      r1,#4
.   466  00000315E  0F11D0230  adds.w    r2,sp,#48
.   470  000003162  0F8503B04  ldr.w     r3,[r0],#4
.   474  000003166  0F8423B04  str.w     r3,[r2],#4
.   478  00000316A      03901  subs      r1,#1
.   480  00000316C      0D1F9  bne.n     -14 -> 470
        printAnnotation(We, tp.annotation);
.   482  00000316E      09810  ldr       r0,[sp,#64]
.   484  000003170      0990F  ldr       r1,[sp,#60]
.   486  000003172  0F7FFFF95  bl.w      -214 -> 276
.   490  000003176      0E000  b         0 -> 494
.   492  000003178      0004A  <LineNo: 74>
        IF tp.address # startSeqAddr THEN
.   494  00000317A      0980C  ldr       r0,[sp,#48]
.   496  00000317C      09903  ldr       r1,[sp,#12]
.   498  00000317E      04288  cmp       r0,r1
.   500  000003180  0F0008015  beq.w     42 -> 546
          ProgData.FindProcEntries(tp.address, modEntryAddr, procEntryAddr);
.   504  000003184      0980C  ldr       r0,[sp,#48]
.   506  000003186  0F11D0104  adds.w    r1,sp,#4
.   510  00000318A  0F11D0208  adds.w    r2,sp,#8
.   514  00000318E  0F7FFFD81  bl.w      Ext Proc #3
.   518  000003192      0E000  b         0 -> 522
.   520  000003194      0004C  <LineNo: 76>
          ProgData.GetNames(modEntryAddr, procEntryAddr, moduleName, procName);
.   522  000003196      09801  ldr       r0,[sp,#4]
.   524  000003198      09902  ldr       r1,[sp,#8]
.   526  00000319A  0F11D0210  adds.w    r2,sp,#16
.   530  00000319E  0F11D0320  adds.w    r3,sp,#32
.   534  0000031A2  0F7FFFE05  bl.w      Ext Proc #6
.   538  0000031A6      0E000  b         0 -> 542
.   540  0000031A8      0004D  <LineNo: 77>
        ELSE
          moduleName := "start"; procName := "sequence";
.   542  0000031AA  0F000B820  b.w       64 -> 610
.   546  0000031AE  0F11D0010  adds.w    r0,sp,#16
.   550  0000031B2      0BF00  nop       
.   552  0000031B4      0A100  adr       r1,pc,#0 -> 556
.   554  0000031B6      0E003  b         6 -> 564
.   556  0000031B8  072617473  <String: "star">
.   560  0000031BC  000000074  <String: "t...">
.   564  0000031C0  0F8512B04  ldr.w     r2,[r1],#4
.   568  0000031C4  0F8402B04  str.w     r2,[r0],#4
.   572  0000031C8      0680A  ldr       r2,[r1]
.   574  0000031CA      06002  str       r2,[r0]
.   576  0000031CC  0F11D0020  adds.w    r0,sp,#32
.   580  0000031D0      0A100  adr       r1,pc,#0 -> 584
.   582  0000031D2      0E005  b         10 -> 596
.   584  0000031D4  075716573  <String: "sequ">
.   588  0000031D8  065636E65  <String: "ence">
.   592  0000031DC  000000000  <String: "....">
.   596  0000031E0  0F8512B04  ldr.w     r2,[r1],#4
.   600  0000031E4  0F8402B04  str.w     r2,[r0],#4
.   604  0000031E8  0F012427F  ands.w    r2,r2,#0FF000000H
.   608  0000031EC      0D1F8  bne.n     -16 -> 596
        END;
        printTraceLine(We, moduleName, procName, tp.address, tp.lineNo, tp.stackAddr);
.   610  0000031EE      09810  ldr       r0,[sp,#64]
.   612  0000031F0  0F11D0110  adds.w    r1,sp,#16
.   616  0000031F4  0F11D0220  adds.w    r2,sp,#32
.   620  0000031F8      09B0C  ldr       r3,[sp,#48]
.   622  0000031FA      09C0D  ldr       r4,[sp,#52]
.   624  0000031FC      09D0E  ldr       r5,[sp,#56]
.   626  0000031FE  0F7FFFEE3  bl.w      -570 -> 60
.   630  000003202      0E000  b         0 -> 634
.   632  000003204      00051  <LineNo: 81>
        INC(i)
      END;
.   634  000003206      09800  ldr       r0,[sp]
.   636  000003208      03001  adds      r0,#1
.   638  00000320A      09000  str       r0,[sp]
.   640  00000320C  0F7FFBF96  b.w       -212 -> 432
      IF tr.more THEN
.   644  000003210      09811  ldr       r0,[sp,#68]
.   646  000003212  0F8900104  ldrb.w    r0,[r0,#260]
.   650  000003216  0F0100F01  tst.w     r0,#1
.   654  00000321A  0F0008015  beq.w     42 -> 700
        Texts.WriteString(We, "  --- more ---"); Texts.WriteLn(We)
.   658  00000321E      09810  ldr       r0,[sp,#64]
.   660  000003220      0A100  adr       r1,pc,#0 -> 664
.   662  000003222      0E007  b         14 -> 680
.   664  000003224  02D2D2020  <String: "  --">
.   668  000003228  06F6D202D  <String: "- mo">
.   672  00000322C  02D206572  <String: "re -">
.   676  000003230  000002D2D  <String: "--..">
.   680  000003234      0220F  movs      r2,#15
.   682  000003236  0F7FFFA69  bl.w      Ext Proc #5
.   686  00000323A      0E000  b         0 -> 690
.   688  00000323C      00055  <LineNo: 85>
.   690  00000323E      09810  ldr       r0,[sp,#64]
      END
.   692  000003240  0F7FFFA92  bl.w      Ext Proc #6
.   696  000003244      0E000  b         0 -> 700
.   698  000003246      00055  <LineNo: 85>
    ELSE
      Texts.WriteString(We, "no trace"); Texts.WriteLn(We)
.   700  000003248  0F000B814  b.w       40 -> 744
.   704  00000324C      09810  ldr       r0,[sp,#64]
.   706  00000324E      0BF00  nop       
.   708  000003250      0A100  adr       r1,pc,#0 -> 712
.   710  000003252      0E005  b         10 -> 724
.   712  000003254  074206F6E  <String: "no t">
.   716  000003258  065636172  <String: "race">
.   720  00000325C  000000000  <String: "....">
.   724  000003260      02209  movs      r2,#9
.   726  000003262  0F7FFFA53  bl.w      Ext Proc #5
.   730  000003266      0E000  b         0 -> 734
.   732  000003268      00058  <LineNo: 88>
.   734  00000326A      09810  ldr       r0,[sp,#64]
    END
.   736  00000326C  0F7FFFA7C  bl.w      Ext Proc #6
.   740  000003270      0E000  b         0 -> 744
.   742  000003272      00058  <LineNo: 88>
  END PrintStacktrace;
.   744  000003274      0B013  add       sp,#76
.   746  000003276      0BD00  pop       { pc }
.   748  000003278  020027FA4  <Global: Config data>
.   752  00000327C  020027EBC  <Global: RuntimeErrorsOut data>


  PROCEDURE printReg(W: TextIO.Writer; label: ARRAY OF CHAR; value: INTEGER);
  BEGIN
.   756  000003280      0B50F  push      { r0, r1, r2, r3, lr }
    Texts.Write(W, " "); Texts.WriteString(W, label);
.   758  000003282      09800  ldr       r0,[sp]
.   760  000003284      02120  movs      r1,#32
.   762  000003286  0F7FFFA29  bl.w      Ext Proc #4
.   766  00000328A      0E000  b         0 -> 770
.   768  00000328C      0005F  <LineNo: 95>
.   770  00000328E      09800  ldr       r0,[sp]
.   772  000003290      09901  ldr       r1,[sp,#4]
.   774  000003292      09A02  ldr       r2,[sp,#8]
.   776  000003294  0F7FFFA3A  bl.w      Ext Proc #5
.   780  000003298      0E000  b         0 -> 784
.   782  00000329A      0005F  <LineNo: 95>
    Texts.WriteHex(W, value, 10);
.   784  00000329C      09800  ldr       r0,[sp]
.   786  00000329E      09903  ldr       r1,[sp,#12]
.   788  0000032A0      0220A  movs      r2,#10
.   790  0000032A2  0F7FFFAC1  bl.w      Ext Proc #8
.   794  0000032A6      0E000  b         0 -> 798
.   796  0000032A8      00060  <LineNo: 96>
    Texts.WriteLn(W)
.   798  0000032AA      09800  ldr       r0,[sp]
  END printReg;
.   800  0000032AC  0F7FFFA5C  bl.w      Ext Proc #6
.   804  0000032B0      0E000  b         0 -> 808
.   806  0000032B2      00061  <LineNo: 97>
.   808  0000032B4      0B004  add       sp,#16
.   810  0000032B6      0BD00  pop       { pc }


  PROCEDURE PrintStackedRegs*(stackedRegs: Stacktrace.StackedRegs);
    VAR We: TextIO.Writer;
  BEGIN
.   812  0000032B8      0B503  push      { r0, r1, lr }
.   814  0000032BA      0B081  sub       sp,#4
    We := W[Cores.CoreId()];
.   816  0000032BC  0F7FDFBF0  bl.w      Ext Proc #3
.   820  0000032C0      0E000  b         0 -> 824
.   822  0000032C2      00068  <LineNo: 104>
.   824  0000032C4      02801  cmp       r0,#1
.   826  0000032C6      0D301  bcc.n     2 -> 832
.   828  0000032C8      0DF01  svc       1
.   830  0000032CA      00068  <LineNo: 104>
.   832  0000032CC  0F8DF113C  ldr.w     r1,[pc,#316] -> 1152
.   836  0000032D0      00082  lsls      r2,r0,#2
.   838  0000032D2  0EB020001  add.w     r0,r2,r1
.   842  0000032D6      06800  ldr       r0,[r0]
.   844  0000032D8      09000  str       r0,[sp]
    Texts.WriteString(We, "stacked registers:"); Texts.WriteLn(We);
.   846  0000032DA      09800  ldr       r0,[sp]
.   848  0000032DC      0A100  adr       r1,pc,#0 -> 852
.   850  0000032DE      0E009  b         18 -> 872
.   852  0000032E0  063617473  <String: "stac">
.   856  0000032E4  02064656B  <String: "ked ">
.   860  0000032E8  069676572  <String: "regi">
.   864  0000032EC  072657473  <String: "ster">
.   868  0000032F0  000003A73  <String: "s:..">
.   872  0000032F4      02213  movs      r2,#19
.   874  0000032F6  0F7FFFA09  bl.w      Ext Proc #5
.   878  0000032FA      0E000  b         0 -> 882
.   880  0000032FC      00069  <LineNo: 105>
.   882  0000032FE      09800  ldr       r0,[sp]
.   884  000003300  0F7FFFA32  bl.w      Ext Proc #6
.   888  000003304      0E000  b         0 -> 892
.   890  000003306      00069  <LineNo: 105>
    printReg(We, "xpsr:", stackedRegs.xpsr);
.   892  000003308      09800  ldr       r0,[sp]
.   894  00000330A      0BF00  nop       
.   896  00000330C      0A100  adr       r1,pc,#0 -> 900
.   898  00000330E      0E003  b         6 -> 908
.   900  000003310  072737078  <String: "xpsr">
.   904  000003314  00000003A  <String: ":...">
.   908  000003318      02206  movs      r2,#6
.   910  00000331A      09B01  ldr       r3,[sp,#4]
.   912  00000331C      069DB  ldr       r3,[r3,#28]
.   914  00000331E  0F7FFFFAF  bl.w      -162 -> 756
.   918  000003322      0E000  b         0 -> 922
.   920  000003324      0006A  <LineNo: 106>
    printReg(We, "  pc:", stackedRegs.pc);
.   922  000003326      09800  ldr       r0,[sp]
.   924  000003328      0A100  adr       r1,pc,#0 -> 928
.   926  00000332A      0E003  b         6 -> 936
.   928  00000332C  063702020  <String: "  pc">
.   932  000003330  00000003A  <String: ":...">
.   936  000003334      02206  movs      r2,#6
.   938  000003336      09B01  ldr       r3,[sp,#4]
.   940  000003338      0699B  ldr       r3,[r3,#24]
.   942  00000333A  0F7FFFFA1  bl.w      -190 -> 756
.   946  00000333E      0E000  b         0 -> 950
.   948  000003340      0006B  <LineNo: 107>
    printReg(We, "  lr:", stackedRegs.lr);
.   950  000003342      09800  ldr       r0,[sp]
.   952  000003344      0A100  adr       r1,pc,#0 -> 956
.   954  000003346      0E003  b         6 -> 964
.   956  000003348  0726C2020  <String: "  lr">
.   960  00000334C  00000003A  <String: ":...">
.   964  000003350      02206  movs      r2,#6
.   966  000003352      09B01  ldr       r3,[sp,#4]
.   968  000003354      0695B  ldr       r3,[r3,#20]
.   970  000003356  0F7FFFF93  bl.w      -218 -> 756
.   974  00000335A      0E000  b         0 -> 978
.   976  00000335C      0006C  <LineNo: 108>
    printReg(We, " r12:", stackedRegs.r12);
.   978  00000335E      09800  ldr       r0,[sp]
.   980  000003360      0A100  adr       r1,pc,#0 -> 984
.   982  000003362      0E003  b         6 -> 992
.   984  000003364  032317220  <String: " r12">
.   988  000003368  00000003A  <String: ":...">
.   992  00000336C      02206  movs      r2,#6
.   994  00000336E      09B01  ldr       r3,[sp,#4]
.   996  000003370      0691B  ldr       r3,[r3,#16]
.   998  000003372  0F7FFFF85  bl.w      -246 -> 756
.  1002  000003376      0E000  b         0 -> 1006
.  1004  000003378      0006D  <LineNo: 109>
    printReg(We, "  r3:", stackedRegs.r3);
.  1006  00000337A      09800  ldr       r0,[sp]
.  1008  00000337C      0A100  adr       r1,pc,#0 -> 1012
.  1010  00000337E      0E003  b         6 -> 1020
.  1012  000003380  033722020  <String: "  r3">
.  1016  000003384  00000003A  <String: ":...">
.  1020  000003388      02206  movs      r2,#6
.  1022  00000338A      09B01  ldr       r3,[sp,#4]
.  1024  00000338C      068DB  ldr       r3,[r3,#12]
.  1026  00000338E  0F7FFFF77  bl.w      -274 -> 756
.  1030  000003392      0E000  b         0 -> 1034
.  1032  000003394      0006E  <LineNo: 110>
    printReg(We, "  r2:", stackedRegs.r2);
.  1034  000003396      09800  ldr       r0,[sp]
.  1036  000003398      0A100  adr       r1,pc,#0 -> 1040
.  1038  00000339A      0E003  b         6 -> 1048
.  1040  00000339C  032722020  <String: "  r2">
.  1044  0000033A0  00000003A  <String: ":...">
.  1048  0000033A4      02206  movs      r2,#6
.  1050  0000033A6      09B01  ldr       r3,[sp,#4]
.  1052  0000033A8      0689B  ldr       r3,[r3,#8]
.  1054  0000033AA  0F7FFFF69  bl.w      -302 -> 756
.  1058  0000033AE      0E000  b         0 -> 1062
.  1060  0000033B0      0006F  <LineNo: 111>
    printReg(We, "  r1:", stackedRegs.r1);
.  1062  0000033B2      09800  ldr       r0,[sp]
.  1064  0000033B4      0A100  adr       r1,pc,#0 -> 1068
.  1066  0000033B6      0E003  b         6 -> 1076
.  1068  0000033B8  031722020  <String: "  r1">
.  1072  0000033BC  00000003A  <String: ":...">
.  1076  0000033C0      02206  movs      r2,#6
.  1078  0000033C2      09B01  ldr       r3,[sp,#4]
.  1080  0000033C4      0685B  ldr       r3,[r3,#4]
.  1082  0000033C6  0F7FFFF5B  bl.w      -330 -> 756
.  1086  0000033CA      0E000  b         0 -> 1090
.  1088  0000033CC      00070  <LineNo: 112>
    printReg(We, "  r0:", stackedRegs.r0);
.  1090  0000033CE      09800  ldr       r0,[sp]
.  1092  0000033D0      0A100  adr       r1,pc,#0 -> 1096
.  1094  0000033D2      0E003  b         6 -> 1104
.  1096  0000033D4  030722020  <String: "  r0">
.  1100  0000033D8  00000003A  <String: ":...">
.  1104  0000033DC      02206  movs      r2,#6
.  1106  0000033DE      09B01  ldr       r3,[sp,#4]
.  1108  0000033E0      0681B  ldr       r3,[r3]
.  1110  0000033E2  0F7FFFF4D  bl.w      -358 -> 756
.  1114  0000033E6      0E000  b         0 -> 1118
.  1116  0000033E8      00071  <LineNo: 113>
    printReg(We, "  sp:", stackedRegs.sp)
.  1118  0000033EA      09800  ldr       r0,[sp]
.  1120  0000033EC      0A100  adr       r1,pc,#0 -> 1124
.  1122  0000033EE      0E003  b         6 -> 1132
.  1124  0000033F0  070732020  <String: "  sp">
.  1128  0000033F4  00000003A  <String: ":...">
.  1132  0000033F8      02206  movs      r2,#6
.  1134  0000033FA      09B01  ldr       r3,[sp,#4]
.  1136  0000033FC      06A1B  ldr       r3,[r3,#32]
  END PrintStackedRegs;
.  1138  0000033FE  0F7FFFF3F  bl.w      -386 -> 756
.  1142  000003402      0E000  b         0 -> 1146
.  1144  000003404      00072  <LineNo: 114>
.  1146  000003406      0B003  add       sp,#12
.  1148  000003408      0BD00  pop       { pc }
.  1150  00000340A      0BF00  nop       
.  1152  00000340C  020027EBC  <Global: RuntimeErrorsOut data>


  PROCEDURE PrintError*(er: RuntimeErrors.ErrorDesc);
    VAR
      modEntryAddr, procEntryAddr: INTEGER;
      moduleName, procName: Name;
      msg: Errors.String;
      We: TextIO.Writer;
  BEGIN
.  1156  000003410      0B503  push      { r0, r1, lr }
.  1158  000003412      0B09B  sub       sp,#108
    We := W[Cores.CoreId()];
.  1160  000003414  0F7FDFB44  bl.w      Ext Proc #3
.  1164  000003418      0E000  b         0 -> 1168
.  1166  00000341A      0007D  <LineNo: 125>
.  1168  00000341C      02801  cmp       r0,#1
.  1170  00000341E      0D301  bcc.n     2 -> 1176
.  1172  000003420      0DF01  svc       1
.  1174  000003422      0007D  <LineNo: 125>
.  1176  000003424  0F8DF1180  ldr.w     r1,[pc,#384] -> 1564
.  1180  000003428      00082  lsls      r2,r0,#2
.  1182  00000342A  0EB020001  add.w     r0,r2,r1
.  1186  00000342E      06800  ldr       r0,[r0]
.  1188  000003430      0901A  str       r0,[sp,#104]
    Errors.GetErrorType(er.errType, msg);
.  1190  000003432      0981B  ldr       r0,[sp,#108]
.  1192  000003434      07880  ldrb      r0,[r0,#2]
.  1194  000003436  0F11D0128  adds.w    r1,sp,#40
.  1198  00000343A  0F7FEFEE1  bl.w      Ext Proc #2
.  1202  00000343E      0E000  b         0 -> 1206
.  1204  000003440      0007E  <LineNo: 126>
    Texts.WriteString(We, msg);
.  1206  000003442      0981A  ldr       r0,[sp,#104]
.  1208  000003444  0F11D0128  adds.w    r1,sp,#40
.  1212  000003448      02240  movs      r2,#64
.  1214  00000344A  0F7FFF95F  bl.w      Ext Proc #5
.  1218  00000344E      0E000  b         0 -> 1222
.  1220  000003450      0007F  <LineNo: 127>
    Texts.WriteString(We, ": "); Texts.WriteInt(We, ABS(er.errCode), 0);
.  1222  000003452      0981A  ldr       r0,[sp,#104]
.  1224  000003454      0A100  adr       r1,pc,#0 -> 1228
.  1226  000003456      0E001  b         2 -> 1232
.  1228  000003458  00000203A  <String: ": ..">
.  1232  00000345C      02203  movs      r2,#3
.  1234  00000345E  0F7FFF955  bl.w      Ext Proc #5
.  1238  000003462      0E000  b         0 -> 1242
.  1240  000003464      00080  <LineNo: 128>
.  1242  000003466      0981A  ldr       r0,[sp,#104]
.  1244  000003468      0991B  ldr       r1,[sp,#108]
.  1246  00000346A      07849  ldrb      r1,[r1,#1]
.  1248  00000346C  0F1B10F00  cmp.w     r1,#0
.  1252  000003470      0BF48  it        mi
.  1254  000003472  0F1D10100  rsbsmi.w  r1,r1,#0
.  1258  000003476      02200  movs      r2,#0
.  1260  000003478  0F7FFF9BC  bl.w      Ext Proc #7
.  1264  00000347C      0E000  b         0 -> 1268
.  1266  00000347E      00080  <LineNo: 128>
    Texts.WriteString(We, " core: ");
.  1268  000003480      0981A  ldr       r0,[sp,#104]
.  1270  000003482      0BF00  nop       
.  1272  000003484      0A100  adr       r1,pc,#0 -> 1276
.  1274  000003486      0E003  b         6 -> 1284
.  1276  000003488  0726F6320  <String: " cor">
.  1280  00000348C  000203A65  <String: "e: .">
.  1284  000003490      02208  movs      r2,#8
.  1286  000003492  0F7FFF93B  bl.w      Ext Proc #5
.  1290  000003496      0E000  b         0 -> 1294
.  1292  000003498      00081  <LineNo: 129>
    Texts.WriteInt(We, er.core, 0); Texts.WriteLn(We);
.  1294  00000349A      0981A  ldr       r0,[sp,#104]
.  1296  00000349C      0991B  ldr       r1,[sp,#108]
.  1298  00000349E      07809  ldrb      r1,[r1]
.  1300  0000034A0      02200  movs      r2,#0
.  1302  0000034A2  0F7FFF9A7  bl.w      Ext Proc #7
.  1306  0000034A6      0E000  b         0 -> 1310
.  1308  0000034A8      00082  <LineNo: 130>
.  1310  0000034AA      0981A  ldr       r0,[sp,#104]
.  1312  0000034AC  0F7FFF95C  bl.w      Ext Proc #6
.  1316  0000034B0      0E000  b         0 -> 1320
.  1318  0000034B2      00082  <LineNo: 130>
    Errors.GetErrorMsg(er.errType, er.errCode, msg);
.  1320  0000034B4      0981B  ldr       r0,[sp,#108]
.  1322  0000034B6      07880  ldrb      r0,[r0,#2]
.  1324  0000034B8      0991B  ldr       r1,[sp,#108]
.  1326  0000034BA      07849  ldrb      r1,[r1,#1]
.  1328  0000034BC  0F11D0228  adds.w    r2,sp,#40
.  1332  0000034C0  0F7FEFE88  bl.w      Ext Proc #1
.  1336  0000034C4      0E000  b         0 -> 1340
.  1338  0000034C6      00083  <LineNo: 131>
    Texts.WriteString(We, msg); Texts.WriteLn(We);
.  1340  0000034C8      0981A  ldr       r0,[sp,#104]
.  1342  0000034CA  0F11D0128  adds.w    r1,sp,#40
.  1346  0000034CE      02240  movs      r2,#64
.  1348  0000034D0  0F7FFF91C  bl.w      Ext Proc #5
.  1352  0000034D4      0E000  b         0 -> 1356
.  1354  0000034D6      00084  <LineNo: 132>
.  1356  0000034D8      0981A  ldr       r0,[sp,#104]
.  1358  0000034DA  0F7FFF945  bl.w      Ext Proc #6
.  1362  0000034DE      0E000  b         0 -> 1366
.  1364  0000034E0      00084  <LineNo: 132>
    ProgData.FindProcEntries(er.errAddr, modEntryAddr, procEntryAddr);
.  1366  0000034E2      0981B  ldr       r0,[sp,#108]
.  1368  0000034E4      06840  ldr       r0,[r0,#4]
.  1370  0000034E6      04669  mov       r1,sp
.  1372  0000034E8  0F11D0204  adds.w    r2,sp,#4
.  1376  0000034EC  0F7FFFBD2  bl.w      Ext Proc #3
.  1380  0000034F0      0E000  b         0 -> 1384
.  1382  0000034F2      00085  <LineNo: 133>
    ProgData.GetNames(modEntryAddr, procEntryAddr, moduleName, procName);
.  1384  0000034F4      09800  ldr       r0,[sp]
.  1386  0000034F6      09901  ldr       r1,[sp,#4]
.  1388  0000034F8  0F11D0208  adds.w    r2,sp,#8
.  1392  0000034FC  0F11D0318  adds.w    r3,sp,#24
.  1396  000003500  0F7FFFC56  bl.w      Ext Proc #6
.  1400  000003504      0E000  b         0 -> 1404
.  1402  000003506      00086  <LineNo: 134>
    Texts.WriteString(We, moduleName); Texts.Write(We, "."); Texts.WriteString(We, procName);
.  1404  000003508      0981A  ldr       r0,[sp,#104]
.  1406  00000350A  0F11D0108  adds.w    r1,sp,#8
.  1410  00000350E      02210  movs      r2,#16
.  1412  000003510  0F7FFF8FC  bl.w      Ext Proc #5
.  1416  000003514      0E000  b         0 -> 1420
.  1418  000003516      00087  <LineNo: 135>
.  1420  000003518      0981A  ldr       r0,[sp,#104]
.  1422  00000351A      0212E  movs      r1,#46
.  1424  00000351C  0F7FFF8DE  bl.w      Ext Proc #4
.  1428  000003520      0E000  b         0 -> 1432
.  1430  000003522      00087  <LineNo: 135>
.  1432  000003524      0981A  ldr       r0,[sp,#104]
.  1434  000003526  0F11D0118  adds.w    r1,sp,#24
.  1438  00000352A      02210  movs      r2,#16
.  1440  00000352C  0F7FFF8EE  bl.w      Ext Proc #5
.  1444  000003530      0E000  b         0 -> 1448
.  1446  000003532      00087  <LineNo: 135>
    Texts.WriteString(We, "  addr: "); Texts.WriteHex(We, er.errAddr, 0);
.  1448  000003534      0981A  ldr       r0,[sp,#104]
.  1450  000003536      0BF00  nop       
.  1452  000003538      0A100  adr       r1,pc,#0 -> 1456
.  1454  00000353A      0E005  b         10 -> 1468
.  1456  00000353C  064612020  <String: "  ad">
.  1460  000003540  0203A7264  <String: "dr: ">
.  1464  000003544  000000000  <String: "....">
.  1468  000003548      02209  movs      r2,#9
.  1470  00000354A  0F7FFF8DF  bl.w      Ext Proc #5
.  1474  00000354E      0E000  b         0 -> 1478
.  1476  000003550      00088  <LineNo: 136>
.  1478  000003552      0981A  ldr       r0,[sp,#104]
.  1480  000003554      0991B  ldr       r1,[sp,#108]
.  1482  000003556      06849  ldr       r1,[r1,#4]
.  1484  000003558      02200  movs      r2,#0
.  1486  00000355A  0F7FFF965  bl.w      Ext Proc #8
.  1490  00000355E      0E000  b         0 -> 1494
.  1492  000003560      00088  <LineNo: 136>
    IF er.errLineNo > 0 THEN
.  1494  000003562      0981B  ldr       r0,[sp,#108]
.  1496  000003564      06880  ldr       r0,[r0,#8]
.  1498  000003566      02800  cmp       r0,#0
.  1500  000003568  0F3408017  ble.w     46 -> 1550
      Texts.WriteString(We, "  line: "); Texts.WriteInt(We, er.errLineNo, 0)
.  1504  00000356C      0981A  ldr       r0,[sp,#104]
.  1506  00000356E      0BF00  nop       
.  1508  000003570      0A100  adr       r1,pc,#0 -> 1512
.  1510  000003572      0E005  b         10 -> 1524
.  1512  000003574  0696C2020  <String: "  li">
.  1516  000003578  0203A656E  <String: "ne: ">
.  1520  00000357C  000000000  <String: "....">
.  1524  000003580      02209  movs      r2,#9
.  1526  000003582  0F7FFF8C3  bl.w      Ext Proc #5
.  1530  000003586      0E000  b         0 -> 1534
.  1532  000003588      0008A  <LineNo: 138>
.  1534  00000358A      0981A  ldr       r0,[sp,#104]
.  1536  00000358C      0991B  ldr       r1,[sp,#108]
.  1538  00000358E      06889  ldr       r1,[r1,#8]
.  1540  000003590      02200  movs      r2,#0
    END;
.  1542  000003592  0F7FFF92F  bl.w      Ext Proc #7
.  1546  000003596      0E000  b         0 -> 1550
.  1548  000003598      0008A  <LineNo: 138>
    Texts.WriteLn(We)
.  1550  00000359A      0981A  ldr       r0,[sp,#104]
  END PrintError;
.  1552  00000359C  0F7FFF8E4  bl.w      Ext Proc #6
.  1556  0000035A0      0E000  b         0 -> 1560
.  1558  0000035A2      0008C  <LineNo: 140>
.  1560  0000035A4      0B01D  add       sp,#116
.  1562  0000035A6      0BD00  pop       { pc }
.  1564  0000035A8  020027EBC  <Global: RuntimeErrorsOut data>


  PROCEDURE PrintLogEntry*(er: RuntimeErrors.ErrorDesc);
    VAR We: TextIO.Writer;
  BEGIN
.  1568  0000035AC      0B503  push      { r0, r1, lr }
.  1570  0000035AE      0B081  sub       sp,#4
    We := W[Cores.CoreId()];
.  1572  0000035B0  0F7FDFA76  bl.w      Ext Proc #3
.  1576  0000035B4      0E000  b         0 -> 1580
.  1578  0000035B6      00093  <LineNo: 147>
.  1580  0000035B8      02801  cmp       r0,#1
.  1582  0000035BA      0D301  bcc.n     2 -> 1588
.  1584  0000035BC      0DF01  svc       1
.  1586  0000035BE      00093  <LineNo: 147>
.  1588  0000035C0  0F8DF10A8  ldr.w     r1,[pc,#168] -> 1760
.  1592  0000035C4      00082  lsls      r2,r0,#2
.  1594  0000035C6  0EB020001  add.w     r0,r2,r1
.  1598  0000035CA      06800  ldr       r0,[r0]
.  1600  0000035CC      09000  str       r0,[sp]
    Texts.WriteString(We, "run-time error:");
.  1602  0000035CE      09800  ldr       r0,[sp]
.  1604  0000035D0      0A100  adr       r1,pc,#0 -> 1608
.  1606  0000035D2      0E007  b         14 -> 1624
.  1608  0000035D4  02D6E7572  <String: "run-">
.  1612  0000035D8  0656D6974  <String: "time">
.  1616  0000035DC  072726520  <String: " err">
.  1620  0000035E0  0003A726F  <String: "or:.">
.  1624  0000035E4      02210  movs      r2,#16
.  1626  0000035E6  0F7FFF891  bl.w      Ext Proc #5
.  1630  0000035EA      0E000  b         0 -> 1634
.  1632  0000035EC      00094  <LineNo: 148>
    Texts.WriteInt(We, er.core, 2);
.  1634  0000035EE      09800  ldr       r0,[sp]
.  1636  0000035F0      09901  ldr       r1,[sp,#4]
.  1638  0000035F2      07809  ldrb      r1,[r1]
.  1640  0000035F4      02202  movs      r2,#2
.  1642  0000035F6  0F7FFF8FD  bl.w      Ext Proc #7
.  1646  0000035FA      0E000  b         0 -> 1650
.  1648  0000035FC      00095  <LineNo: 149>
    Texts.WriteInt(We, er.errType, 2);
.  1650  0000035FE      09800  ldr       r0,[sp]
.  1652  000003600      09901  ldr       r1,[sp,#4]
.  1654  000003602      07889  ldrb      r1,[r1,#2]
.  1656  000003604      02202  movs      r2,#2
.  1658  000003606  0F7FFF8F5  bl.w      Ext Proc #7
.  1662  00000360A      0E000  b         0 -> 1666
.  1664  00000360C      00096  <LineNo: 150>
    Texts.WriteInt(We, er.errCode, 4);
.  1666  00000360E      09800  ldr       r0,[sp]
.  1668  000003610      09901  ldr       r1,[sp,#4]
.  1670  000003612      07849  ldrb      r1,[r1,#1]
.  1672  000003614      02204  movs      r2,#4
.  1674  000003616  0F7FFF8ED  bl.w      Ext Proc #7
.  1678  00000361A      0E000  b         0 -> 1682
.  1680  00000361C      00097  <LineNo: 151>
    Texts.WriteHex(We, er.errAddr, 10);
.  1682  00000361E      09800  ldr       r0,[sp]
.  1684  000003620      09901  ldr       r1,[sp,#4]
.  1686  000003622      06849  ldr       r1,[r1,#4]
.  1688  000003624      0220A  movs      r2,#10
.  1690  000003626  0F7FFF8FF  bl.w      Ext Proc #8
.  1694  00000362A      0E000  b         0 -> 1698
.  1696  00000362C      00098  <LineNo: 152>
    Texts.WriteInt(We, er.errLineNo, 6);
.  1698  00000362E      09800  ldr       r0,[sp]
.  1700  000003630      09901  ldr       r1,[sp,#4]
.  1702  000003632      06889  ldr       r1,[r1,#8]
.  1704  000003634      02206  movs      r2,#6
.  1706  000003636  0F7FFF8DD  bl.w      Ext Proc #7
.  1710  00000363A      0E000  b         0 -> 1714
.  1712  00000363C      00099  <LineNo: 153>
    Texts.WriteHex(We, er.stackframeBase, 12);
.  1714  00000363E      09800  ldr       r0,[sp]
.  1716  000003640      09901  ldr       r1,[sp,#4]
.  1718  000003642      068C9  ldr       r1,[r1,#12]
.  1720  000003644      0220C  movs      r2,#12
.  1722  000003646  0F7FFF8EF  bl.w      Ext Proc #8
.  1726  00000364A      0E000  b         0 -> 1730
.  1728  00000364C      0009A  <LineNo: 154>
    Texts.WriteHex(We, er.excRetVal, 12);
.  1730  00000364E      09800  ldr       r0,[sp]
.  1732  000003650      09901  ldr       r1,[sp,#4]
.  1734  000003652      06909  ldr       r1,[r1,#16]
.  1736  000003654      0220C  movs      r2,#12
.  1738  000003656  0F7FFF8E7  bl.w      Ext Proc #8
.  1742  00000365A      0E000  b         0 -> 1746
.  1744  00000365C      0009B  <LineNo: 155>
    Texts.WriteLn(We)
.  1746  00000365E      09800  ldr       r0,[sp]
  END PrintLogEntry;
.  1748  000003660  0F7FFF882  bl.w      Ext Proc #6
.  1752  000003664      0E000  b         0 -> 1756
.  1754  000003666      0009C  <LineNo: 156>
.  1756  000003668      0B003  add       sp,#12
.  1758  00000366A      0BD00  pop       { pc }
.  1760  00000366C  020027EBC  <Global: RuntimeErrorsOut data>


  (* RuntimeErrors-compatible handler *)

  PROCEDURE ErrorHandler*[0];
  (* print error data and halt *)
    VAR cid: INTEGER; trace: Stacktrace.Trace; regs: Stacktrace.StackedRegs;
  BEGIN
.  1764  000003670  0E92D4FF0  push.w    { r4, r5, r6, r7, r8, r9, r10, r11, lr }
.  1768  000003674      0B0CC  sub       sp,#304
    Cores.GetCoreId(cid);
.  1770  000003676      04668  mov       r0,sp
.  1772  000003678  0F7FDFA02  bl.w      Ext Proc #2
.  1776  00000367C      0E000  b         0 -> 1780
.  1778  00000367E      000A6  <LineNo: 166>
    PrintLogEntry(RuntimeErrors.ErrorRec[cid]);
.  1780  000003680      09800  ldr       r0,[sp]
.  1782  000003682      02801  cmp       r0,#1
.  1784  000003684      0D301  bcc.n     2 -> 1790
.  1786  000003686      0DF01  svc       1
.  1788  000003688      000A7  <LineNo: 167>
.  1790  00000368A  0F8DF10B0  ldr.w     r1,[pc,#176] -> 1968
.  1794  00000368E      02218  movs      r2,#24
.  1796  000003690  0FB021000  mla.w     r0,r2,r0,r1
.  1800  000003694  0F8DF10A8  ldr.w     r1,[pc,#168] -> 1972
.  1804  000003698  0F7FFFF88  bl.w      -240 -> 1568
.  1808  00000369C      0E000  b         0 -> 1812
.  1810  00000369E      000A7  <LineNo: 167>
    Stacktrace.CreateTrace(RuntimeErrors.ErrorRec[cid], trace);
.  1812  0000036A0      09800  ldr       r0,[sp]
.  1814  0000036A2      02801  cmp       r0,#1
.  1816  0000036A4      0D301  bcc.n     2 -> 1822
.  1818  0000036A6      0DF01  svc       1
.  1820  0000036A8      000A8  <LineNo: 168>
.  1822  0000036AA  0F8DF1090  ldr.w     r1,[pc,#144] -> 1968
.  1826  0000036AE      02218  movs      r2,#24
.  1828  0000036B0  0FB021000  mla.w     r0,r2,r0,r1
.  1832  0000036B4  0F8DF1088  ldr.w     r1,[pc,#136] -> 1972
.  1836  0000036B8  0F11D0204  adds.w    r2,sp,#4
.  1840  0000036BC  0F8DF3084  ldr.w     r3,[pc,#132] -> 1976
.  1844  0000036C0  0F7FEF8DA  bl.w      Ext Proc #4
.  1848  0000036C4      0E000  b         0 -> 1852
.  1850  0000036C6      000A8  <LineNo: 168>
    Stacktrace.ReadRegisters(RuntimeErrors.ErrorRec[cid], regs);
.  1852  0000036C8      09800  ldr       r0,[sp]
.  1854  0000036CA      02801  cmp       r0,#1
.  1856  0000036CC      0D301  bcc.n     2 -> 1862
.  1858  0000036CE      0DF01  svc       1
.  1860  0000036D0      000A9  <LineNo: 169>
.  1862  0000036D2  0F8DF1068  ldr.w     r1,[pc,#104] -> 1968
.  1866  0000036D6      02218  movs      r2,#24
.  1868  0000036D8  0FB021000  mla.w     r0,r2,r0,r1
.  1872  0000036DC  0F8DF1060  ldr.w     r1,[pc,#96] -> 1972
.  1876  0000036E0  0F51D7286  adds.w    r2,sp,#268
.  1880  0000036E4  0F8DF3060  ldr.w     r3,[pc,#96] -> 1980
.  1884  0000036E8  0F7FEF8F4  bl.w      Ext Proc #5
.  1888  0000036EC      0E000  b         0 -> 1892
.  1890  0000036EE      000A9  <LineNo: 169>
    PrintError(RuntimeErrors.ErrorRec[cid]);
.  1892  0000036F0      09800  ldr       r0,[sp]
.  1894  0000036F2      02801  cmp       r0,#1
.  1896  0000036F4      0D301  bcc.n     2 -> 1902
.  1898  0000036F6      0DF01  svc       1
.  1900  0000036F8      000AA  <LineNo: 170>
.  1902  0000036FA  0F8DF1040  ldr.w     r1,[pc,#64] -> 1968
.  1906  0000036FE      02218  movs      r2,#24
.  1908  000003700  0FB021000  mla.w     r0,r2,r0,r1
.  1912  000003704  0F8DF1038  ldr.w     r1,[pc,#56] -> 1972
.  1916  000003708  0F7FFFE82  bl.w      -764 -> 1156
.  1920  00000370C      0E000  b         0 -> 1924
.  1922  00000370E      000AA  <LineNo: 170>
    PrintStackedRegs(regs);
.  1924  000003710  0F51D7086  adds.w    r0,sp,#268
.  1928  000003714  0F8DF1030  ldr.w     r1,[pc,#48] -> 1980
.  1932  000003718  0F7FFFDCE  bl.w      -1124 -> 812
.  1936  00000371C      0E000  b         0 -> 1940
.  1938  00000371E      000AB  <LineNo: 171>
    PrintStacktrace(trace);
.  1940  000003720  0F11D0004  adds.w    r0,sp,#4
.  1944  000003724  0F8DF101C  ldr.w     r1,[pc,#28] -> 1976
.  1948  000003728  0F7FFFCD8  bl.w      -1616 -> 336
.  1952  00000372C      0E000  b         0 -> 1956
.  1954  00000372E      000AC  <LineNo: 172>
    REPEAT UNTIL FALSE
  END ErrorHandler;
.  1956  000003730      04280  cmp       r0,r0
.  1958  000003732  0F43FAFFD  beq.w     -6 -> 1956
.  1962  000003736      0B04C  add       sp,#304
.  1964  000003738  0E8BD8FF0  pop.w     { r4, r5, r6, r7, r8, r9, r10, r11, pc }
.  1968  00000373C  020027ED8  <Global: RuntimeErrors data>
.  1972  000003740      011F8  <Global: RuntimeErrors code>
.  1976  000003744      01518  <Global: Stacktrace code>
.  1980  000003748      0152C  <Global: Stacktrace code>


  (* plug a writer to use for error output *)

  PROCEDURE* SetWriter*(cid: INTEGER; Wr: TextIO.Writer);
  BEGIN
.  1984  00000374C      0B500  push      { lr }
    ASSERT(cid < NumCores, Errors.PreCond);
.  1986  00000374E      02801  cmp       r0,#1
.  1988  000003750      0DB01  blt.n     2 -> 1994
.  1990  000003752      0DF22  svc       34
.  1992  000003754      000B5  <LineNo: 181>
    W[cid] := Wr
.  1994  000003756  0F8DF200C  ldr.w     r2,[pc,#12] -> 2008
.  1998  00000375A      00083  lsls      r3,r0,#2
.  2000  00000375C  0EB030202  add.w     r2,r3,r2
  END SetWriter;
.  2004  000003760      06011  str       r1,[r2]
.  2006  000003762      0BD00  pop       { pc }
.  2008  000003764  020027EBC  <Global: RuntimeErrorsOut data>

END RuntimeErrorsOut.
.  2012  000003768      0B500  push      { lr }
.  2014  00000376A      0BD00  pop       { pc }
 