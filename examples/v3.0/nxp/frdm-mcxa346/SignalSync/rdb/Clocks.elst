. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  00000376C              <Pad: 0>
MODULE Clocks;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Clocks configuration and initialisation at start-up.
  --
  MCU: MCX-A346
  --
  Copyright (c) 2025 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT SYSTEM, MCU := MCU2, Errors; (*, TextIO, Texts, Main;*)

  CONST
    (* oscillators *)
    FRO_HF*       = 180 * 1000000;  (* FIRC: 45, 60, 90, 180 MHz, see InitFIRC *)
    FRO_12M*      =  12 * 1000000;  (* SIRC,  SIRC_CLK_PERIPH_EN = 1 (reset) *)
    FRO_1M*       =   1 * 1000000;  (* SIRC DIV 12, always on *)
    FRO_16K*      =         16384;  (* ROSC *)
    CLK_IN*       =   8 * 1000000;  (* SOSC *)
    CLK_PLL*      = 160 * 1000000;  (* see InitSPLL *)

    (* derived *)
    (* dividers SYSCON, actual div = (val + 1) *)
    SYSCON_FROHFDIV_val*  = 0;
    SYSCON_FROLFDIV_val*  = 0;
    SYSCON_PLL1CLKDIV_val = 0;

    FRO_HF_GATED* = FRO_HF;                                 (* FIRC, FIRC_FCLK_PERIPH_EN = 1 *)
    FRO_HF_DIV*   = FRO_HF DIV (SYSCON_FROHFDIV_val + 1);
    FRO_LF_DIV*   = FRO_12M DIV (SYSCON_FROLFDIV_val + 1);  (* SIRC, SIRC_CLK_PERIPH_EN = 1 (reset) *)

    (* SCG_RCCR *)
    SYS_CLK*      = FRO_HF;
    BUS_CLK*      = SYS_CLK DIV 2;  (* fixed divider *)
    SLOW_CLK*     = SYS_CLK DIV 6;  (* fixed divider *)


    (* SCG_FIRCCFG bits and values *)
    FREQ_SEL_1 = 3;
    FREQ_SEL_0 = 1;
      FREQ_SEL_val_45 = 1;
      FREQ_SEL_val_60 = 3;
      FREQ_SEL_val_90 = 5;
      FREQ_SEL_val_180 = 7;

    (* value aliases *)
    FIRC_45*  = FREQ_SEL_val_45;
    FIRC_60*  = FREQ_SEL_val_60;
    FIRC_90*  = FREQ_SEL_val_90;
    FIRC_180* = FREQ_SEL_val_180;

    (* SCG_FIRCCSR bits and values *)
    LK = 23;
    FIRC_FCLK_PERIPH_EN = 5;
    FIRC_SCLK_PERIPH_EN = 4;
    FIRCVLD = 24;
    FIRCERR = 26;
    FIRCEN = 0;

    (* SCG_SOSCCSR bits and values *)
      SOSCVLD = 24;
      SOSCEN = 0;

    (* SCG_SOSCCFG bits and values *)
      EREFS = 2;

    (* SCG_SPLLCSR bits and values *)
      SPLL_LOCK = 24;
      SPLLPWREN = 0;
      SPLLCLKEN = 1;

    (* SCG_SPLLCTRL bits and values *)
      SOURCE_1 = 26;
      SOURCE_0 = 25;
        SOURCE_val_SOSC = 0;
        SOURCE_val_FIRC45 = 1; (* set FIRC_SCLK_PERIPH_EN in SCG_FIRCCSR *)
        SOURCE_val_ROSC = 2;
        SOURCE_val_SIRC = 3; (* 12 MHz *)
      FRM = 22;
      BYPASSPOSTDIV = 20;   (* PDIV *)
      BYPASSPREDIV = 19;    (* NDIV *)
      BYPASSPOSTDIV2 = 16;
      SELP_1 = 14;
      SELP_0 = 10;
      SELI_1 = 9;
      SELI_0 = 4;
      SELR_1 = 3;
      SELR_0 = 0;

    (* SCG_SPLLNDIV bits and values (pre-divider) *)
      NDIV_1 = 7;
      NDIV_0 = 0;

    (* SCG_SPLLMDIV bits and values (feedback-divider = multiplier *)
      MDIV_1 = 15;
      MDIV_0 = 0;

    (* SCG_SPLLPDIV bits and values (post-divider *)
      PDIV_1 = 4;
      PDIV_0 = 0;

    (*  SCG_RCCR and SCG_CSR bits and values *)
    SCS_1 = 26;
    SCS_0 = 24;
      SCS_val_SOSC = 1;
      SCS_val_SIRC = 2;
      SCS_val_FIRC = 3;
      SCS_val_ROSC = 4;
      SCS_val_SPLL = 6;

    (* SCG_LDOCSR bits and values *)
      VOUT_OK = 31;
      LDOEN = 0;

    (* SPC_ACTIVE_CFG bits and values *)
    CORELDO_VDD_LV_1 = 3;
    CORELDO_VDD_LV_0 = 2;
      CORELDO_VDD_LV_val_OD = 3;

    (* FMU_FCTRL bits and values *)
    RWSC_1 = 3;
    RWSC_0 = 0;
      RWSC_val_200  = 4;
      RWSC_val_160  = 3;
      RWSC_val_120  = 2;
      RWSC_val_80   = 1;
      RWSC_val_40   = 0;

    (* all divider registers bits and values *)
    UNSTABLE = 31;


  PROCEDURE setDividers;
  BEGIN
.     4  000003770      0B500  push      { lr }
    SYSTEM.PUT(MCU.SYSCON_FROLFDIV, SYSCON_FROLFDIV_val);
.     6  000003772  0F8DF004C  ldr.w     r0,[pc,#76] -> 84
.    10  000003776      02100  movs      r1,#0
.    12  000003778      06001  str       r1,[r0]
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SYSCON_FROLFDIV, UNSTABLE);
.    14  00000377A  0F8DF0044  ldr.w     r0,[pc,#68] -> 84
.    18  00000377E      06801  ldr       r1,[r0]
.    20  000003780      00009  movs      r1,r1
.    22  000003782  0F53FAFFA  bmi.w     -12 -> 14
    SYSTEM.PUT(MCU.SYSCON_FROHFDIV, SYSCON_FROHFDIV_val);
.    26  000003786  0F8DF003C  ldr.w     r0,[pc,#60] -> 88
.    30  00000378A      02100  movs      r1,#0
.    32  00000378C      06001  str       r1,[r0]
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SYSCON_FROHFDIV, UNSTABLE);
.    34  00000378E  0F8DF0034  ldr.w     r0,[pc,#52] -> 88
.    38  000003792      06801  ldr       r1,[r0]
.    40  000003794      00009  movs      r1,r1
.    42  000003796  0F53FAFFA  bmi.w     -12 -> 34
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SYSCON_AHBCLKDIV, UNSTABLE);
.    46  00000379A  0F8DF002C  ldr.w     r0,[pc,#44] -> 92
.    50  00000379E      06801  ldr       r1,[r0]
.    52  0000037A0      00009  movs      r1,r1
.    54  0000037A2  0F53FAFFA  bmi.w     -12 -> 46
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SYSCON_BUSCLKDIV, UNSTABLE);
.    58  0000037A6  0F8DF0024  ldr.w     r0,[pc,#36] -> 96
.    62  0000037AA      06801  ldr       r1,[r0]
.    64  0000037AC      00009  movs      r1,r1
.    66  0000037AE  0F53FAFFA  bmi.w     -12 -> 58
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SYSCON_SLOWCLKDIV, UNSTABLE)
  END setDividers;
.    70  0000037B2  0F8DF001C  ldr.w     r0,[pc,#28] -> 100
.    74  0000037B6      06801  ldr       r1,[r0]
.    76  0000037B8      00009  movs      r1,r1
.    78  0000037BA  0F53FAFFA  bmi.w     -12 -> 70
.    82  0000037BE      0BD00  pop       { pc }
.    84  0000037C0  04009138C  <Const:  1074336652>
.    88  0000037C4  040091388  <Const:  1074336648>
.    92  0000037C8  040091380  <Const:  1074336640>
.    96  0000037CC  04009137C  <Const:  1074336636>
.   100  0000037D0  040091378  <Const:  1074336632>


  PROCEDURE setSysTickClock;
  (* set to 1 MHz *)
    CONST
      ClkSelReg = MCU.MRCC_CLKSEL + (MCU.CLK_SYSTICK * MCU.MRCC_CLK_Offset);
      ClkDivReg = ClkSelReg + 04H;
      ClkSel_1M = 1;
      CLKDIV_UNSTABLE = 31;
  BEGIN
.   104  0000037D4      0B500  push      { lr }
    SYSTEM.PUT(ClkSelReg, ClkSel_1M);
.   106  0000037D6  0F8DF001C  ldr.w     r0,[pc,#28] -> 136
.   110  0000037DA      02101  movs      r1,#1
.   112  0000037DC      06001  str       r1,[r0]
    SYSTEM.PUT(ClkDivReg, 0);
.   114  0000037DE  0F8DF0018  ldr.w     r0,[pc,#24] -> 140
.   118  0000037E2      02100  movs      r1,#0
.   120  0000037E4      06001  str       r1,[r0]
    REPEAT UNTIL ~SYSTEM.BIT(ClkDivReg, CLKDIV_UNSTABLE)
  END setSysTickClock;
.   122  0000037E6  0F8DF0010  ldr.w     r0,[pc,#16] -> 140
.   126  0000037EA      06801  ldr       r1,[r0]
.   128  0000037EC      00009  movs      r1,r1
.   130  0000037EE  0F53FAFFA  bmi.w     -12 -> 122
.   134  0000037F2      0BD00  pop       { pc }
.   136  0000037F4  0400911B8  <Const:  1074336184>
.   140  0000037F8  0400911BC  <Const:  1074336188>


  PROCEDURE setODvoltage;
    VAR val: INTEGER;
  BEGIN
.   144  0000037FC      0B500  push      { lr }
.   146  0000037FE      0B081  sub       sp,#4
    (* core *)
    SYSTEM.GET(MCU.SPC_ACTIVE_CFG, val);
.   148  000003800  0F8DF0088  ldr.w     r0,[pc,#136] -> 288
.   152  000003804      06801  ldr       r1,[r0]
.   154  000003806      09100  str       r1,[sp]
    BFI(val, CORELDO_VDD_LV_1, CORELDO_VDD_LV_0, CORELDO_VDD_LV_val_OD);
.   156  000003808      04668  mov       r0,sp
.   158  00000380A      02103  movs      r1,#3
.   160  00000380C      06802  ldr       r2,[r0]
.   162  00000380E  0F3610283  bfi       r2,r1,2,2
.   166  000003812      09200  str       r2,[sp]
    SYSTEM.PUT(MCU.SPC_ACTIVE_CFG, val);
.   168  000003814  0F8DF0074  ldr.w     r0,[pc,#116] -> 288
.   172  000003818      09900  ldr       r1,[sp]
.   174  00000381A      06001  str       r1,[r0]
    REPEAT UNTIL ~SYSTEM.BIT(MCU.SPC_SC, 0);
.   176  00000381C  0F8DF0070  ldr.w     r0,[pc,#112] -> 292
.   180  000003820      06801  ldr       r1,[r0]
.   182  000003822      007C9  lsls      r1,r1,#31
.   184  000003824  0F53FAFFA  bmi.w     -12 -> 176

    (* SRAM *)
    SYSTEM.GET(MCU.SPC_SRAMCTL, val);
.   188  000003828  0F8DF0068  ldr.w     r0,[pc,#104] -> 296
.   192  00000382C      06801  ldr       r1,[r0]
.   194  00000382E      09100  str       r1,[sp]
    BFI(val, 1, 0, 2);
.   196  000003830      04668  mov       r0,sp
.   198  000003832      02102  movs      r1,#2
.   200  000003834      06802  ldr       r2,[r0]
.   202  000003836  0F3610201  bfi       r2,r1,0,2
.   206  00000383A      09200  str       r2,[sp]
    SYSTEM.PUT(MCU.SPC_SRAMCTL, val);
.   208  00000383C  0F8DF0054  ldr.w     r0,[pc,#84] -> 296
.   212  000003840      09900  ldr       r1,[sp]
.   214  000003842      06001  str       r1,[r0]

    SYSTEM.GET(MCU.SPC_SRAMCTL, val);
.   216  000003844  0F8DF004C  ldr.w     r0,[pc,#76] -> 296
.   220  000003848      06801  ldr       r1,[r0]
.   222  00000384A      09100  str       r1,[sp]
    BFI(val, 30, 1);
.   224  00000384C      04668  mov       r0,sp
.   226  00000384E      02101  movs      r1,#1
.   228  000003850      06802  ldr       r2,[r0]
.   230  000003852  0F361729E  bfi       r2,r1,30,1
.   234  000003856      09200  str       r2,[sp]
    SYSTEM.PUT(MCU.SPC_SRAMCTL, val);
.   236  000003858  0F8DF0038  ldr.w     r0,[pc,#56] -> 296
.   240  00000385C      09900  ldr       r1,[sp]
.   242  00000385E      06001  str       r1,[r0]
    REPEAT
      SYSTEM.GET(MCU.SPC_SRAMCTL, val)
    UNTIL 31 IN BITS(val);
.   244  000003860  0F8DF0030  ldr.w     r0,[pc,#48] -> 296
.   248  000003864      06801  ldr       r1,[r0]
.   250  000003866      09100  str       r1,[sp]
.   252  000003868      09800  ldr       r0,[sp]
.   254  00000386A  0F0104F00  tst.w     r0,#080000000H
.   258  00000386E  0F43FAFF7  beq.w     -18 -> 244
    BFI(val, 30, 0);
.   262  000003872      04668  mov       r0,sp
.   264  000003874      02100  movs      r1,#0
.   266  000003876      06802  ldr       r2,[r0]
.   268  000003878  0F361729E  bfi       r2,r1,30,1
.   272  00000387C      09200  str       r2,[sp]
    SYSTEM.PUT(MCU.SPC_SRAMCTL, val)
  END setODvoltage;
.   274  00000387E  0F8DF0014  ldr.w     r0,[pc,#20] -> 296
.   278  000003882      09900  ldr       r1,[sp]
.   280  000003884      06001  str       r1,[r0]
.   282  000003886      0B001  add       sp,#4
.   284  000003888      0BD00  pop       { pc }
.   286  00000388A      0BF00  nop       
.   288  00000388C  040090100  <Const:  1074331904>
.   292  000003890  040090010  <Const:  1074331664>
.   296  000003894  040090040  <Const:  1074331712>


  PROCEDURE isFircFreq(freq: INTEGER): BOOLEAN;
    RETURN  (freq = FIRC_45) OR
.   300  000003898      0B501  push      { r0, lr }
.   302  00000389A      09800  ldr       r0,[sp]
.   304  00000389C      02801  cmp       r0,#1
            (freq = FIRC_60) OR
.   306  00000389E  0F000800D  beq.w     26 -> 336
.   310  0000038A2      09800  ldr       r0,[sp]
.   312  0000038A4      02803  cmp       r0,#3
            (freq = FIRC_90) OR
.   314  0000038A6  0F0008009  beq.w     18 -> 336
.   318  0000038AA      09800  ldr       r0,[sp]
.   320  0000038AC      02805  cmp       r0,#5
            (freq = FIRC_180)
.   322  0000038AE  0F0008005  beq.w     10 -> 336
.   326  0000038B2      09800  ldr       r0,[sp]
.   328  0000038B4      02807  cmp       r0,#7
  END isFircFreq;
.   330  0000038B6      0D001  beq.n     2 -> 336
.   332  0000038B8      02000  movs      r0,#0
.   334  0000038BA      0E000  b         0 -> 338
.   336  0000038BC      02001  movs      r0,#1
.   338  0000038BE      0B001  add       sp,#4
.   340  0000038C0      0BD00  pop       { pc }
.   342  0000038C2      0BF00  nop       


  PROCEDURE InitFIRC*(freq: INTEGER);
    VAR set, val: INTEGER;
  BEGIN
.   344  0000038C4      0B501  push      { r0, lr }
.   346  0000038C6      0B082  sub       sp,#8
    ASSERT(isFircFreq(freq), Errors.PreCond);
.   348  0000038C8      09802  ldr       r0,[sp,#8]
.   350  0000038CA  0F7FFFFE5  bl.w      -54 -> 300
.   354  0000038CE      0E000  b         0 -> 358
.   356  0000038D0      000C6  <LineNo: 198>
.   358  0000038D2  0F0100F01  tst.w     r0,#1
.   362  0000038D6      0D101  bne.n     2 -> 368
.   364  0000038D8      0DF22  svc       34
.   366  0000038DA      000C6  <LineNo: 198>

    (* overdrive voltage to core and SRAM *)
    setODvoltage;
.   368  0000038DC  0F7FFFF8E  bl.w      -228 -> 144
.   372  0000038E0      0E000  b         0 -> 376
.   374  0000038E2      000C9  <LineNo: 201>

    (* temporarily set system clock to SIRC *)
    set := LSL(SCS_val_SIRC, SCS_0);
.   376  0000038E4  0F04F7000  mov.w     r0,#02000000H
.   380  0000038E8      09000  str       r0,[sp]
    SYSTEM.PUT(MCU.SCG_RCCR, set);
.   382  0000038EA  0F8DF0114  ldr.w     r0,[pc,#276] -> 660
.   386  0000038EE      09900  ldr       r1,[sp]
.   388  0000038F0      06001  str       r1,[r0]
    REPEAT
      SYSTEM.GET(MCU.SCG_CSR, val)
    UNTIL val = set;
.   390  0000038F2  0F8DF0110  ldr.w     r0,[pc,#272] -> 664
.   394  0000038F6      06801  ldr       r1,[r0]
.   396  0000038F8      09101  str       r1,[sp,#4]
.   398  0000038FA      09801  ldr       r0,[sp,#4]
.   400  0000038FC      09900  ldr       r1,[sp]
.   402  0000038FE      04288  cmp       r0,r1
.   404  000003900  0F47FAFF7  bne.w     -18 -> 390

    (* init SCG_FIRCCSR *)
    SYSTEM.PUT(MCU.SCG_FIRCCSR, 0);
.   408  000003904  0F8DF0100  ldr.w     r0,[pc,#256] -> 668
.   412  000003908      02100  movs      r1,#0
.   414  00000390A      06001  str       r1,[r0]

    (* set FIRC frequency *)
    SYSTEM.GET(MCU.SCG_FIRCCFG, val);
.   416  00000390C  0F8DF00FC  ldr.w     r0,[pc,#252] -> 672
.   420  000003910      06801  ldr       r1,[r0]
.   422  000003912      09101  str       r1,[sp,#4]
    SYSTEM.PUT(MCU.SCG_FIRCCFG, LSL(freq, FREQ_SEL_0));
.   424  000003914      09802  ldr       r0,[sp,#8]
.   426  000003916      00040  lsls      r0,r0,#1
.   428  000003918  0F8DF10F0  ldr.w     r1,[pc,#240] -> 672
.   432  00000391C      06008  str       r0,[r1]

    (* config FIRC *)
    SYSTEM.GET(MCU.SCG_FIRCCSR, val);
.   434  00000391E  0F8DF00E8  ldr.w     r0,[pc,#232] -> 668
.   438  000003922      06801  ldr       r1,[r0]
.   440  000003924      09101  str       r1,[sp,#4]
    BFI(val, FIRC_SCLK_PERIPH_EN, 0);
.   442  000003926      04668  mov       r0,sp
.   444  000003928      02100  movs      r1,#0
.   446  00000392A      06842  ldr       r2,[r0,#4]
.   448  00000392C  0F3611204  bfi       r2,r1,4,1
.   452  000003930      09201  str       r2,[sp,#4]
    BFI(val, FIRC_FCLK_PERIPH_EN, 0);
.   454  000003932      04668  mov       r0,sp
.   456  000003934      02100  movs      r1,#0
.   458  000003936      06842  ldr       r2,[r0,#4]
.   460  000003938  0F3611245  bfi       r2,r1,5,1
.   464  00000393C      09201  str       r2,[sp,#4]
    BFI(val, FIRCEN, 1);
.   466  00000393E      04668  mov       r0,sp
.   468  000003940      02101  movs      r1,#1
.   470  000003942      06842  ldr       r2,[r0,#4]
.   472  000003944  0F3610200  bfi       r2,r1,0,1
.   476  000003948      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_FIRCCSR, val);
.   478  00000394A  0F8DF00BC  ldr.w     r0,[pc,#188] -> 668
.   482  00000394E      09901  ldr       r1,[sp,#4]
.   484  000003950      06001  str       r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.SCG_FIRCCSR, FIRCVLD);
.   486  000003952  0F8DF00B4  ldr.w     r0,[pc,#180] -> 668
.   490  000003956      06801  ldr       r1,[r0]
.   492  000003958      001C9  lsls      r1,r1,#7
.   494  00000395A  0F57FAFFA  bpl.w     -12 -> 486

    (* set flash memory wait cycles *)
    SYSTEM.GET(MCU.FMU_FCTRL, val);
.   498  00000395E  0F8DF00B0  ldr.w     r0,[pc,#176] -> 676
.   502  000003962      06801  ldr       r1,[r0]
.   504  000003964      09101  str       r1,[sp,#4]
    CASE freq OF
      FREQ_SEL_val_45: set := RWSC_val_80
.   506  000003966      0BF00  nop       
.   508  000003968      09802  ldr       r0,[sp,#8]
.   510  00000396A  0F1B00101  subs.w    r1,r0,#1
.   514  00000396E  0F1B10F06  cmp.w     r1,#6
.   518  000003972      0DD01  ble.n     2 -> 524
.   520  000003974      0DF04  svc       4
.   522  000003976      000E3  <LineNo: 227>
.   524  000003978  0F2400224  movw      r2,#36
.   528  00000397C      0447A  add       r2,pc
.   530  00000397E  0E8D2F011  tbh       [r2,r1,lsl 1]
    | FREQ_SEL_val_60: set := RWSC_val_80
.   534  000003982      02001  movs      r0,#1
.   536  000003984      09000  str       r0,[sp]
.   538  000003986  0F000B816  b.w       44 -> 586
    | FREQ_SEL_val_90: set := RWSC_val_120
.   542  00000398A      02001  movs      r0,#1
.   544  00000398C      09000  str       r0,[sp]
.   546  00000398E  0F000B812  b.w       36 -> 586
    | FREQ_SEL_val_180: set := RWSC_val_200
.   550  000003992      02002  movs      r0,#2
.   552  000003994      09000  str       r0,[sp]
.   554  000003996  0F000B80E  b.w       28 -> 586
    END;
.   558  00000399A      02004  movs      r0,#4
.   560  00000399C      09000  str       r0,[sp]
.   562  00000399E  0F000B80A  b.w       20 -> 586
.   566  0000039A2      0BF00  nop       
.   568  0000039A4      00000  <Case:   0>
.   570  0000039A6      00018  <Case:   24>
.   572  0000039A8      00004  <Case:   4>
.   574  0000039AA      00018  <Case:   24>
.   576  0000039AC      00008  <Case:   8>
.   578  0000039AE      00018  <Case:   24>
.   580  0000039B0      0000C  <Case:   12>
.   582  0000039B2      0DF04  svc       4
.   584  0000039B4      000E7  <LineNo: 231>
    BFI(val, RWSC_1, RWSC_0, set);
.   586  0000039B6      04668  mov       r0,sp
.   588  0000039B8      09900  ldr       r1,[sp]
.   590  0000039BA      06842  ldr       r2,[r0,#4]
.   592  0000039BC  0F3610203  bfi       r2,r1,0,4
.   596  0000039C0      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.FMU_FCTRL, val);
.   598  0000039C2  0F8DF004C  ldr.w     r0,[pc,#76] -> 676
.   602  0000039C6      09901  ldr       r1,[sp,#4]
.   604  0000039C8      06001  str       r1,[r0]

    (* set system clock to FIRC *)
    set := LSL(SCS_val_FIRC, SCS_0);
.   606  0000039CA  0F04F7040  mov.w     r0,#03000000H
.   610  0000039CE      09000  str       r0,[sp]
    SYSTEM.PUT(MCU.SCG_RCCR, set);
.   612  0000039D0  0F8DF002C  ldr.w     r0,[pc,#44] -> 660
.   616  0000039D4      09900  ldr       r1,[sp]
.   618  0000039D6      06001  str       r1,[r0]
    REPEAT
      SYSTEM.GET(MCU.SCG_CSR, val)
    UNTIL val = set;
.   620  0000039D8  0F8DF0028  ldr.w     r0,[pc,#40] -> 664
.   624  0000039DC      06801  ldr       r1,[r0]
.   626  0000039DE      09101  str       r1,[sp,#4]
.   628  0000039E0      09801  ldr       r0,[sp,#4]
.   630  0000039E2      09900  ldr       r1,[sp]
.   632  0000039E4      04288  cmp       r0,r1
.   634  0000039E6  0F47FAFF7  bne.w     -18 -> 620

    (* set clock dividers, await stable *)
    setDividers;
.   638  0000039EA  0F7FFFEC1  bl.w      -638 -> 4
.   642  0000039EE      0E000  b         0 -> 646
.   644  0000039F0      000F4  <LineNo: 244>

    setSysTickClock

  END InitFIRC;
.   646  0000039F2  0F7FFFEEF  bl.w      -546 -> 104
.   650  0000039F6      0E000  b         0 -> 654
.   652  0000039F8      000F6  <LineNo: 246>
.   654  0000039FA      0B003  add       sp,#12
.   656  0000039FC      0BD00  pop       { pc }
.   658  0000039FE      0BF00  nop       
.   660  000003A00  04008F014  <Const:  1074327572>
.   664  000003A04  04008F010  <Const:  1074327568>
.   668  000003A08  04008F300  <Const:  1074328320>
.   672  000003A0C  04008F308  <Const:  1074328328>
.   676  000003A10  040095008  <Const:  1074352136>



  PROCEDURE selp(mdiv: INTEGER): INTEGER;
    VAR a0, a: INTEGER;
  BEGIN
.   680  000003A14      0B501  push      { r0, lr }
.   682  000003A16      0B082  sub       sp,#8
    a0 := (mdiv DIV 4) + 1;
.   684  000003A18      09802  ldr       r0,[sp,#8]
.   686  000003A1A      01080  asrs      r0,r0,#2
.   688  000003A1C      03001  adds      r0,#1
.   690  000003A1E      09000  str       r0,[sp]
    IF a0 < 31 THEN
.   692  000003A20      09800  ldr       r0,[sp]
.   694  000003A22      0281F  cmp       r0,#31
.   696  000003A24  0F2808004  bge.w     8 -> 708
      a := a0
    ELSE
.   700  000003A28      09800  ldr       r0,[sp]
.   702  000003A2A      09001  str       r0,[sp,#4]
      a := 31
.   704  000003A2C  0F000B802  b.w       4 -> 712
    END
.   708  000003A30      0201F  movs      r0,#31
.   710  000003A32      09001  str       r0,[sp,#4]
    RETURN a
  END selp;
.   712  000003A34      09801  ldr       r0,[sp,#4]
.   714  000003A36      0B003  add       sp,#12
.   716  000003A38      0BD00  pop       { pc }
.   718  000003A3A      0BF00  nop       

  PROCEDURE seli(mdiv: INTEGER): INTEGER;
    VAR a0, a: INTEGER;
  BEGIN
.   720  000003A3C      0B501  push      { r0, lr }
.   722  000003A3E      0B082  sub       sp,#8
    ASSERT(mdiv < 122);
.   724  000003A40      09802  ldr       r0,[sp,#8]
.   726  000003A42      0287A  cmp       r0,#122
.   728  000003A44      0DB01  blt.n     2 -> 734
.   730  000003A46      0DF00  svc       0
.   732  000003A48      0010B  <LineNo: 267>
    a0 := 2 * (mdiv DIV 4) + 3;
.   734  000003A4A      09802  ldr       r0,[sp,#8]
.   736  000003A4C      01080  asrs      r0,r0,#2
.   738  000003A4E      00040  lsls      r0,r0,#1
.   740  000003A50      03003  adds      r0,#3
.   742  000003A52      09000  str       r0,[sp]
    IF a0 < 63 THEN
.   744  000003A54      09800  ldr       r0,[sp]
.   746  000003A56      0283F  cmp       r0,#63
.   748  000003A58  0F2808004  bge.w     8 -> 760
      a := a0
    ELSE
.   752  000003A5C      09800  ldr       r0,[sp]
.   754  000003A5E      09001  str       r0,[sp,#4]
      a := 63
.   756  000003A60  0F000B802  b.w       4 -> 764
    END
.   760  000003A64      0203F  movs      r0,#63
.   762  000003A66      09001  str       r0,[sp,#4]
    RETURN a
  END seli;
.   764  000003A68      09801  ldr       r0,[sp,#4]
.   766  000003A6A      0B003  add       sp,#12
.   768  000003A6C      0BD00  pop       { pc }
.   770  000003A6E      0BF00  nop       


  PROCEDURE InitSPLL*;
  (* source: use 8 MHz SOSC *)
    CONST
      NDIV = 1; PDIV = 1; MDIV = 20;
      BypassNDIV = 1; BypassPDIV = 1; BypassPDIV2 = 1;
      RWSC = RWSC_val_160;
    VAR set, val: INTEGER;
  BEGIN
.   772  000003A70      0B500  push      { lr }
.   774  000003A72      0B082  sub       sp,#8
    (* overdrive voltage to core and SRAM *)
    setODvoltage;
.   776  000003A74  0F7FFFEC2  bl.w      -636 -> 144
.   780  000003A78      0E000  b         0 -> 784
.   782  000003A7A      0011F  <LineNo: 287>

    (* LDO: enable *)
    SYSTEM.GET(MCU.SCG_LDOCSR, val);
.   784  000003A7C  0F8DF01D4  ldr.w     r0,[pc,#468] -> 1256
.   788  000003A80      06801  ldr       r1,[r0]
.   790  000003A82      09101  str       r1,[sp,#4]
    BFI(val, LDOEN, 1);
.   792  000003A84      04668  mov       r0,sp
.   794  000003A86      02101  movs      r1,#1
.   796  000003A88      06842  ldr       r2,[r0,#4]
.   798  000003A8A  0F3610200  bfi       r2,r1,0,1
.   802  000003A8E      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_LDOCSR, val);
.   804  000003A90  0F8DF01C0  ldr.w     r0,[pc,#448] -> 1256
.   808  000003A94      09901  ldr       r1,[sp,#4]
.   810  000003A96      06001  str       r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.SCG_LDOCSR, VOUT_OK);
.   812  000003A98  0F8DF01B8  ldr.w     r0,[pc,#440] -> 1256
.   816  000003A9C      06801  ldr       r1,[r0]
.   818  000003A9E      00009  movs      r1,r1
.   820  000003AA0  0F57FAFFA  bpl.w     -12 -> 812

    (* SOSC: select internal crystal oscillator *)
    SYSTEM.GET(MCU.SCG_SOSCCFG, val);
.   824  000003AA4  0F8DF01B0  ldr.w     r0,[pc,#432] -> 1260
.   828  000003AA8      06801  ldr       r1,[r0]
.   830  000003AAA      09101  str       r1,[sp,#4]
    BFI(val, EREFS, 1);
.   832  000003AAC      04668  mov       r0,sp
.   834  000003AAE      02101  movs      r1,#1
.   836  000003AB0      06842  ldr       r2,[r0,#4]
.   838  000003AB2  0F3610282  bfi       r2,r1,2,1
.   842  000003AB6      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SOSCCFG, val);
.   844  000003AB8  0F8DF019C  ldr.w     r0,[pc,#412] -> 1260
.   848  000003ABC      09901  ldr       r1,[sp,#4]
.   850  000003ABE      06001  str       r1,[r0]

    (* SOSC: enable  *)
    SYSTEM.GET(MCU.SCG_SOSCCSR, val);
.   852  000003AC0  0F8DF0198  ldr.w     r0,[pc,#408] -> 1264
.   856  000003AC4      06801  ldr       r1,[r0]
.   858  000003AC6      09101  str       r1,[sp,#4]
    BFI(val, SOSCEN, 1);
.   860  000003AC8      04668  mov       r0,sp
.   862  000003ACA      02101  movs      r1,#1
.   864  000003ACC      06842  ldr       r2,[r0,#4]
.   866  000003ACE  0F3610200  bfi       r2,r1,0,1
.   870  000003AD2      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SOSCCSR, val);
.   872  000003AD4  0F8DF0184  ldr.w     r0,[pc,#388] -> 1264
.   876  000003AD8      09901  ldr       r1,[sp,#4]
.   878  000003ADA      06001  str       r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.SCG_SOSCCSR, SOSCVLD);
.   880  000003ADC  0F8DF017C  ldr.w     r0,[pc,#380] -> 1264
.   884  000003AE0      06801  ldr       r1,[r0]
.   886  000003AE2      001C9  lsls      r1,r1,#7
.   888  000003AE4  0F57FAFFA  bpl.w     -12 -> 880

    (* SPLL: select source, divider bypasses *)
    SYSTEM.GET(MCU.SCG_SPLLCTRL, val);
.   892  000003AE8  0F8DF0174  ldr.w     r0,[pc,#372] -> 1268
.   896  000003AEC      06801  ldr       r1,[r0]
.   898  000003AEE      09101  str       r1,[sp,#4]
    BFI(val, SOURCE_1, SOURCE_0, SOURCE_val_SOSC);
.   900  000003AF0      04668  mov       r0,sp
.   902  000003AF2      02100  movs      r1,#0
.   904  000003AF4      06842  ldr       r2,[r0,#4]
.   906  000003AF6  0F361625A  bfi       r2,r1,25,2
.   910  000003AFA      09201  str       r2,[sp,#4]
    BFI(val, BYPASSPOSTDIV, BypassPDIV);
.   912  000003AFC      04668  mov       r0,sp
.   914  000003AFE      02101  movs      r1,#1
.   916  000003B00      06842  ldr       r2,[r0,#4]
.   918  000003B02  0F3615214  bfi       r2,r1,20,1
.   922  000003B06      09201  str       r2,[sp,#4]
    BFI(val, BYPASSPREDIV, BypassNDIV);
.   924  000003B08      04668  mov       r0,sp
.   926  000003B0A      02101  movs      r1,#1
.   928  000003B0C      06842  ldr       r2,[r0,#4]
.   930  000003B0E  0F36142D3  bfi       r2,r1,19,1
.   934  000003B12      09201  str       r2,[sp,#4]
    BFI(val, BYPASSPOSTDIV2, BypassPDIV2);
.   936  000003B14      04668  mov       r0,sp
.   938  000003B16      02101  movs      r1,#1
.   940  000003B18      06842  ldr       r2,[r0,#4]
.   942  000003B1A  0F3614210  bfi       r2,r1,16,1
.   946  000003B1E      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLCTRL, val);
.   948  000003B20  0F8DF013C  ldr.w     r0,[pc,#316] -> 1268
.   952  000003B24      09901  ldr       r1,[sp,#4]
.   954  000003B26      06001  str       r1,[r0]

    (* SPLL: set SELx *)
    SYSTEM.GET(MCU.SCG_SPLLCTRL, val);
.   956  000003B28  0F8DF0134  ldr.w     r0,[pc,#308] -> 1268
.   960  000003B2C      06801  ldr       r1,[r0]
.   962  000003B2E      09101  str       r1,[sp,#4]
    BFI(val, SELP_1, SELP_0, selp(MDIV));
.   964  000003B30      02014  movs      r0,#20
.   966  000003B32  0F7FFFF6F  bl.w      -290 -> 680
.   970  000003B36      0E000  b         0 -> 974
.   972  000003B38      0013C  <LineNo: 316>
.   974  000003B3A      04669  mov       r1,sp
.   976  000003B3C      0684A  ldr       r2,[r1,#4]
.   978  000003B3E  0F360228E  bfi       r2,r0,10,5
.   982  000003B42      09201  str       r2,[sp,#4]
    BFI(val, SELI_1, SELI_0, seli(MDIV));
.   984  000003B44      02014  movs      r0,#20
.   986  000003B46  0F7FFFF79  bl.w      -270 -> 720
.   990  000003B4A      0E000  b         0 -> 994
.   992  000003B4C      0013D  <LineNo: 317>
.   994  000003B4E      04669  mov       r1,sp
.   996  000003B50      0684A  ldr       r2,[r1,#4]
.   998  000003B52  0F3601209  bfi       r2,r0,4,6
.  1002  000003B56      09201  str       r2,[sp,#4]
    BFI(val, SELR_1, SELR_0, 0);
.  1004  000003B58      04668  mov       r0,sp
.  1006  000003B5A      02100  movs      r1,#0
.  1008  000003B5C      06842  ldr       r2,[r0,#4]
.  1010  000003B5E  0F3610203  bfi       r2,r1,0,4
.  1014  000003B62      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLCTRL, val);
.  1016  000003B64  0F8DF00F8  ldr.w     r0,[pc,#248] -> 1268
.  1020  000003B68      09901  ldr       r1,[sp,#4]
.  1022  000003B6A      06001  str       r1,[r0]

    (* SPLL: dividers *)
    val := 0;
.  1024  000003B6C      02000  movs      r0,#0
.  1026  000003B6E      09001  str       r0,[sp,#4]
    BFI(val, NDIV_1, NDIV_0, NDIV);
.  1028  000003B70      04668  mov       r0,sp
.  1030  000003B72      02101  movs      r1,#1
.  1032  000003B74      06842  ldr       r2,[r0,#4]
.  1034  000003B76  0F3610207  bfi       r2,r1,0,8
.  1038  000003B7A      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLNDIV, val);
.  1040  000003B7C  0F8DF00E4  ldr.w     r0,[pc,#228] -> 1272
.  1044  000003B80      09901  ldr       r1,[sp,#4]
.  1046  000003B82      06001  str       r1,[r0]
    val := 0;
.  1048  000003B84      02000  movs      r0,#0
.  1050  000003B86      09001  str       r0,[sp,#4]
    BFI(val, MDIV_1, MDIV_0, MDIV);
.  1052  000003B88      04668  mov       r0,sp
.  1054  000003B8A      02114  movs      r1,#20
.  1056  000003B8C      06842  ldr       r2,[r0,#4]
.  1058  000003B8E  0F361020F  bfi       r2,r1,0,16
.  1062  000003B92      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLMDIV, val);
.  1064  000003B94  0F8DF00D0  ldr.w     r0,[pc,#208] -> 1276
.  1068  000003B98      09901  ldr       r1,[sp,#4]
.  1070  000003B9A      06001  str       r1,[r0]
    val := 0;
.  1072  000003B9C      02000  movs      r0,#0
.  1074  000003B9E      09001  str       r0,[sp,#4]
    BFI(val, PDIV_1, PDIV_0, PDIV);
.  1076  000003BA0      04668  mov       r0,sp
.  1078  000003BA2      02101  movs      r1,#1
.  1080  000003BA4      06842  ldr       r2,[r0,#4]
.  1082  000003BA6  0F3610204  bfi       r2,r1,0,5
.  1086  000003BAA      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLPDIV, val);
.  1088  000003BAC  0F8DF00BC  ldr.w     r0,[pc,#188] -> 1280
.  1092  000003BB0      09901  ldr       r1,[sp,#4]
.  1094  000003BB2      06001  str       r1,[r0]

    (* SPLL: power up and enable *)
    SYSTEM.GET(MCU.SCG_SPLLCSR, val);
.  1096  000003BB4  0F8DF00B8  ldr.w     r0,[pc,#184] -> 1284
.  1100  000003BB8      06801  ldr       r1,[r0]
.  1102  000003BBA      09101  str       r1,[sp,#4]
    BFI(val, SPLLPWREN, 1);
.  1104  000003BBC      04668  mov       r0,sp
.  1106  000003BBE      02101  movs      r1,#1
.  1108  000003BC0      06842  ldr       r2,[r0,#4]
.  1110  000003BC2  0F3610200  bfi       r2,r1,0,1
.  1114  000003BC6      09201  str       r2,[sp,#4]
    BFI(val, SPLLCLKEN, 1);
.  1116  000003BC8      04668  mov       r0,sp
.  1118  000003BCA      02101  movs      r1,#1
.  1120  000003BCC      06842  ldr       r2,[r0,#4]
.  1122  000003BCE  0F3610241  bfi       r2,r1,1,1
.  1126  000003BD2      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_SPLLCSR, val);
.  1128  000003BD4  0F8DF0098  ldr.w     r0,[pc,#152] -> 1284
.  1132  000003BD8      09901  ldr       r1,[sp,#4]
.  1134  000003BDA      06001  str       r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.SCG_SPLLCSR, SPLL_LOCK);
.  1136  000003BDC  0F8DF0090  ldr.w     r0,[pc,#144] -> 1284
.  1140  000003BE0      06801  ldr       r1,[r0]
.  1142  000003BE2      001C9  lsls      r1,r1,#7
.  1144  000003BE4  0F57FAFFA  bpl.w     -12 -> 1136

    (* set flash memory wait cycles *)
    SYSTEM.GET(MCU.FMU_FCTRL, val);
.  1148  000003BE8  0F8DF0088  ldr.w     r0,[pc,#136] -> 1288
.  1152  000003BEC      06801  ldr       r1,[r0]
.  1154  000003BEE      09101  str       r1,[sp,#4]
    BFI(val, RWSC_1, RWSC_0, RWSC);
.  1156  000003BF0      04668  mov       r0,sp
.  1158  000003BF2      02103  movs      r1,#3
.  1160  000003BF4      06842  ldr       r2,[r0,#4]
.  1162  000003BF6  0F3610203  bfi       r2,r1,0,4
.  1166  000003BFA      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.FMU_FCTRL, val);
.  1168  000003BFC  0F8DF0074  ldr.w     r0,[pc,#116] -> 1288
.  1172  000003C00      09901  ldr       r1,[sp,#4]
.  1174  000003C02      06001  str       r1,[r0]

    (* switch system clock *)
    set := LSL(SCS_val_SPLL, SCS_0);
.  1176  000003C04  0F04F60C0  mov.w     r0,#06000000H
.  1180  000003C08      09000  str       r0,[sp]
    SYSTEM.PUT(MCU.SCG_RCCR, set);
.  1182  000003C0A  0F8DF006C  ldr.w     r0,[pc,#108] -> 1292
.  1186  000003C0E      09900  ldr       r1,[sp]
.  1188  000003C10      06001  str       r1,[r0]
    REPEAT
      SYSTEM.GET(MCU.SCG_CSR, val)
    UNTIL val = set;
.  1190  000003C12  0F8DF0068  ldr.w     r0,[pc,#104] -> 1296
.  1194  000003C16      06801  ldr       r1,[r0]
.  1196  000003C18      09101  str       r1,[sp,#4]
.  1198  000003C1A      09801  ldr       r0,[sp,#4]
.  1200  000003C1C      09900  ldr       r1,[sp]
.  1202  000003C1E      04288  cmp       r0,r1
.  1204  000003C20  0F47FAFF7  bne.w     -18 -> 1190

    (* disable FIRC *)
    SYSTEM.GET(MCU.SCG_FIRCCSR, val);
.  1208  000003C24  0F8DF0058  ldr.w     r0,[pc,#88] -> 1300
.  1212  000003C28      06801  ldr       r1,[r0]
.  1214  000003C2A      09101  str       r1,[sp,#4]
    BFI(val, FIRCEN, 0);
.  1216  000003C2C      04668  mov       r0,sp
.  1218  000003C2E      02100  movs      r1,#0
.  1220  000003C30      06842  ldr       r2,[r0,#4]
.  1222  000003C32  0F3610200  bfi       r2,r1,0,1
.  1226  000003C36      09201  str       r2,[sp,#4]
    SYSTEM.PUT(MCU.SCG_FIRCCSR, val);
.  1228  000003C38  0F8DF0044  ldr.w     r0,[pc,#68] -> 1300
.  1232  000003C3C      09901  ldr       r1,[sp,#4]
.  1234  000003C3E      06001  str       r1,[r0]

    (* set clock dividers, await stable *)
    setDividers;
.  1236  000003C40  0F7FFFD96  bl.w      -1236 -> 4
.  1240  000003C44      0E000  b         0 -> 1244
.  1242  000003C46      00165  <LineNo: 357>

    setSysTickClock

  END InitSPLL;
.  1244  000003C48  0F7FFFDC4  bl.w      -1144 -> 104
.  1248  000003C4C      0E000  b         0 -> 1252
.  1250  000003C4E      00167  <LineNo: 359>
.  1252  000003C50      0B002  add       sp,#8
.  1254  000003C52      0BD00  pop       { pc }
.  1256  000003C54  04008F800  <Const:  1074329600>
.  1260  000003C58  04008F108  <Const:  1074327816>
.  1264  000003C5C  04008F100  <Const:  1074327808>
.  1268  000003C60  04008F604  <Const:  1074329092>
.  1272  000003C64  04008F60C  <Const:  1074329100>
.  1276  000003C68  04008F610  <Const:  1074329104>
.  1280  000003C6C  04008F614  <Const:  1074329108>
.  1284  000003C70  04008F600  <Const:  1074329088>
.  1288  000003C74  040095008  <Const:  1074352136>
.  1292  000003C78  04008F014  <Const:  1074327572>
.  1296  000003C7C  04008F010  <Const:  1074327568>
.  1300  000003C80  04008F300  <Const:  1074328320>

END Clocks.
.  1304  000003C84      0B500  push      { lr }
.  1306  000003C86      0BD00  pop       { pc }
 