. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  000003F08              <Pad: 0>
MODULE Terminals;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Max two text terminals via TextIO.Device, eg. UART
  --
  Use module Texts to write/read to/from any open terminal
  See module Out for a use case
  Each terminal can only be opened once.
  --
  MCU: MCX-A346
  --
  Copyright (c) 2020-2025 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT TextIO, UARTdev, Errors;

  CONST
    TERM0* = 0;
    TERM1* = 1;
    NumTerms = 2;

  TYPE
    Ws* = ARRAY NumTerms OF TextIO.Writer;
    Rs* = ARRAY NumTerms OF TextIO.Reader;

  VAR
    W*, Werr*: Ws;
    R*: Rs;


  PROCEDURE InitUART*(uartNo: INTEGER; uartCfg: UARTdev.DeviceCfg; baudrate: INTEGER; VAR dev: UARTdev.Device);
  (* utility procedure *)
  BEGIN
.     4  000003F0C      0B51F  push      { r0, r1, r2, r3, r4, lr }
    NEW(dev); ASSERT(dev # NIL, Errors.HeapOverflow);
.     6  000003F0E      09804  ldr       r0,[sp,#16]
.     8  000003F10  0F8DF1044  ldr.w     r1,[pc,#68] -> 80
.    12  000003F14  0F7FCFCE6  bl.w      Ext Proc #1
.    16  000003F18      0E000  b         0 -> 20
.    18  000003F1A      00025  <LineNo: 37>
.    20  000003F1C      09804  ldr       r0,[sp,#16]
.    22  000003F1E      06800  ldr       r0,[r0]
.    24  000003F20      02800  cmp       r0,#0
.    26  000003F22      0D101  bne.n     2 -> 32
.    28  000003F24      0DF29  svc       41
.    30  000003F26      00025  <LineNo: 37>
    UARTdev.Init(dev, uartNo);
.    32  000003F28      09804  ldr       r0,[sp,#16]
.    34  000003F2A      06800  ldr       r0,[r0]
.    36  000003F2C      09900  ldr       r1,[sp]
.    38  000003F2E  0F7FFFEE7  bl.w      Ext Proc #3
.    42  000003F32      0E000  b         0 -> 46
.    44  000003F34      00026  <LineNo: 38>
    UARTdev.Configure(dev, uartCfg, baudrate);
.    46  000003F36      09804  ldr       r0,[sp,#16]
.    48  000003F38      06800  ldr       r0,[r0]
.    50  000003F3A      09901  ldr       r1,[sp,#4]
.    52  000003F3C      09A02  ldr       r2,[sp,#8]
.    54  000003F3E      09B03  ldr       r3,[sp,#12]
.    56  000003F40  0F7FFFF2A  bl.w      Ext Proc #4
.    60  000003F44      0E000  b         0 -> 64
.    62  000003F46      00027  <LineNo: 39>
    UARTdev.Enable(dev)
.    64  000003F48      09804  ldr       r0,[sp,#16]
.    66  000003F4A      06800  ldr       r0,[r0]
  END InitUART;
.    68  000003F4C  0F7FFFFC8  bl.w      Ext Proc #6
.    72  000003F50      0E000  b         0 -> 76
.    74  000003F52      00028  <LineNo: 40>
.    76  000003F54      0B005  add       sp,#20
.    78  000003F56      0BD00  pop       { pc }
.    80  000003F58      03CD8  <Global: UARTdev code>


  PROCEDURE Open*(termNo: INTEGER; dev: TextIO.Device; psp: TextIO.PutStringProc; gsp: TextIO.GetStringProc);
  BEGIN
.    84  000003F5C      0B50F  push      { r0, r1, r2, r3, lr }
    ASSERT(termNo IN {TERM0, TERM1}, Errors.PreCond);
.    86  000003F5E      02003  movs      r0,#3
.    88  000003F60      09900  ldr       r1,[sp]
.    90  000003F62      02201  movs      r2,#1
.    92  000003F64      0408A  lsls      r2,r1
.    94  000003F66  0EA100F02  tst.w     r0,r2
.    98  000003F6A      0D101  bne.n     2 -> 104
.   100  000003F6C      0DF22  svc       34
.   102  000003F6E      0002E  <LineNo: 46>
    ASSERT(dev # NIL, Errors.PreCond);
.   104  000003F70      09801  ldr       r0,[sp,#4]
.   106  000003F72      02800  cmp       r0,#0
.   108  000003F74      0D101  bne.n     2 -> 114
.   110  000003F76      0DF22  svc       34
.   112  000003F78      0002F  <LineNo: 47>
    IF W[termNo] = NIL THEN
.   114  000003F7A      09800  ldr       r0,[sp]
.   116  000003F7C      02802  cmp       r0,#2
.   118  000003F7E      0D301  bcc.n     2 -> 124
.   120  000003F80      0DF01  svc       1
.   122  000003F82      00030  <LineNo: 48>
.   124  000003F84  0F8DF10DC  ldr.w     r1,[pc,#220] -> 348
.   128  000003F88      00082  lsls      r2,r0,#2
.   130  000003F8A  0EB020001  add.w     r0,r2,r1
.   134  000003F8E      06800  ldr       r0,[r0]
.   136  000003F90      02800  cmp       r0,#0
.   138  000003F92  0F0408060  bne.w     192 -> 334
      NEW(W[termNo]); ASSERT(W[termNo] # NIL, Errors.HeapOverflow);
.   142  000003F96      09800  ldr       r0,[sp]
.   144  000003F98      02802  cmp       r0,#2
.   146  000003F9A      0D301  bcc.n     2 -> 152
.   148  000003F9C      0DF01  svc       1
.   150  000003F9E      00031  <LineNo: 49>
.   152  000003FA0  0F8DF10C0  ldr.w     r1,[pc,#192] -> 348
.   156  000003FA4      00082  lsls      r2,r0,#2
.   158  000003FA6  0EB020001  add.w     r0,r2,r1
.   162  000003FAA  0F8DF10B0  ldr.w     r1,[pc,#176] -> 340
.   166  000003FAE  0F7FCFC99  bl.w      Ext Proc #1
.   170  000003FB2      0E000  b         0 -> 174
.   172  000003FB4      00031  <LineNo: 49>
.   174  000003FB6      09800  ldr       r0,[sp]
.   176  000003FB8      02802  cmp       r0,#2
.   178  000003FBA      0D301  bcc.n     2 -> 184
.   180  000003FBC      0DF01  svc       1
.   182  000003FBE      00031  <LineNo: 49>
.   184  000003FC0  0F8DF10A0  ldr.w     r1,[pc,#160] -> 348
.   188  000003FC4      00082  lsls      r2,r0,#2
.   190  000003FC6  0EB020001  add.w     r0,r2,r1
.   194  000003FCA      06800  ldr       r0,[r0]
.   196  000003FCC      02800  cmp       r0,#0
.   198  000003FCE      0D101  bne.n     2 -> 204
.   200  000003FD0      0DF29  svc       41
.   202  000003FD2      00031  <LineNo: 49>
      NEW(R[termNo]); ASSERT(R[termNo] # NIL, Errors.HeapOverflow);
.   204  000003FD4      09800  ldr       r0,[sp]
.   206  000003FD6      02802  cmp       r0,#2
.   208  000003FD8      0D301  bcc.n     2 -> 214
.   210  000003FDA      0DF01  svc       1
.   212  000003FDC      00032  <LineNo: 50>
.   214  000003FDE  0F8DF1088  ldr.w     r1,[pc,#136] -> 352
.   218  000003FE2      00082  lsls      r2,r0,#2
.   220  000003FE4  0EB020001  add.w     r0,r2,r1
.   224  000003FE8  0F8DF1074  ldr.w     r1,[pc,#116] -> 344
.   228  000003FEC  0F7FCFC7A  bl.w      Ext Proc #1
.   232  000003FF0      0E000  b         0 -> 236
.   234  000003FF2      00032  <LineNo: 50>
.   236  000003FF4      09800  ldr       r0,[sp]
.   238  000003FF6      02802  cmp       r0,#2
.   240  000003FF8      0D301  bcc.n     2 -> 246
.   242  000003FFA      0DF01  svc       1
.   244  000003FFC      00032  <LineNo: 50>
.   246  000003FFE  0F8DF1068  ldr.w     r1,[pc,#104] -> 352
.   250  000004002      00082  lsls      r2,r0,#2
.   252  000004004  0EB020001  add.w     r0,r2,r1
.   256  000004008      06800  ldr       r0,[r0]
.   258  00000400A      02800  cmp       r0,#0
.   260  00000400C      0D101  bne.n     2 -> 266
.   262  00000400E      0DF29  svc       41
.   264  000004010      00032  <LineNo: 50>
      TextIO.OpenWriter(W[termNo], dev, psp);
.   266  000004012      09800  ldr       r0,[sp]
.   268  000004014      02802  cmp       r0,#2
.   270  000004016      0D301  bcc.n     2 -> 276
.   272  000004018      0DF01  svc       1
.   274  00000401A      00033  <LineNo: 51>
.   276  00000401C  0F8DF1044  ldr.w     r1,[pc,#68] -> 348
.   280  000004020      00082  lsls      r2,r0,#2
.   282  000004022  0EB020001  add.w     r0,r2,r1
.   286  000004026      06800  ldr       r0,[r0]
.   288  000004028      09901  ldr       r1,[sp,#4]
.   290  00000402A      09A02  ldr       r2,[sp,#8]
.   292  00000402C  0F7FEF99E  bl.w      Ext Proc #4
.   296  000004030      0E000  b         0 -> 300
.   298  000004032      00033  <LineNo: 51>
      TextIO.OpenReader(R[termNo], dev, gsp)
.   300  000004034      09800  ldr       r0,[sp]
.   302  000004036      02802  cmp       r0,#2
.   304  000004038      0D301  bcc.n     2 -> 310
.   306  00000403A      0DF01  svc       1
.   308  00000403C      00034  <LineNo: 52>
.   310  00000403E  0F8DF1028  ldr.w     r1,[pc,#40] -> 352
.   314  000004042      00082  lsls      r2,r0,#2
.   316  000004044  0EB020001  add.w     r0,r2,r1
.   320  000004048      06800  ldr       r0,[r0]
.   322  00000404A      09901  ldr       r1,[sp,#4]
.   324  00000404C      09A03  ldr       r2,[sp,#12]
    END
.   326  00000404E  0F7FEF9A7  bl.w      Ext Proc #6
.   330  000004052      0E000  b         0 -> 334
.   332  000004054      00034  <LineNo: 52>
  END Open;
.   334  000004056      0B004  add       sp,#16
.   336  000004058      0BD00  pop       { pc }
.   338  00000405A      0BF00  nop       
.   340  00000405C      02344  <Global: TextIO code>
.   344  000004060      02358  <Global: TextIO code>
.   348  000004064  020027EB4  <Global: Terminals data>
.   352  000004068  020027EA4  <Global: Terminals data>


  PROCEDURE Close*(termNo: INTEGER; VAR dev: TextIO.Device);
  BEGIN
.   356  00000406C      0B503  push      { r0, r1, lr }
    dev := W[termNo].dev;
.   358  00000406E      09800  ldr       r0,[sp]
.   360  000004070      02802  cmp       r0,#2
.   362  000004072      0D301  bcc.n     2 -> 368
.   364  000004074      0DF01  svc       1
.   366  000004076      0003B  <LineNo: 59>
.   368  000004078  0F8DF102C  ldr.w     r1,[pc,#44] -> 416
.   372  00000407C      00082  lsls      r2,r0,#2
.   374  00000407E  0EB020001  add.w     r0,r2,r1
.   378  000004082      06800  ldr       r0,[r0]
.   380  000004084      06800  ldr       r0,[r0]
.   382  000004086      09901  ldr       r1,[sp,#4]
.   384  000004088      06008  str       r0,[r1]
    W[termNo] := NIL
.   386  00000408A      09800  ldr       r0,[sp]
.   388  00000408C      02802  cmp       r0,#2
.   390  00000408E      0D301  bcc.n     2 -> 396
.   392  000004090      0DF01  svc       1
.   394  000004092      0003C  <LineNo: 60>
.   396  000004094  0F8DF1010  ldr.w     r1,[pc,#16] -> 416
.   400  000004098      00082  lsls      r2,r0,#2
.   402  00000409A  0EB020001  add.w     r0,r2,r1
  END Close;
.   406  00000409E      02100  movs      r1,#0
.   408  0000040A0      06001  str       r1,[r0]
.   410  0000040A2      0B002  add       sp,#8
.   412  0000040A4      0BD00  pop       { pc }
.   414  0000040A6      0BF00  nop       
.   416  0000040A8  020027EB4  <Global: Terminals data>


  PROCEDURE OpenErr*(termNo: INTEGER; psp: TextIO.PutStringProc);
  (**
    Add an error output terminal, eg. using a simple busy-wait output.
    Not much worries about thread mis-timing in case of an error, better get that
    error message out intact. :)
    See module Main for an example.
  **)
  BEGIN
.   420  0000040AC      0B503  push      { r0, r1, lr }
    ASSERT(termNo IN {TERM0, TERM1}, Errors.PreCond);
.   422  0000040AE      02003  movs      r0,#3
.   424  0000040B0      09900  ldr       r1,[sp]
.   426  0000040B2      02201  movs      r2,#1
.   428  0000040B4      0408A  lsls      r2,r1
.   430  0000040B6  0EA100F02  tst.w     r0,r2
.   434  0000040BA      0D101  bne.n     2 -> 440
.   436  0000040BC      0DF22  svc       34
.   438  0000040BE      00048  <LineNo: 72>
    ASSERT(W[termNo] # NIL, Errors.ProgError); (* main terminal must be open *)
.   440  0000040C0      09800  ldr       r0,[sp]
.   442  0000040C2      02802  cmp       r0,#2
.   444  0000040C4      0D301  bcc.n     2 -> 450
.   446  0000040C6      0DF01  svc       1
.   448  0000040C8      00049  <LineNo: 73>
.   450  0000040CA  0F8DF10AC  ldr.w     r1,[pc,#172] -> 624
.   454  0000040CE      00082  lsls      r2,r0,#2
.   456  0000040D0  0EB020001  add.w     r0,r2,r1
.   460  0000040D4      06800  ldr       r0,[r0]
.   462  0000040D6      02800  cmp       r0,#0
.   464  0000040D8      0D101  bne.n     2 -> 470
.   466  0000040DA      0DF25  svc       37
.   468  0000040DC      00049  <LineNo: 73>
    IF Werr[termNo] = NIL THEN
.   470  0000040DE      09800  ldr       r0,[sp]
.   472  0000040E0      02802  cmp       r0,#2
.   474  0000040E2      0D301  bcc.n     2 -> 480
.   476  0000040E4      0DF01  svc       1
.   478  0000040E6      0004A  <LineNo: 74>
.   480  0000040E8  0F8DF1090  ldr.w     r1,[pc,#144] -> 628
.   484  0000040EC      00082  lsls      r2,r0,#2
.   486  0000040EE  0EB020001  add.w     r0,r2,r1
.   490  0000040F2      06800  ldr       r0,[r0]
.   492  0000040F4      02800  cmp       r0,#0
.   494  0000040F6  0F040803B  bne.w     118 -> 616
      NEW(Werr[termNo]); ASSERT(Werr[termNo] # NIL, Errors.HeapOverflow);
.   498  0000040FA      09800  ldr       r0,[sp]
.   500  0000040FC      02802  cmp       r0,#2
.   502  0000040FE      0D301  bcc.n     2 -> 508
.   504  000004100      0DF01  svc       1
.   506  000004102      0004B  <LineNo: 75>
.   508  000004104  0F8DF1074  ldr.w     r1,[pc,#116] -> 628
.   512  000004108      00082  lsls      r2,r0,#2
.   514  00000410A  0EB020001  add.w     r0,r2,r1
.   518  00000410E  0F8DF1064  ldr.w     r1,[pc,#100] -> 620
.   522  000004112  0F7FCFBE7  bl.w      Ext Proc #1
.   526  000004116      0E000  b         0 -> 530
.   528  000004118      0004B  <LineNo: 75>
.   530  00000411A      09800  ldr       r0,[sp]
.   532  00000411C      02802  cmp       r0,#2
.   534  00000411E      0D301  bcc.n     2 -> 540
.   536  000004120      0DF01  svc       1
.   538  000004122      0004B  <LineNo: 75>
.   540  000004124  0F8DF1054  ldr.w     r1,[pc,#84] -> 628
.   544  000004128      00082  lsls      r2,r0,#2
.   546  00000412A  0EB020001  add.w     r0,r2,r1
.   550  00000412E      06800  ldr       r0,[r0]
.   552  000004130      02800  cmp       r0,#0
.   554  000004132      0D101  bne.n     2 -> 560
.   556  000004134      0DF29  svc       41
.   558  000004136      0004B  <LineNo: 75>
      TextIO.OpenWriter(Werr[termNo], W[termNo].dev, psp);
.   560  000004138      09800  ldr       r0,[sp]
.   562  00000413A      02802  cmp       r0,#2
.   564  00000413C      0D301  bcc.n     2 -> 570
.   566  00000413E      0DF01  svc       1
.   568  000004140      0004C  <LineNo: 76>
.   570  000004142  0F8DF1038  ldr.w     r1,[pc,#56] -> 628
.   574  000004146      00082  lsls      r2,r0,#2
.   576  000004148  0EB020001  add.w     r0,r2,r1
.   580  00000414C      06800  ldr       r0,[r0]
.   582  00000414E      09900  ldr       r1,[sp]
.   584  000004150      02902  cmp       r1,#2
.   586  000004152      0D301  bcc.n     2 -> 592
.   588  000004154      0DF01  svc       1
.   590  000004156      0004C  <LineNo: 76>
.   592  000004158  0F8DF201C  ldr.w     r2,[pc,#28] -> 624
.   596  00000415C      0008B  lsls      r3,r1,#2
.   598  00000415E  0EB030102  add.w     r1,r3,r2
.   602  000004162      06809  ldr       r1,[r1]
.   604  000004164      06809  ldr       r1,[r1]
.   606  000004166      09A01  ldr       r2,[sp,#4]
.   608  000004168  0F7FEF900  bl.w      Ext Proc #4
.   612  00000416C      0E000  b         0 -> 616
.   614  00000416E      0004C  <LineNo: 76>
    END
  END OpenErr;
.   616  000004170      0B002  add       sp,#8
.   618  000004172      0BD00  pop       { pc }
.   620  000004174      02344  <Global: TextIO code>
.   624  000004178  020027EB4  <Global: Terminals data>
.   628  00000417C  020027EAC  <Global: Terminals data>


BEGIN
.   632  000004180      0B500  push      { lr }
  W[0] := NIL; W[1] := NIL;
.   634  000004182  0F8DF0030  ldr.w     r0,[pc,#48] -> 684
.   638  000004186      02100  movs      r1,#0
.   640  000004188      06001  str       r1,[r0]
.   642  00000418A  0F8DF0028  ldr.w     r0,[pc,#40] -> 684
.   646  00000418E      02100  movs      r1,#0
.   648  000004190      06041  str       r1,[r0,#4]
  R[0] := NIL; R[1] := NIL;
.   650  000004192  0F8DF0024  ldr.w     r0,[pc,#36] -> 688
.   654  000004196      02100  movs      r1,#0
.   656  000004198      06001  str       r1,[r0]
.   658  00000419A  0F8DF001C  ldr.w     r0,[pc,#28] -> 688
.   662  00000419E      02100  movs      r1,#0
.   664  0000041A0      06041  str       r1,[r0,#4]
  Werr[0] := NIL; Werr[1] := NIL
.   666  0000041A2  0F8DF0018  ldr.w     r0,[pc,#24] -> 692
.   670  0000041A6      02100  movs      r1,#0
.   672  0000041A8      06001  str       r1,[r0]
.   674  0000041AA  0F8DF0010  ldr.w     r0,[pc,#16] -> 692
END Terminals.
.   678  0000041AE      02100  movs      r1,#0
.   680  0000041B0      06041  str       r1,[r0,#4]
.   682  0000041B2      0BD00  pop       { pc }
.   684  0000041B4  020027EB4  <Global: Terminals data>
.   688  0000041B8  020027EA4  <Global: Terminals data>
.   692  0000041BC  020027EAC  <Global: Terminals data>
 