. <tool: Astrobe for RP2350>
. <prog: C:\Users\gray\Projects\oberon\dev\oberon-rtk\examples\v3.0\nxp\frdm-mcxa346\SignalSync\SignalSync.mod>

.     0  000001CAC              <Pad: 0>
MODULE Errors;
(**
  Oberon RTK Framework
  Version: v3.0
  --
  Definition of fault and error codes and corresponding message strings.
  --
  Copyright (c) 2019-2025 Gray, gray@grayraven.org
**)

  IMPORT Error, MCU := MCU2;

  CONST
    MaxMsgLength = 64;
    OK* = 0;
    NoError* = 0;
    NotOK* = 1;
    MaxErrNo* = 63;

    (* MCU fault codes *)
    (* all *)
    NMI*          = MCU.EXC_NMI;
    HardFault*    = MCU.EXC_HardFault;
    (* M33 only *)
    MemMgmtFault* = MCU.EXC_MemMgmtFault;
    BusFault*     = MCU.EXC_BusFault;
    UsageFault*   = MCU.EXC_UsageFault;
    SecureFault*  = MCU.EXC_SecureFault;
    DebugMon*     = MCU.EXC_DebugMon;

    (* error types *)
    ErrTypeErrorHandler* = 0;
    ErrTypeErrorThread* = 1;
    ErrTypeFaultHandler* = 2;
    ErrTypeFaultThread* = 3;

    (* Astrobe error codes, see Error.mod *)
    FirstAstrobeCode = 1;
    AstrobeUnused = {13..19};
    LastAstrobeCode  = 25;

    (* RTK error/assert codes *)
    FirstRTKcode = 32;
    Trace* = 33;
    PreCond* = 34;
    PostCond* = 35;
    ConsCheck* = 36;
    ProgError* = 37;
    BufferOverflow* = 38;
    BufferEmpty* = 39;
    Timing* = 40;
    HeapOverflow* = 41;
    StackOverflow* = 42;
    StorageOverflow* = 43;
    StorageError* = 44;
    UsageError* = 45;
    DeviceError* = 46;
    BadResourceData* = 47;
    NotSupported* = 48;
    NotImplemented* = 49;
    NumThreads* = 50;
    LastRTKcode = 50;

    Config* = ProgError; (* legacy *)

  TYPE
    String* = ARRAY MaxMsgLength OF CHAR;


  PROCEDURE* faultMessage(code: INTEGER; VAR msg: String);
  BEGIN
.     4  000001CB0      0B500  push      { lr }
    IF code = NMI THEN
.     6  000001CB2      02802  cmp       r0,#2
.     8  000001CB4  0F040800A  bne.w     20 -> 32
      msg := "NMI"
    ELSIF code = HardFault THEN
.    12  000001CB8      0460A  mov       r2,r1
.    14  000001CBA      0BF00  nop       
.    16  000001CBC      0A300  adr       r3,pc,#0 -> 20
.    18  000001CBE      0E001  b         2 -> 24
.    20  000001CC0  000494D4E  <String: "NMI.">
.    24  000001CC4      0681C  ldr       r4,[r3]
.    26  000001CC6      06014  str       r4,[r2]
.    28  000001CC8  0F000B89D  b.w       314 -> 346
.    32  000001CCC      02803  cmp       r0,#3
.    34  000001CCE  0F0408012  bne.w     36 -> 74
      msg := "HardFault"
    ELSIF code = MemMgmtFault THEN
.    38  000001CD2      0460A  mov       r2,r1
.    40  000001CD4      0A300  adr       r3,pc,#0 -> 44
.    42  000001CD6      0E005  b         10 -> 56
.    44  000001CD8  064726148  <String: "Hard">
.    48  000001CDC  06C756146  <String: "Faul">
.    52  000001CE0  000000074  <String: "t...">
.    56  000001CE4  0F8534B04  ldr.w     r4,[r3],#4
.    60  000001CE8  0F8424B04  str.w     r4,[r2],#4
.    64  000001CEC  0F014447F  ands.w    r4,r4,#0FF000000H
.    68  000001CF0      0D1F8  bne.n     -16 -> 56
.    70  000001CF2  0F000B888  b.w       272 -> 346
.    74  000001CF6      02804  cmp       r0,#4
.    76  000001CF8  0F0408015  bne.w     42 -> 122
      msg := "MemManageFault"
    ELSIF code = BusFault THEN
.    80  000001CFC      0460A  mov       r2,r1
.    82  000001CFE      0BF00  nop       
.    84  000001D00      0A300  adr       r3,pc,#0 -> 88
.    86  000001D02      0E007  b         14 -> 104
.    88  000001D04  04D6D654D  <String: "MemM">
.    92  000001D08  067616E61  <String: "anag">
.    96  000001D0C  075614665  <String: "eFau">
.   100  000001D10  00000746C  <String: "lt..">
.   104  000001D14  0F8534B04  ldr.w     r4,[r3],#4
.   108  000001D18  0F8424B04  str.w     r4,[r2],#4
.   112  000001D1C  0F014447F  ands.w    r4,r4,#0FF000000H
.   116  000001D20      0D1F8  bne.n     -16 -> 104
.   118  000001D22  0F000B870  b.w       224 -> 346
.   122  000001D26      02805  cmp       r0,#5
.   124  000001D28  0F0408013  bne.w     38 -> 166
      msg := "BusFault"
    ELSIF code = UsageFault THEN
.   128  000001D2C      0460A  mov       r2,r1
.   130  000001D2E      0BF00  nop       
.   132  000001D30      0A300  adr       r3,pc,#0 -> 136
.   134  000001D32      0E005  b         10 -> 148
.   136  000001D34  046737542  <String: "BusF">
.   140  000001D38  0746C7561  <String: "ault">
.   144  000001D3C  000000000  <String: "....">
.   148  000001D40  0F8534B04  ldr.w     r4,[r3],#4
.   152  000001D44  0F8424B04  str.w     r4,[r2],#4
.   156  000001D48  0F014447F  ands.w    r4,r4,#0FF000000H
.   160  000001D4C      0D1F8  bne.n     -16 -> 148
.   162  000001D4E  0F000B85A  b.w       180 -> 346
.   166  000001D52      02806  cmp       r0,#6
.   168  000001D54  0F0408013  bne.w     38 -> 210
      msg := "UsageFault"
    ELSIF code = SecureFault THEN
.   172  000001D58      0460A  mov       r2,r1
.   174  000001D5A      0BF00  nop       
.   176  000001D5C      0A300  adr       r3,pc,#0 -> 180
.   178  000001D5E      0E005  b         10 -> 192
.   180  000001D60  067617355  <String: "Usag">
.   184  000001D64  075614665  <String: "eFau">
.   188  000001D68  00000746C  <String: "lt..">
.   192  000001D6C  0F8534B04  ldr.w     r4,[r3],#4
.   196  000001D70  0F8424B04  str.w     r4,[r2],#4
.   200  000001D74  0F014447F  ands.w    r4,r4,#0FF000000H
.   204  000001D78      0D1F8  bne.n     -16 -> 192
.   206  000001D7A  0F000B844  b.w       136 -> 346
.   210  000001D7E      02807  cmp       r0,#7
.   212  000001D80  0F0408013  bne.w     38 -> 254
      msg := "SecureFault"
    ELSIF code = DebugMon THEN
.   216  000001D84      0460A  mov       r2,r1
.   218  000001D86      0BF00  nop       
.   220  000001D88      0A300  adr       r3,pc,#0 -> 224
.   222  000001D8A      0E005  b         10 -> 236
.   224  000001D8C  075636553  <String: "Secu">
.   228  000001D90  061466572  <String: "reFa">
.   232  000001D94  000746C75  <String: "ult.">
.   236  000001D98  0F8534B04  ldr.w     r4,[r3],#4
.   240  000001D9C  0F8424B04  str.w     r4,[r2],#4
.   244  000001DA0  0F014447F  ands.w    r4,r4,#0FF000000H
.   248  000001DA4      0D1F8  bne.n     -16 -> 236
.   250  000001DA6  0F000B82E  b.w       92 -> 346
.   254  000001DAA      0280C  cmp       r0,#12
.   256  000001DAC  0F0408013  bne.w     38 -> 298
      msg := "DebugFault"
    ELSE
.   260  000001DB0      0460A  mov       r2,r1
.   262  000001DB2      0BF00  nop       
.   264  000001DB4      0A300  adr       r3,pc,#0 -> 268
.   266  000001DB6      0E005  b         10 -> 280
.   268  000001DB8  075626544  <String: "Debu">
.   272  000001DBC  075614667  <String: "gFau">
.   276  000001DC0  00000746C  <String: "lt..">
.   280  000001DC4  0F8534B04  ldr.w     r4,[r3],#4
.   284  000001DC8  0F8424B04  str.w     r4,[r2],#4
.   288  000001DCC  0F014447F  ands.w    r4,r4,#0FF000000H
.   292  000001DD0      0D1F8  bne.n     -16 -> 280
      msg := "missing exception handler"
.   294  000001DD2  0F000B818  b.w       48 -> 346
    END
.   298  000001DD6      0460A  mov       r2,r1
.   300  000001DD8      0A300  adr       r3,pc,#0 -> 304
.   302  000001DDA      0E00D  b         26 -> 332
.   304  000001DDC  07373696D  <String: "miss">
.   308  000001DE0  020676E69  <String: "ing ">
.   312  000001DE4  065637865  <String: "exce">
.   316  000001DE8  06F697470  <String: "ptio">
.   320  000001DEC  06168206E  <String: "n ha">
.   324  000001DF0  0656C646E  <String: "ndle">
.   328  000001DF4  000000072  <String: "r...">
.   332  000001DF8  0F8534B04  ldr.w     r4,[r3],#4
.   336  000001DFC  0F8424B04  str.w     r4,[r2],#4
.   340  000001E00  0F014447F  ands.w    r4,r4,#0FF000000H
.   344  000001E04      0D1F8  bne.n     -16 -> 332
  END faultMessage;
.   346  000001E06      0BD00  pop       { pc }


  PROCEDURE errorMessage(code: INTEGER; VAR msg: String);
  BEGIN
.   348  000001E08      0B503  push      { r0, r1, lr }
    IF (code >= FirstRTKcode) & (code <= LastRTKcode) THEN
.   350  000001E0A      09800  ldr       r0,[sp]
.   352  000001E0C      02820  cmp       r0,#32
.   354  000001E0E  0F2C081A9  blt.w     850 -> 1208
.   358  000001E12      09800  ldr       r0,[sp]
.   360  000001E14      02832  cmp       r0,#50
.   362  000001E16  0F30081A5  bgt.w     842 -> 1208
      CASE code OF
        Trace:
.   366  000001E1A      0BF00  nop       
.   368  000001E1C      09800  ldr       r0,[sp]
.   370  000001E1E  0F1B00121  subs.w    r1,r0,#33
.   374  000001E22  0F1B10F11  cmp.w     r1,#17
.   378  000001E26      0DD01  ble.n     2 -> 384
.   380  000001E28      0DF04  svc       4
.   382  000001E2A      0005F  <LineNo: 95>
.   384  000001E2C  0F2403204  movw      r2,#772
.   388  000001E30      0447A  add       r2,pc
.   390  000001E32  0E8D2F011  tbh       [r2,r1,lsl 1]
          msg := "stack trace"
      | PreCond:
.   394  000001E36      09801  ldr       r0,[sp,#4]
.   396  000001E38      0A100  adr       r1,pc,#0 -> 400
.   398  000001E3A      0E005  b         10 -> 412
.   400  000001E3C  063617473  <String: "stac">
.   404  000001E40  07274206B  <String: "k tr">
.   408  000001E44  000656361  <String: "ace.">
.   412  000001E48  0F8512B04  ldr.w     r2,[r1],#4
.   416  000001E4C  0F8402B04  str.w     r2,[r0],#4
.   420  000001E50  0F012427F  ands.w    r2,r2,#0FF000000H
.   424  000001E54      0D1F8  bne.n     -16 -> 412
.   426  000001E56  0F000B983  b.w       774 -> 1204
          msg := "precondition violation"
      | PostCond:
.   430  000001E5A      09801  ldr       r0,[sp,#4]
.   432  000001E5C      0A100  adr       r1,pc,#0 -> 436
.   434  000001E5E      0E00B  b         22 -> 460
.   436  000001E60  063657270  <String: "prec">
.   440  000001E64  069646E6F  <String: "ondi">
.   444  000001E68  06E6F6974  <String: "tion">
.   448  000001E6C  06F697620  <String: " vio">
.   452  000001E70  06974616C  <String: "lati">
.   456  000001E74  000006E6F  <String: "on..">
.   460  000001E78  0F8512B04  ldr.w     r2,[r1],#4
.   464  000001E7C  0F8402B04  str.w     r2,[r0],#4
.   468  000001E80  0F012427F  ands.w    r2,r2,#0FF000000H
.   472  000001E84      0D1F8  bne.n     -16 -> 460
.   474  000001E86  0F000B96B  b.w       726 -> 1204
          msg := "postcondition violation"
      | ConsCheck:
.   478  000001E8A      09801  ldr       r0,[sp,#4]
.   480  000001E8C      0A100  adr       r1,pc,#0 -> 484
.   482  000001E8E      0E00B  b         22 -> 508
.   484  000001E90  074736F70  <String: "post">
.   488  000001E94  0646E6F63  <String: "cond">
.   492  000001E98  06F697469  <String: "itio">
.   496  000001E9C  06976206E  <String: "n vi">
.   500  000001EA0  074616C6F  <String: "olat">
.   504  000001EA4  0006E6F69  <String: "ion.">
.   508  000001EA8  0F8512B04  ldr.w     r2,[r1],#4
.   512  000001EAC  0F8402B04  str.w     r2,[r0],#4
.   516  000001EB0  0F012427F  ands.w    r2,r2,#0FF000000H
.   520  000001EB4      0D1F8  bne.n     -16 -> 508
.   522  000001EB6  0F000B953  b.w       678 -> 1204
          msg := "consistency check violation"
      | ProgError:
.   526  000001EBA      09801  ldr       r0,[sp,#4]
.   528  000001EBC      0A100  adr       r1,pc,#0 -> 532
.   530  000001EBE      0E00D  b         26 -> 560
.   532  000001EC0  0736E6F63  <String: "cons">
.   536  000001EC4  065747369  <String: "iste">
.   540  000001EC8  02079636E  <String: "ncy ">
.   544  000001ECC  063656863  <String: "chec">
.   548  000001ED0  06976206B  <String: "k vi">
.   552  000001ED4  074616C6F  <String: "olat">
.   556  000001ED8  0006E6F69  <String: "ion.">
.   560  000001EDC  0F8512B04  ldr.w     r2,[r1],#4
.   564  000001EE0  0F8402B04  str.w     r2,[r0],#4
.   568  000001EE4  0F012427F  ands.w    r2,r2,#0FF000000H
.   572  000001EE8      0D1F8  bne.n     -16 -> 560
.   574  000001EEA  0F000B939  b.w       626 -> 1204
          msg := "program design error"
      | BufferOverflow:
.   578  000001EEE      09801  ldr       r0,[sp,#4]
.   580  000001EF0      0A100  adr       r1,pc,#0 -> 584
.   582  000001EF2      0E00B  b         22 -> 608
.   584  000001EF4  0676F7270  <String: "prog">
.   588  000001EF8  0206D6172  <String: "ram ">
.   592  000001EFC  069736564  <String: "desi">
.   596  000001F00  065206E67  <String: "gn e">
.   600  000001F04  0726F7272  <String: "rror">
.   604  000001F08  000000000  <String: "....">
.   608  000001F0C  0F8512B04  ldr.w     r2,[r1],#4
.   612  000001F10  0F8402B04  str.w     r2,[r0],#4
.   616  000001F14  0F012427F  ands.w    r2,r2,#0FF000000H
.   620  000001F18      0D1F8  bne.n     -16 -> 608
.   622  000001F1A  0F000B921  b.w       578 -> 1204
          msg := "buffer overflow"
      | BufferEmpty:
.   626  000001F1E      09801  ldr       r0,[sp,#4]
.   628  000001F20      0A100  adr       r1,pc,#0 -> 632
.   630  000001F22      0E007  b         14 -> 648
.   632  000001F24  066667562  <String: "buff">
.   636  000001F28  06F207265  <String: "er o">
.   640  000001F2C  066726576  <String: "verf">
.   644  000001F30  000776F6C  <String: "low.">
.   648  000001F34  0F8512B04  ldr.w     r2,[r1],#4
.   652  000001F38  0F8402B04  str.w     r2,[r0],#4
.   656  000001F3C  0F012427F  ands.w    r2,r2,#0FF000000H
.   660  000001F40      0D1F8  bne.n     -16 -> 648
.   662  000001F42  0F000B90D  b.w       538 -> 1204
          msg := "buffer empty"
      | Timing:
.   666  000001F46      09801  ldr       r0,[sp,#4]
.   668  000001F48      0A100  adr       r1,pc,#0 -> 672
.   670  000001F4A      0E007  b         14 -> 688
.   672  000001F4C  066667562  <String: "buff">
.   676  000001F50  065207265  <String: "er e">
.   680  000001F54  07974706D  <String: "mpty">
.   684  000001F58  000000000  <String: "....">
.   688  000001F5C  0F8512B04  ldr.w     r2,[r1],#4
.   692  000001F60  0F8402B04  str.w     r2,[r0],#4
.   696  000001F64  0F012427F  ands.w    r2,r2,#0FF000000H
.   700  000001F68      0D1F8  bne.n     -16 -> 688
.   702  000001F6A  0F000B8F9  b.w       498 -> 1204
          msg := "timing error"
      | HeapOverflow:
.   706  000001F6E      09801  ldr       r0,[sp,#4]
.   708  000001F70      0A100  adr       r1,pc,#0 -> 712
.   710  000001F72      0E007  b         14 -> 728
.   712  000001F74  0696D6974  <String: "timi">
.   716  000001F78  06520676E  <String: "ng e">
.   720  000001F7C  0726F7272  <String: "rror">
.   724  000001F80  000000000  <String: "....">
.   728  000001F84  0F8512B04  ldr.w     r2,[r1],#4
.   732  000001F88  0F8402B04  str.w     r2,[r0],#4
.   736  000001F8C  0F012427F  ands.w    r2,r2,#0FF000000H
.   740  000001F90      0D1F8  bne.n     -16 -> 728
.   742  000001F92  0F000B8E5  b.w       458 -> 1204
          msg := "heap overflow"
      | StackOverflow:
.   746  000001F96      09801  ldr       r0,[sp,#4]
.   748  000001F98      0A100  adr       r1,pc,#0 -> 752
.   750  000001F9A      0E007  b         14 -> 768
.   752  000001F9C  070616568  <String: "heap">
.   756  000001FA0  065766F20  <String: " ove">
.   760  000001FA4  06F6C6672  <String: "rflo">
.   764  000001FA8  000000077  <String: "w...">
.   768  000001FAC  0F8512B04  ldr.w     r2,[r1],#4
.   772  000001FB0  0F8402B04  str.w     r2,[r0],#4
.   776  000001FB4  0F012427F  ands.w    r2,r2,#0FF000000H
.   780  000001FB8      0D1F8  bne.n     -16 -> 768
.   782  000001FBA  0F000B8D1  b.w       418 -> 1204
          msg := "stack overflow"
      | StorageOverflow:
.   786  000001FBE      09801  ldr       r0,[sp,#4]
.   788  000001FC0      0A100  adr       r1,pc,#0 -> 792
.   790  000001FC2      0E007  b         14 -> 808
.   792  000001FC4  063617473  <String: "stac">
.   796  000001FC8  0766F206B  <String: "k ov">
.   800  000001FCC  06C667265  <String: "erfl">
.   804  000001FD0  00000776F  <String: "ow..">
.   808  000001FD4  0F8512B04  ldr.w     r2,[r1],#4
.   812  000001FD8  0F8402B04  str.w     r2,[r0],#4
.   816  000001FDC  0F012427F  ands.w    r2,r2,#0FF000000H
.   820  000001FE0      0D1F8  bne.n     -16 -> 808
.   822  000001FE2  0F000B8BD  b.w       378 -> 1204
          msg := "storage overflow"
      | StorageError:
.   826  000001FE6      09801  ldr       r0,[sp,#4]
.   828  000001FE8      0A100  adr       r1,pc,#0 -> 832
.   830  000001FEA      0E009  b         18 -> 852
.   832  000001FEC  0726F7473  <String: "stor">
.   836  000001FF0  020656761  <String: "age ">
.   840  000001FF4  07265766F  <String: "over">
.   844  000001FF8  0776F6C66  <String: "flow">
.   848  000001FFC  000000000  <String: "....">
.   852  000002000  0F8512B04  ldr.w     r2,[r1],#4
.   856  000002004  0F8402B04  str.w     r2,[r0],#4
.   860  000002008  0F012427F  ands.w    r2,r2,#0FF000000H
.   864  00000200C      0D1F8  bne.n     -16 -> 852
.   866  00000200E  0F000B8A7  b.w       334 -> 1204
          msg := "storage error"
      | UsageError:
.   870  000002012      09801  ldr       r0,[sp,#4]
.   872  000002014      0A100  adr       r1,pc,#0 -> 876
.   874  000002016      0E007  b         14 -> 892
.   876  000002018  0726F7473  <String: "stor">
.   880  00000201C  020656761  <String: "age ">
.   884  000002020  06F727265  <String: "erro">
.   888  000002024  000000072  <String: "r...">
.   892  000002028  0F8512B04  ldr.w     r2,[r1],#4
.   896  00000202C  0F8402B04  str.w     r2,[r0],#4
.   900  000002030  0F012427F  ands.w    r2,r2,#0FF000000H
.   904  000002034      0D1F8  bne.n     -16 -> 892
.   906  000002036  0F000B893  b.w       294 -> 1204
          msg := "usage error"
      | BadResourceData:
.   910  00000203A      09801  ldr       r0,[sp,#4]
.   912  00000203C      0A100  adr       r1,pc,#0 -> 916
.   914  00000203E      0E005  b         10 -> 928
.   916  000002040  067617375  <String: "usag">
.   920  000002044  072652065  <String: "e er">
.   924  000002048  000726F72  <String: "ror.">
.   928  00000204C  0F8512B04  ldr.w     r2,[r1],#4
.   932  000002050  0F8402B04  str.w     r2,[r0],#4
.   936  000002054  0F012427F  ands.w    r2,r2,#0FF000000H
.   940  000002058      0D1F8  bne.n     -16 -> 928
.   942  00000205A  0F000B881  b.w       258 -> 1204
          msg := "program resource data inconsistent"
      | NotSupported:
.   946  00000205E      09801  ldr       r0,[sp,#4]
.   948  000002060      0A100  adr       r1,pc,#0 -> 952
.   950  000002062      0E011  b         34 -> 988
.   952  000002064  0676F7270  <String: "prog">
.   956  000002068  0206D6172  <String: "ram ">
.   960  00000206C  06F736572  <String: "reso">
.   964  000002070  065637275  <String: "urce">
.   968  000002074  074616420  <String: " dat">
.   972  000002078  06E692061  <String: "a in">
.   976  00000207C  0736E6F63  <String: "cons">
.   980  000002080  065747369  <String: "iste">
.   984  000002084  00000746E  <String: "nt..">
.   988  000002088  0F8512B04  ldr.w     r2,[r1],#4
.   992  00000208C  0F8402B04  str.w     r2,[r0],#4
.   996  000002090  0F012427F  ands.w    r2,r2,#0FF000000H
.  1000  000002094      0D1F8  bne.n     -16 -> 988
.  1002  000002096  0F000B863  b.w       198 -> 1204
          msg := "functionality not supported"
      | NotImplemented:
.  1006  00000209A      09801  ldr       r0,[sp,#4]
.  1008  00000209C      0A100  adr       r1,pc,#0 -> 1012
.  1010  00000209E      0E00D  b         26 -> 1040
.  1012  0000020A0  0636E7566  <String: "func">
.  1016  0000020A4  06E6F6974  <String: "tion">
.  1020  0000020A8  074696C61  <String: "alit">
.  1024  0000020AC  06F6E2079  <String: "y no">
.  1028  0000020B0  075732074  <String: "t su">
.  1032  0000020B4  0726F7070  <String: "ppor">
.  1036  0000020B8  000646574  <String: "ted.">
.  1040  0000020BC  0F8512B04  ldr.w     r2,[r1],#4
.  1044  0000020C0  0F8402B04  str.w     r2,[r0],#4
.  1048  0000020C4  0F012427F  ands.w    r2,r2,#0FF000000H
.  1052  0000020C8      0D1F8  bne.n     -16 -> 1040
.  1054  0000020CA  0F000B849  b.w       146 -> 1204
          msg := "functionality not (yet) implemented"
      | NumThreads:
.  1058  0000020CE      09801  ldr       r0,[sp,#4]
.  1060  0000020D0      0A100  adr       r1,pc,#0 -> 1064
.  1062  0000020D2      0E011  b         34 -> 1100
.  1064  0000020D4  0636E7566  <String: "func">
.  1068  0000020D8  06E6F6974  <String: "tion">
.  1072  0000020DC  074696C61  <String: "alit">
.  1076  0000020E0  06F6E2079  <String: "y no">
.  1080  0000020E4  079282074  <String: "t (y">
.  1084  0000020E8  020297465  <String: "et) ">
.  1088  0000020EC  06C706D69  <String: "impl">
.  1092  0000020F0  06E656D65  <String: "emen">
.  1096  0000020F4  000646574  <String: "ted.">
.  1100  0000020F8  0F8512B04  ldr.w     r2,[r1],#4
.  1104  0000020FC  0F8402B04  str.w     r2,[r0],#4
.  1108  000002100  0F012427F  ands.w    r2,r2,#0FF000000H
.  1112  000002104      0D1F8  bne.n     -16 -> 1100
.  1114  000002106  0F000B82B  b.w       86 -> 1204
          msg := "too many threads"
      END
.  1118  00000210A      09801  ldr       r0,[sp,#4]
.  1120  00000210C      0A100  adr       r1,pc,#0 -> 1124
.  1122  00000210E      0E009  b         18 -> 1144
.  1124  000002110  0206F6F74  <String: "too ">
.  1128  000002114  0796E616D  <String: "many">
.  1132  000002118  072687420  <String: " thr">
.  1136  00000211C  073646165  <String: "eads">
.  1140  000002120  000000000  <String: "....">
.  1144  000002124  0F8512B04  ldr.w     r2,[r1],#4
.  1148  000002128  0F8402B04  str.w     r2,[r0],#4
.  1152  00000212C  0F012427F  ands.w    r2,r2,#0FF000000H
.  1156  000002130      0D1F8  bne.n     -16 -> 1144
.  1158  000002132  0F000B815  b.w       42 -> 1204
    ELSIF (code >= FirstAstrobeCode) & (code <= LastAstrobeCode) & ~(code IN AstrobeUnused) THEN
.  1162  000002136      0BF00  nop       
.  1164  000002138      00000  <Case:   0>
.  1166  00000213A      00012  <Case:   18>
.  1168  00000213C      0002A  <Case:   42>
.  1170  00000213E      00042  <Case:   66>
.  1172  000002140      0005C  <Case:   92>
.  1174  000002142      00074  <Case:   116>
.  1176  000002144      00088  <Case:   136>
.  1178  000002146      0009C  <Case:   156>
.  1180  000002148      000B0  <Case:   176>
.  1182  00000214A      000C4  <Case:   196>
.  1184  00000214C      000D8  <Case:   216>
.  1186  00000214E      000EE  <Case:   238>
.  1188  000002150      00102  <Case:   258>
.  1190  000002152      00193  <Case:   403>
.  1192  000002154      00114  <Case:   276>
.  1194  000002156      00132  <Case:   306>
.  1196  000002158      0014C  <Case:   332>
.  1198  00000215A      0016A  <Case:   362>
.  1200  00000215C      0DF04  svc       4
.  1202  00000215E      00081  <LineNo: 129>
.  1204  000002160  0F000B833  b.w       102 -> 1310
.  1208  000002164      09800  ldr       r0,[sp]
.  1210  000002166      02801  cmp       r0,#1
.  1212  000002168  0F2C0801D  blt.w     58 -> 1274
.  1216  00000216C      09800  ldr       r0,[sp]
.  1218  00000216E      02819  cmp       r0,#25
.  1220  000002170  0F3008019  bgt.w     50 -> 1274
.  1224  000002174  0F44F207E  mov.w     r0,#00FE000H
.  1228  000002178      09900  ldr       r1,[sp]
.  1230  00000217A      02201  movs      r2,#1
.  1232  00000217C      0408A  lsls      r2,r1
.  1234  00000217E  0EA100F02  tst.w     r0,r2
.  1238  000002182  0F0408010  bne.w     32 -> 1274
      Error.Msg(code, msg)
.  1242  000002186      09800  ldr       r0,[sp]
.  1244  000002188      09901  ldr       r1,[sp,#4]
    ELSE
.  1246  00000218A  0F8DF2044  ldr.w     r2,[pc,#68] -> 1316
.  1250  00000218E      06812  ldr       r2,[r2]
.  1252  000002190  0F1B20F00  cmp.w     r2,#0
.  1256  000002194      0D101  bne.n     2 -> 1262
.  1258  000002196      0DF05  svc       5
.  1260  000002198      00084  <LineNo: 132>
.  1262  00000219A      03201  adds      r2,#1
.  1264  00000219C      04790  blx       r2
.  1266  00000219E      0E000  b         0 -> 1270
.  1268  0000021A0      00084  <LineNo: 132>
      msg := "unknown error"
.  1270  0000021A2  0F000B812  b.w       36 -> 1310
    END
.  1274  0000021A6      09801  ldr       r0,[sp,#4]
.  1276  0000021A8      0A100  adr       r1,pc,#0 -> 1280
.  1278  0000021AA      0E007  b         14 -> 1296
.  1280  0000021AC  06E6B6E75  <String: "unkn">
.  1284  0000021B0  0206E776F  <String: "own ">
.  1288  0000021B4  06F727265  <String: "erro">
.  1292  0000021B8  000000072  <String: "r...">
.  1296  0000021BC  0F8512B04  ldr.w     r2,[r1],#4
.  1300  0000021C0  0F8402B04  str.w     r2,[r0],#4
.  1304  0000021C4  0F012427F  ands.w    r2,r2,#0FF000000H
.  1308  0000021C8      0D1F8  bne.n     -16 -> 1296
  END errorMessage;
.  1310  0000021CA      0B002  add       sp,#8
.  1312  0000021CC      0BD00  pop       { pc }
.  1314  0000021CE      0BF00  nop       
.  1316  0000021D0  020027ED4  <Global: Error data>


  PROCEDURE GetErrorMsg*(errType, errCode: INTEGER; VAR msg: String);
  BEGIN
.  1320  0000021D4      0B507  push      { r0, r1, r2, lr }
    IF errType >= 2 THEN
.  1322  0000021D6      09800  ldr       r0,[sp]
.  1324  0000021D8      02802  cmp       r0,#2
.  1326  0000021DA  0F2C08008  blt.w     16 -> 1346
      faultMessage(errCode, msg)
.  1330  0000021DE      09801  ldr       r0,[sp,#4]
.  1332  0000021E0      09902  ldr       r1,[sp,#8]
    ELSE
.  1334  0000021E2  0F7FFFD65  bl.w      -1334 -> 4
.  1338  0000021E6      0E000  b         0 -> 1342
.  1340  0000021E8      0008E  <LineNo: 142>
      errorMessage(errCode, msg)
.  1342  0000021EA  0F000B806  b.w       12 -> 1358
.  1346  0000021EE      09801  ldr       r0,[sp,#4]
.  1348  0000021F0      09902  ldr       r1,[sp,#8]
    END
.  1350  0000021F2  0F7FFFE09  bl.w      -1006 -> 348
.  1354  0000021F6      0E000  b         0 -> 1358
.  1356  0000021F8      00090  <LineNo: 144>
  END GetErrorMsg;
.  1358  0000021FA      0B003  add       sp,#12
.  1360  0000021FC      0BD00  pop       { pc }
.  1362  0000021FE      0BF00  nop       


  PROCEDURE GetErrorType*(excType: INTEGER; VAR msg: String);
  BEGIN
.  1364  000002200      0B503  push      { r0, r1, lr }
    IF excType = ErrTypeErrorHandler THEN
.  1366  000002202      09800  ldr       r0,[sp]
.  1368  000002204      02800  cmp       r0,#0
.  1370  000002206  0F040801C  bne.w     56 -> 1430
      msg := "run-time error in handler mode"
    ELSIF excType = ErrTypeErrorThread THEN
.  1374  00000220A      09801  ldr       r0,[sp,#4]
.  1376  00000220C      0A100  adr       r1,pc,#0 -> 1380
.  1378  00000220E      0E00F  b         30 -> 1412
.  1380  000002210  02D6E7572  <String: "run-">
.  1384  000002214  0656D6974  <String: "time">
.  1388  000002218  072726520  <String: " err">
.  1392  00000221C  06920726F  <String: "or i">
.  1396  000002220  06168206E  <String: "n ha">
.  1400  000002224  0656C646E  <String: "ndle">
.  1404  000002228  06F6D2072  <String: "r mo">
.  1408  00000222C  000006564  <String: "de..">
.  1412  000002230  0F8512B04  ldr.w     r2,[r1],#4
.  1416  000002234  0F8402B04  str.w     r2,[r0],#4
.  1420  000002238  0F012427F  ands.w    r2,r2,#0FF000000H
.  1424  00000223C      0D1F8  bne.n     -16 -> 1412
.  1426  00000223E  0F000B870  b.w       224 -> 1654
.  1430  000002242      09800  ldr       r0,[sp]
.  1432  000002244      02801  cmp       r0,#1
.  1434  000002246  0F040801C  bne.w     56 -> 1494
      msg := "run-time error in thread mode"
    ELSIF excType = ErrTypeFaultHandler THEN
.  1438  00000224A      09801  ldr       r0,[sp,#4]
.  1440  00000224C      0A100  adr       r1,pc,#0 -> 1444
.  1442  00000224E      0E00F  b         30 -> 1476
.  1444  000002250  02D6E7572  <String: "run-">
.  1448  000002254  0656D6974  <String: "time">
.  1452  000002258  072726520  <String: " err">
.  1456  00000225C  06920726F  <String: "or i">
.  1460  000002260  06874206E  <String: "n th">
.  1464  000002264  064616572  <String: "read">
.  1468  000002268  0646F6D20  <String: " mod">
.  1472  00000226C  000000065  <String: "e...">
.  1476  000002270  0F8512B04  ldr.w     r2,[r1],#4
.  1480  000002274  0F8402B04  str.w     r2,[r0],#4
.  1484  000002278  0F012427F  ands.w    r2,r2,#0FF000000H
.  1488  00000227C      0D1F8  bne.n     -16 -> 1476
.  1490  00000227E  0F000B850  b.w       160 -> 1654
.  1494  000002282      09800  ldr       r0,[sp]
.  1496  000002284      02802  cmp       r0,#2
.  1498  000002286  0F040801A  bne.w     52 -> 1554
      msg := "MCU fault in handler mode"
    ELSIF excType = ErrTypeFaultThread THEN
.  1502  00000228A      09801  ldr       r0,[sp,#4]
.  1504  00000228C      0A100  adr       r1,pc,#0 -> 1508
.  1506  00000228E      0E00D  b         26 -> 1536
.  1508  000002290  02055434D  <String: "MCU ">
.  1512  000002294  06C756166  <String: "faul">
.  1516  000002298  06E692074  <String: "t in">
.  1520  00000229C  06E616820  <String: " han">
.  1524  0000022A0  072656C64  <String: "dler">
.  1528  0000022A4  0646F6D20  <String: " mod">
.  1532  0000022A8  000000065  <String: "e...">
.  1536  0000022AC  0F8512B04  ldr.w     r2,[r1],#4
.  1540  0000022B0  0F8402B04  str.w     r2,[r0],#4
.  1544  0000022B4  0F012427F  ands.w    r2,r2,#0FF000000H
.  1548  0000022B8      0D1F8  bne.n     -16 -> 1536
.  1550  0000022BA  0F000B832  b.w       100 -> 1654
.  1554  0000022BE      09800  ldr       r0,[sp]
.  1556  0000022C0      02803  cmp       r0,#3
.  1558  0000022C2  0F040801A  bne.w     52 -> 1614
      msg := "MCU fault in thread mode"
    ELSE
.  1562  0000022C6      09801  ldr       r0,[sp,#4]
.  1564  0000022C8      0A100  adr       r1,pc,#0 -> 1568
.  1566  0000022CA      0E00D  b         26 -> 1596
.  1568  0000022CC  02055434D  <String: "MCU ">
.  1572  0000022D0  06C756166  <String: "faul">
.  1576  0000022D4  06E692074  <String: "t in">
.  1580  0000022D8  072687420  <String: " thr">
.  1584  0000022DC  020646165  <String: "ead ">
.  1588  0000022E0  065646F6D  <String: "mode">
.  1592  0000022E4  000000000  <String: "....">
.  1596  0000022E8  0F8512B04  ldr.w     r2,[r1],#4
.  1600  0000022EC  0F8402B04  str.w     r2,[r0],#4
.  1604  0000022F0  0F012427F  ands.w    r2,r2,#0FF000000H
.  1608  0000022F4      0D1F8  bne.n     -16 -> 1596
      msg := "unknown exception"
.  1610  0000022F6  0F000B814  b.w       40 -> 1654
    END
.  1614  0000022FA      09801  ldr       r0,[sp,#4]
.  1616  0000022FC      0A100  adr       r1,pc,#0 -> 1620
.  1618  0000022FE      0E009  b         18 -> 1640
.  1620  000002300  06E6B6E75  <String: "unkn">
.  1624  000002304  0206E776F  <String: "own ">
.  1628  000002308  065637865  <String: "exce">
.  1632  00000230C  06F697470  <String: "ptio">
.  1636  000002310  00000006E  <String: "n...">
.  1640  000002314  0F8512B04  ldr.w     r2,[r1],#4
.  1644  000002318  0F8402B04  str.w     r2,[r0],#4
.  1648  00000231C  0F012427F  ands.w    r2,r2,#0FF000000H
.  1652  000002320      0D1F8  bne.n     -16 -> 1640
  END GetErrorType;
.  1654  000002322      0B002  add       sp,#8
.  1656  000002324      0BD00  pop       { pc }
.  1658  000002326      0BF00  nop       

END Errors.
.  1660  000002328      0B500  push      { lr }
.  1662  00000232A      0BD00  pop       { pc }
 