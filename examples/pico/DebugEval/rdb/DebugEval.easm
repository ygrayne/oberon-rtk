
; Program module: DebugEval
        
       256    010000100H    02002FC34H    
       260    010000104H    010005695H    
       264    010000108H        00001H    
       268    01000010CH        00001H    
       272    010000110H        00001H    
       276    010000114H        00001H    
       280    010000118H        00001H    
       284    01000011CH        00001H    
       288    010000120H        00001H    
       292    010000124H        00001H    
       296    010000128H        00001H    
       300    01000012CH        00001H    
       304    010000130H        00001H    
       308    010000134H        00001H    
       312    010000138H        00001H    
       316    01000013CH        00001H    
       320    010000140H        00001H    
       324    010000144H        00001H    
       328    010000148H        00001H    
       332    01000014CH        00001H    
       336    010000150H        00001H    
       340    010000154H        00001H    
       344    010000158H        00001H    
       348    01000015CH        00001H    
       352    010000160H        00001H    
       356    010000164H        00001H    
       360    010000168H        00001H    
       364    01000016CH        00001H    
       368    010000170H        00001H    
       372    010000174H        00001H    
       376    010000178H        00001H    
       380    01000017CH        00001H    
       384    010000180H        00001H    
       388    010000184H        00001H    
       392    010000188H        00001H    
       396    01000018CH        00001H    
       400    010000190H        00001H    
       404    010000194H        00001H    
       408    010000198H        00001H    
       412    01000019CH        00001H    
       416    0100001A0H        00001H    
       420    0100001A4H        00001H    
       424    0100001A8H        00001H    
       428    0100001ACH        00001H    
       432    0100001B0H        00001H    
       436    0100001B4H        00001H    
       440    0100001B8H        00001H    
       444    0100001BCH        00001H    
       448    0100001C0H        00001H    
       452    0100001C4H        00001H    
       456    0100001C8H        00001H    
       460    0100001CCH        00001H    
       464    0100001D0H        00001H    
       468    0100001D4H        00001H    
       472    0100001D8H        00001H    
       476    0100001DCH        00001H    
       480    0100001E0H        00001H    
       484    0100001E4H        00001H    
       488    0100001E8H        00001H    
       492    0100001ECH        00001H    
       496    0100001F0H        00001H    
       500    0100001F4H        00001H    
       504    0100001F8H        00001H    
       508    0100001FCH        00001H    
       512    010000200H        00000H    
       516    010000204H        00000H    
       520    010000208H        00000H    
       524    01000020CH        00000H    
       528    010000210H        00000H    
       532    010000214H        00000H    
       536    010000218H        00000H    
       540    01000021CH        00000H    
       544    010000220H        00000H    
       548    010000224H        00000H    
       552    010000228H        00000H    
       556    01000022CH        00000H    
       560    010000230H        00000H    
       564    010000234H        00000H    
       568    010000238H        00000H    
       572    01000023CH        00000H    
       576    010000240H        00000H    
       580    010000244H        00000H    
       584    010000248H        00000H    
       588    01000024CH        00000H    
       592    010000250H        00000H    
       596    010000254H        00000H    
       600    010000258H        00000H    
       604    01000025CH        00000H    
       608    010000260H        00000H    
       612    010000264H        00000H    
       616    010000268H        00000H    
       620    01000026CH        00000H    
       624    010000270H        00000H    
       628    010000274H        00000H    
       632    010000278H        00000H    
       636    01000027CH        00000H    
       640    010000280H        00000H    
       644    010000284H        00000H    
       648    010000288H        00000H    
       652    01000028CH        00000H    
       656    010000290H        00000H    
       660    010000294H        00000H    
       664    010000298H        00000H    
       668    01000029CH        00000H    
       672    0100002A0H        00000H    
       676    0100002A4H        00000H    
       680    0100002A8H        00000H    
       684    0100002ACH        00000H    
       688    0100002B0H        00000H    
       692    0100002B4H        00000H    
       696    0100002B8H        00000H    
       700    0100002BCH        00000H    
       704    0100002C0H        00000H    
       708    0100002C4H        00000H    
       712    0100002C8H        00000H    
       716    0100002CCH        00000H    
       720    0100002D0H        00000H    
       724    0100002D4H        00000H    
       728    0100002D8H        00000H    
       732    0100002DCH        00000H    
       736    0100002E0H        00000H    
       740    0100002E4H        00000H    
       744    0100002E8H        00000H    
       748    0100002ECH        00000H    
       752    0100002F0H        00000H    
       756    0100002F4H        00000H    
       760    0100002F8H        00000H    
       764    0100002FCH        00000H    
       768    010000300H        00000H    
       772    010000304H        00000H    
       776    010000308H    020000200H    
       780    01000030CH        00000H    
       784    010000310H    010005710H    
       788    010000314H    010005694H    
       792    010000318H    020000000H    
       796    01000031CH    020030000H    
       800    010000320H    010000100H    
       804    010000324H    010200000H    
       808    010000328H        00000H    
       812    01000032CH        00000H    
       816    010000330H        00000H    
       820    010000334H        00000H    
       824    010000338H        00000H    
       828    01000033CH        00000H    

MODULE LinkOptions;
       832    010000340H        00000H    ; Pad

PROCEDURE* LinkOptions.CodeStartAddress;
END CodeStartAddress;
       836    010000344H        0B500H    push     { lr }
       838    010000346H        0BD00H    pop      { pc }

PROCEDURE LinkOptions.Init();
BEGIN
       840    010000348H        0B500H    push     { lr }
  cs := SYSTEM.ADR(CodeStartAddress) - 244H;
       842    01000034AH        046C0H    nop
       844    01000034CH        04821H    ldr      r0,[pc,#132] -> 980 ; Const 0FFFFFFF2H -14
       846    01000034EH        04478H    add      r0,pc
       848    010000350H        02191H    movs     r1,#145
       850    010000352H        00089H    lsls     r1,r1,#2
       852    010000354H        01A40H    subs     r0,r0,r1
       854    010000356H        04920H    ldr      r1,[pc,#128] -> 984 ; Global 02002FFDCH
       856    010000358H        06008H    str      r0,[r1]
  OptionsStart := cs + 200H;
       858    01000035AH        0481FH    ldr      r0,[pc,#124] -> 984 ; Global 02002FFDCH
       860    01000035CH        06800H    ldr      r0,[r0]
       862    01000035EH        02101H    movs     r1,#1
       864    010000360H        00249H    lsls     r1,r1,#9
       866    010000362H        01840H    adds     r0,r0,r1
       868    010000364H        0491DH    ldr      r1,[pc,#116] -> 988 ; Global 02002FFFCH
       870    010000366H        06008H    str      r0,[r1]
  SYSTEM.GET(OptionsStart + 4, ConfigID);
       872    010000368H        0481CH    ldr      r0,[pc,#112] -> 988 ; Global 02002FFFCH
       874    01000036AH        06800H    ldr      r0,[r0]
       876    01000036CH        03004H    adds     r0,#4
       878    01000036EH        06801H    ldr      r1,[r0]
       880    010000370H        04A1BH    ldr      r2,[pc,#108] -> 992 ; Global 02002FFF8H
       882    010000372H        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 8, HeapStart);
       884    010000374H        04819H    ldr      r0,[pc,#100] -> 988 ; Global 02002FFFCH
       886    010000376H        06800H    ldr      r0,[r0]
       888    010000378H        03008H    adds     r0,#8
       890    01000037AH        06801H    ldr      r1,[r0]
       892    01000037CH        04A19H    ldr      r2,[pc,#100] -> 996 ; Global 02002FFF4H
       894    01000037EH        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 12, HeapLimit);
       896    010000380H        04816H    ldr      r0,[pc,#88] -> 988 ; Global 02002FFFCH
       898    010000382H        06800H    ldr      r0,[r0]
       900    010000384H        0300CH    adds     r0,#12
       902    010000386H        06801H    ldr      r1,[r0]
       904    010000388H        04A17H    ldr      r2,[pc,#92] -> 1000 ; Global 02002FFF0H
       906    01000038AH        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 16, ResourceStart);
       908    01000038CH        04813H    ldr      r0,[pc,#76] -> 988 ; Global 02002FFFCH
       910    01000038EH        06800H    ldr      r0,[r0]
       912    010000390H        03010H    adds     r0,#16
       914    010000392H        06801H    ldr      r1,[r0]
       916    010000394H        04A15H    ldr      r2,[pc,#84] -> 1004 ; Global 02002FFE8H
       918    010000396H        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 24, DataStart);
       920    010000398H        04810H    ldr      r0,[pc,#64] -> 988 ; Global 02002FFFCH
       922    01000039AH        06800H    ldr      r0,[r0]
       924    01000039CH        03018H    adds     r0,#24
       926    01000039EH        06801H    ldr      r1,[r0]
       928    0100003A0H        04A13H    ldr      r2,[pc,#76] -> 1008 ; Global 02002FFE4H
       930    0100003A2H        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 28,  DataEnd);
       932    0100003A4H        0480DH    ldr      r0,[pc,#52] -> 988 ; Global 02002FFFCH
       934    0100003A6H        06800H    ldr      r0,[r0]
       936    0100003A8H        0301CH    adds     r0,#28
       938    0100003AAH        06801H    ldr      r1,[r0]
       940    0100003ACH        04A11H    ldr      r2,[pc,#68] -> 1012 ; Global 02002FFE0H
       942    0100003AEH        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 32, CodeStart);
       944    0100003B0H        0480AH    ldr      r0,[pc,#40] -> 988 ; Global 02002FFFCH
       946    0100003B2H        06800H    ldr      r0,[r0]
       948    0100003B4H        03020H    adds     r0,#32
       950    0100003B6H        06801H    ldr      r1,[r0]
       952    0100003B8H        04A0FH    ldr      r2,[pc,#60] -> 1016 ; Global 02002FFD8H
       954    0100003BAH        06011H    str      r1,[r2]
  SYSTEM.GET(OptionsStart + 36, CodeEnd);
       956    0100003BCH        04807H    ldr      r0,[pc,#28] -> 988 ; Global 02002FFFCH
       958    0100003BEH        06800H    ldr      r0,[r0]
       960    0100003C0H        03024H    adds     r0,#36
       962    0100003C2H        06801H    ldr      r1,[r0]
       964    0100003C4H        04A0DH    ldr      r2,[pc,#52] -> 1020 ; Global 02002FFD4H
       966    0100003C6H        06011H    str      r1,[r2]
  SYSTEM.GET(CodeStart, StackStart)
END Init;
       968    0100003C8H        0480BH    ldr      r0,[pc,#44] -> 1016 ; Global 02002FFD8H
       970    0100003CAH        06800H    ldr      r0,[r0]
       972    0100003CCH        06801H    ldr      r1,[r0]
       974    0100003CEH        04A0CH    ldr      r2,[pc,#48] -> 1024 ; Global 02002FFECH
       976    0100003D0H        06011H    str      r1,[r2]
       978    0100003D2H        0BD00H    pop      { pc }
       980    0100003D4H    0FFFFFFF2H    ; Const 0FFFFFFF2H -14
       984    0100003D8H    02002FFDCH    ; Global 02002FFDCH
       988    0100003DCH    02002FFFCH    ; Global 02002FFFCH
       992    0100003E0H    02002FFF8H    ; Global 02002FFF8H
       996    0100003E4H    02002FFF4H    ; Global 02002FFF4H
      1000    0100003E8H    02002FFF0H    ; Global 02002FFF0H
      1004    0100003ECH    02002FFE8H    ; Global 02002FFE8H
      1008    0100003F0H    02002FFE4H    ; Global 02002FFE4H
      1012    0100003F4H    02002FFE0H    ; Global 02002FFE0H
      1016    0100003F8H    02002FFD8H    ; Global 02002FFD8H
      1020    0100003FCH    02002FFD4H    ; Global 02002FFD4H
      1024    010000400H    02002FFECH    ; Global 02002FFECH

PROCEDURE LinkOptions..init;
BEGIN
      1028    010000404H        0B500H    push     { lr }
  Init()
END .init;
END LinkOptions.
      1030    010000406H    0F7FFFF9FH    bl.w     LinkOptions.Init
      1034    01000040AH        0E000H    b        0 -> 1038
      1036    01000040CH        00031H    ; LineNo: 49
      1038    01000040EH        0BD00H    pop      { pc }

MODULE MCU2;
      1040    010000410H        00000H    ; Pad

PROCEDURE MCU2..init;
END .init;
END MCU2.
      1044    010000414H        0B500H    push     { lr }
      1046    010000416H        0BD00H    pop      { pc }

MODULE Config;
      1048    010000418H        00000H    ; Pad

  PROCEDURE Config.init;
  BEGIN
      1052    01000041CH        0B500H    push     { lr }
    CoreZeroDataStart := LinkOptions.DataStart;
      1054    01000041EH        0480CH    ldr      r0,[pc,#48] -> 1104 ; Global 02002FFE4H
      1056    010000420H        06800H    ldr      r0,[r0]
      1058    010000422H        04911H    ldr      r1,[pc,#68] -> 1128 ; Global 02002FFD0H
      1060    010000424H        06008H    str      r0,[r1]
    CoreZeroStackStart := LinkOptions.StackStart;
      1062    010000426H        0480BH    ldr      r0,[pc,#44] -> 1108 ; Global 02002FFECH
      1064    010000428H        06800H    ldr      r0,[r0]
      1066    01000042AH        04910H    ldr      r1,[pc,#64] -> 1132 ; Global 02002FFCCH
      1068    01000042CH        06008H    str      r0,[r1]
    CoreZeroHeapStart := LinkOptions.HeapStart;
      1070    01000042EH        0480AH    ldr      r0,[pc,#40] -> 1112 ; Global 02002FFF4H
      1072    010000430H        06800H    ldr      r0,[r0]
      1074    010000432H        0490FH    ldr      r1,[pc,#60] -> 1136 ; Global 02002FFC8H
      1076    010000434H        06008H    str      r0,[r1]
    CoreZeroHeapLimit := LinkOptions.HeapLimit;
      1078    010000436H        04809H    ldr      r0,[pc,#36] -> 1116 ; Global 02002FFF0H
      1080    010000438H        06800H    ldr      r0,[r0]
      1082    01000043AH        0490EH    ldr      r1,[pc,#56] -> 1140 ; Global 02002FFC4H
      1084    01000043CH        06008H    str      r0,[r1]
    CodeStart := LinkOptions.CodeStart;
      1086    01000043EH        04808H    ldr      r0,[pc,#32] -> 1120 ; Global 02002FFD8H
      1088    010000440H        06800H    ldr      r0,[r0]
      1090    010000442H        0490DH    ldr      r1,[pc,#52] -> 1144 ; Global 02002FFC0H
      1092    010000444H        06008H    str      r0,[r1]
    CodeEnd := LinkOptions.CodeEnd
  END init;
      1094    010000446H        04807H    ldr      r0,[pc,#28] -> 1124 ; Global 02002FFD4H
      1096    010000448H        06800H    ldr      r0,[r0]
      1098    01000044AH        0490CH    ldr      r1,[pc,#48] -> 1148 ; Global 02002FFBCH
      1100    01000044CH        06008H    str      r0,[r1]
      1102    01000044EH        0BD00H    pop      { pc }
      1104    010000450H    02002FFE4H    ; Global 02002FFE4H
      1108    010000454H    02002FFECH    ; Global 02002FFECH
      1112    010000458H    02002FFF4H    ; Global 02002FFF4H
      1116    01000045CH    02002FFF0H    ; Global 02002FFF0H
      1120    010000460H    02002FFD8H    ; Global 02002FFD8H
      1124    010000464H    02002FFD4H    ; Global 02002FFD4H
      1128    010000468H    02002FFD0H    ; Global 02002FFD0H
      1132    01000046CH    02002FFCCH    ; Global 02002FFCCH
      1136    010000470H    02002FFC8H    ; Global 02002FFC8H
      1140    010000474H    02002FFC4H    ; Global 02002FFC4H
      1144    010000478H    02002FFC0H    ; Global 02002FFC0H
      1148    01000047CH    02002FFBCH    ; Global 02002FFBCH

PROCEDURE Config..init;
BEGIN
      1152    010000480H        0B500H    push     { lr }
  init
END .init;
END Config.
      1154    010000482H    0F7FFFFCBH    bl.w     Config.init
      1158    010000486H        0E000H    b        0 -> 1162
      1160    010000488H        00067H    ; LineNo: 103
      1162    01000048AH        0BD00H    pop      { pc }

MODULE StartUp;
      1164    01000048CH        00000H    ; Pad

  PROCEDURE StartUp.AwaitPowerOnResetDone*(which: INTEGER);
    VAR x: SET;
  BEGIN
      1168    010000490H        0B501H    push     { r0, lr }
      1170    010000492H        0B081H    sub      sp,#4
    REPEAT
      SYSTEM.GET(MCU.PSM_DONE, x)
    UNTIL which IN x
      1172    010000494H        04805H    ldr      r0,[pc,#20] -> 1196 ; Const 04001000CH 1073807372
      1174    010000496H        06801H    ldr      r1,[r0]
      1176    010000498H        09100H    str      r1,[sp]
  END AwaitPowerOnResetDone;
      1178    01000049AH        09800H    ldr      r0,[sp]
      1180    01000049CH        09901H    ldr      r1,[sp,#4]
      1182    01000049EH        02201H    movs     r2,#1
      1184    0100004A0H        0408AH    lsls     r2,r1
      1186    0100004A2H        04210H    tst      r0,r2
      1188    0100004A4H        0D0F6H    beq.n    -20 -> 1172 ldr      r0,[pc,#20] -> 1196 ; Const 04001000CH 1073807372
      1190    0100004A6H        0B002H    add      sp,#8
      1192    0100004A8H        0BD00H    pop      { pc }
      1194    0100004AAH        046C0H    nop
      1196    0100004ACH    04001000CH    ; Const 04001000CH 1073807372

  PROCEDURE StartUp.ReleaseReset*(devNo: INTEGER);
    VAR x: SET;
  BEGIN
      1200    0100004B0H        0B501H    push     { r0, lr }
      1202    0100004B2H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.RESETS_DONE, x);
      1204    0100004B4H        04809H    ldr      r0,[pc,#36] -> 1244 ; Const 04000C008H 1073790984
      1206    0100004B6H        06801H    ldr      r1,[r0]
      1208    0100004B8H        09100H    str      r1,[sp]
    IF ~(devNo IN x) THEN
      1210    0100004BAH        09800H    ldr      r0,[sp]
      1212    0100004BCH        09901H    ldr      r1,[sp,#4]
      1214    0100004BEH        02201H    movs     r2,#1
      1216    0100004C0H        0408AH    lsls     r2,r1
      1218    0100004C2H        04210H    tst      r0,r2
      1220    0100004C4H        0D001H    beq.n    2 -> 1226
      1222    0100004C6H        0E006H    b        12 -> 1238
      1224    0100004C8H        046C0H    nop
      SYSTEM.PUT(MCU.RESETS_RESET + MCU.ACLR, {devNo})
      1226    0100004CAH        09801H    ldr      r0,[sp,#4]
      1228    0100004CCH        02101H    movs     r1,#1
      1230    0100004CEH        04081H    lsls     r1,r0
      1232    0100004D0H        04608H    mov      r0,r1
    END
      1234    0100004D2H        04903H    ldr      r1,[pc,#12] -> 1248 ; Const 04000F000H 1073803264
      1236    0100004D4H        06008H    str      r0,[r1]
  END ReleaseReset;
      1238    0100004D6H        0B002H    add      sp,#8
      1240    0100004D8H        0BD00H    pop      { pc }
      1242    0100004DAH        046C0H    nop
      1244    0100004DCH    04000C008H    ; Const 04000C008H 1073790984
      1248    0100004E0H    04000F000H    ; Const 04000F000H 1073803264

  PROCEDURE StartUp.AwaitReleaseDone*(devNo: INTEGER);
    VAR x: SET;
  BEGIN
      1252    0100004E4H        0B501H    push     { r0, lr }
      1254    0100004E6H        0B081H    sub      sp,#4
    REPEAT
      SYSTEM.GET(MCU.RESETS_DONE, x);
      1256    0100004E8H        04805H    ldr      r0,[pc,#20] -> 1280 ; Const 04000C008H 1073790984
      1258    0100004EAH        06801H    ldr      r1,[r0]
      1260    0100004ECH        09100H    str      r1,[sp]
    UNTIL (devNo IN x)
      1262    0100004EEH        09800H    ldr      r0,[sp]
      1264    0100004F0H        09901H    ldr      r1,[sp,#4]
      1266    0100004F2H        02201H    movs     r2,#1
      1268    0100004F4H        0408AH    lsls     r2,r1
      1270    0100004F6H        04210H    tst      r0,r2
  END AwaitReleaseDone;
      1272    0100004F8H        0D0F6H    beq.n    -20 -> 1256 ldr      r0,[pc,#20] -> 1280 ; Const 04000C008H 1073790984
      1274    0100004FAH        0B002H    add      sp,#8
      1276    0100004FCH        0BD00H    pop      { pc }
      1278    0100004FEH        046C0H    nop
      1280    010000500H    04000C008H    ; Const 04000C008H 1073790984

PROCEDURE StartUp..init;
END .init;
END StartUp;
      1284    010000504H        0B500H    push     { lr }
      1286    010000506H        0BD00H    pop      { pc }

MODULE Error;
      1288    010000508H        00000H    ; Pad

PROCEDURE* Error.StdMsg(error: INTEGER; VAR msg: String);
BEGIN
      1292    01000050CH        0B503H    push     { r0, r1, lr }
  IF (error < first) OR (error > last) OR (error IN unused) THEN
      1294    01000050EH        09800H    ldr      r0,[sp]
      1296    010000510H        02801H    cmp      r0,#1
      1298    010000512H        0DA01H    bge.n    2 -> 1304
      1300    010000514H        0E00EH    b        28 -> 1332
      1302    010000516H        046C0H    nop
      1304    010000518H        09800H    ldr      r0,[sp]
      1306    01000051AH        02819H    cmp      r0,#25
      1308    01000051CH        0DD01H    ble.n    2 -> 1314
      1310    01000051EH        0E009H    b        18 -> 1332
      1312    010000520H        046C0H    nop
      1314    010000522H        0207FH    movs     r0,#127
      1316    010000524H        00340H    lsls     r0,r0,#13
      1318    010000526H        09900H    ldr      r1,[sp]
      1320    010000528H        02201H    movs     r2,#1
      1322    01000052AH        0408AH    lsls     r2,r1
      1324    01000052CH        04210H    tst      r0,r2
      1326    01000052EH        0D101H    bne.n    2 -> 1332
      1328    010000530H        0E005H    b        10 -> 1342
      1330    010000532H        046C0H    nop
    msg := ""
  ELSE
      1332    010000534H        02000H    movs     r0,#0
      1334    010000536H        09901H    ldr      r1,[sp,#4]
      1336    010000538H        06008H    str      r0,[r1]
    CASE error OF
      1338    01000053AH        0E19DH    b        826 -> 2168
      1340    01000053CH        046C0H    nop
    | typeTest:
      1342    01000053EH        09800H    ldr      r0,[sp]
      1344    010000540H        04601H    mov      r1,r0
      1346    010000542H        03901H    subs     r1,#1
      1348    010000544H        02919H    cmp      r1,#25
      1350    010000546H        0DD01H    ble.n    2 -> 1356
      1352    010000548H        0DF04H    svc      4
      1354    01000054AH        0003FH    ; LineNo: 63
      1356    01000054CH        00049H    lsls     r1,r1,#1
      1358    01000054EH        046C0H    nop
      1360    010000550H        04A01H    ldr      r2,[pc,#4] -> 1368 ; Const 02EFH 751
      1362    010000552H        01852H    adds     r2,r2,r1
      1364    010000554H        0447AH    add      r2,pc
      1366    010000556H        04710H    bx       r2
      1368    010000558H        002EFH    ; Const 02EFH 751
        msg := "type test failure"
    | arrayLen:
      1372    01000055CH        09801H    ldr      r0,[sp,#4]
      1374    01000055EH        046C0H    nop
      1376    010000560H        0A100H    adr      r1,pc,#0 -> 1380
      1378    010000562H        0E009H    b        18 -> 1400
      1380    010000564H    065707974H    ; String: "type"
      1384    010000568H    073657420H    ; String: " tes"
      1388    01000056CH    061662074H    ; String: "t fa"
      1392    010000570H    072756C69H    ; String: "ilur"
      1396    010000574H        00065H    ; String: "e..."
      1400    010000578H        04B71H    ldr      r3,[pc,#452] -> 1856 ; Const 0FF000000H -16777216
      1402    01000057AH        0680AH    ldr      r2,[r1]
      1404    01000057CH        03104H    adds     r1,#4
      1406    01000057EH        06002H    str      r2,[r0]
      1408    010000580H        03004H    adds     r0,#4
      1410    010000582H        0401AH    ands     r2,r3
      1412    010000584H        0D1F9H    bne.n    -14 -> 1402
      1414    010000586H        0E177H    b        750 -> 2168
      1416    010000588H        046C0H    nop
        msg := "arrays are not the same length"
    | strLen:
      1418    01000058AH        09801H    ldr      r0,[sp,#4]
      1420    01000058CH        0A100H    adr      r1,pc,#0 -> 1424
      1422    01000058EH        0E00FH    b        30 -> 1456
      1424    010000590H    061727261H    ; String: "arra"
      1428    010000594H    061207379H    ; String: "ys a"
      1432    010000598H    06E206572H    ; String: "re n"
      1436    01000059CH    07420746FH    ; String: "ot t"
      1440    0100005A0H    073206568H    ; String: "he s"
      1444    0100005A4H    020656D61H    ; String: "ame "
      1448    0100005A8H    0676E656CH    ; String: "leng"
      1452    0100005ACH        06874H    ; String: "th.."
      1456    0100005B0H        04B63H    ldr      r3,[pc,#396] -> 1856 ; Const 0FF000000H -16777216
      1458    0100005B2H        0680AH    ldr      r2,[r1]
      1460    0100005B4H        03104H    adds     r1,#4
      1462    0100005B6H        06002H    str      r2,[r0]
      1464    0100005B8H        03004H    adds     r0,#4
      1466    0100005BAH        0401AH    ands     r2,r3
      1468    0100005BCH        0D1F9H    bne.n    -14 -> 1458
      1470    0100005BEH        0E15BH    b        694 -> 2168
      1472    0100005C0H        046C0H    nop
        msg := "strings are not the same length"
    | intDiv:
      1474    0100005C2H        09801H    ldr      r0,[sp,#4]
      1476    0100005C4H        0A100H    adr      r1,pc,#0 -> 1480
      1478    0100005C6H        0E00FH    b        30 -> 1512
      1480    0100005C8H    069727473H    ; String: "stri"
      1484    0100005CCH    02073676EH    ; String: "ngs "
      1488    0100005D0H    020657261H    ; String: "are "
      1492    0100005D4H    020746F6EH    ; String: "not "
      1496    0100005D8H    020656874H    ; String: "the "
      1500    0100005DCH    0656D6173H    ; String: "same"
      1504    0100005E0H    06E656C20H    ; String: " len"
      1508    0100005E4H      0687467H    ; String: "gth."
      1512    0100005E8H        04B55H    ldr      r3,[pc,#340] -> 1856 ; Const 0FF000000H -16777216
      1514    0100005EAH        0680AH    ldr      r2,[r1]
      1516    0100005ECH        03104H    adds     r1,#4
      1518    0100005EEH        06002H    str      r2,[r0]
      1520    0100005F0H        03004H    adds     r0,#4
      1522    0100005F2H        0401AH    ands     r2,r3
      1524    0100005F4H        0D1F9H    bne.n    -14 -> 1514
      1526    0100005F6H        0E13FH    b        638 -> 2168
      1528    0100005F8H        046C0H    nop
        msg := "integer divided by zero or negative divisor"
    | fpuExp, fpuOverflow, fpuNull:
      1530    0100005FAH        09801H    ldr      r0,[sp,#4]
      1532    0100005FCH        0A100H    adr      r1,pc,#0 -> 1536
      1534    0100005FEH        0E015H    b        42 -> 1580
      1536    010000600H    065746E69H    ; String: "inte"
      1540    010000604H    020726567H    ; String: "ger "
      1544    010000608H    069766964H    ; String: "divi"
      1548    01000060CH    020646564H    ; String: "ded "
      1552    010000610H    07A207962H    ; String: "by z"
      1556    010000614H    0206F7265H    ; String: "ero "
      1560    010000618H    06E20726FH    ; String: "or n"
      1564    01000061CH    074616765H    ; String: "egat"
      1568    010000620H    020657669H    ; String: "ive "
      1572    010000624H    069766964H    ; String: "divi"
      1576    010000628H      0726F73H    ; String: "sor."
      1580    01000062CH        04B44H    ldr      r3,[pc,#272] -> 1856 ; Const 0FF000000H -16777216
      1582    01000062EH        0680AH    ldr      r2,[r1]
      1584    010000630H        03104H    adds     r1,#4
      1586    010000632H        06002H    str      r2,[r0]
      1588    010000634H        03004H    adds     r0,#4
      1590    010000636H        0401AH    ands     r2,r3
      1592    010000638H        0D1F9H    bne.n    -14 -> 1582
      1594    01000063AH        0E11DH    b        570 -> 2168
      1596    01000063CH        046C0H    nop
        msg := "FPU error"
    | heap:
      1598    01000063EH        09801H    ldr      r0,[sp,#4]
      1600    010000640H        0A100H    adr      r1,pc,#0 -> 1604
      1602    010000642H        0E005H    b        10 -> 1616
      1604    010000644H    020555046H    ; String: "FPU "
      1608    010000648H    06F727265H    ; String: "erro"
      1612    01000064CH        00072H    ; String: "r..."
      1616    010000650H        04B3BH    ldr      r3,[pc,#236] -> 1856 ; Const 0FF000000H -16777216
      1618    010000652H        0680AH    ldr      r2,[r1]
      1620    010000654H        03104H    adds     r1,#4
      1622    010000656H        06002H    str      r2,[r0]
      1624    010000658H        03004H    adds     r0,#4
      1626    01000065AH        0401AH    ands     r2,r3
      1628    01000065CH        0D1F9H    bne.n    -14 -> 1618
      1630    01000065EH        0E10BH    b        534 -> 2168
      1632    010000660H        046C0H    nop
        msg := "heap overflow"
    | nilPtr:
      1634    010000662H        09801H    ldr      r0,[sp,#4]
      1636    010000664H        0A100H    adr      r1,pc,#0 -> 1640
      1638    010000666H        0E007H    b        14 -> 1656
      1640    010000668H    070616568H    ; String: "heap"
      1644    01000066CH    065766F20H    ; String: " ove"
      1648    010000670H    06F6C6672H    ; String: "rflo"
      1652    010000674H        00077H    ; String: "w..."
      1656    010000678H        04B31H    ldr      r3,[pc,#196] -> 1856 ; Const 0FF000000H -16777216
      1658    01000067AH        0680AH    ldr      r2,[r1]
      1660    01000067CH        03104H    adds     r1,#4
      1662    01000067EH        06002H    str      r2,[r0]
      1664    010000680H        03004H    adds     r0,#4
      1666    010000682H        0401AH    ands     r2,r3
      1668    010000684H        0D1F9H    bne.n    -14 -> 1658
      1670    010000686H        0E0F7H    b        494 -> 2168
      1672    010000688H        046C0H    nop
        msg := "attempt to dispose a NIL pointer"
    | case:
      1674    01000068AH        09801H    ldr      r0,[sp,#4]
      1676    01000068CH        0A100H    adr      r1,pc,#0 -> 1680
      1678    01000068EH        0E011H    b        34 -> 1716
      1680    010000690H    065747461H    ; String: "atte"
      1684    010000694H    02074706DH    ; String: "mpt "
      1688    010000698H    064206F74H    ; String: "to d"
      1692    01000069CH    06F707369H    ; String: "ispo"
      1696    0100006A0H    061206573H    ; String: "se a"
      1700    0100006A4H    04C494E20H    ; String: " NIL"
      1704    0100006A8H    0696F7020H    ; String: " poi"
      1708    0100006ACH    07265746EH    ; String: "nter"
      1712    0100006B0H        00000H    ; String: "...."
      1716    0100006B4H        04B22H    ldr      r3,[pc,#136] -> 1856 ; Const 0FF000000H -16777216
      1718    0100006B6H        0680AH    ldr      r2,[r1]
      1720    0100006B8H        03104H    adds     r1,#4
      1722    0100006BAH        06002H    str      r2,[r0]
      1724    0100006BCH        03004H    adds     r0,#4
      1726    0100006BEH        0401AH    ands     r2,r3
      1728    0100006C0H        0D1F9H    bne.n    -14 -> 1718
      1730    0100006C2H        0E0D9H    b        434 -> 2168
      1732    0100006C4H        046C0H    nop
        msg := "invalid value in case statement"
    | input:
      1734    0100006C6H        09801H    ldr      r0,[sp,#4]
      1736    0100006C8H        0A100H    adr      r1,pc,#0 -> 1740
      1738    0100006CAH        0E00FH    b        30 -> 1772
      1740    0100006CCH    061766E69H    ; String: "inva"
      1744    0100006D0H    02064696CH    ; String: "lid "
      1748    0100006D4H    0756C6176H    ; String: "valu"
      1752    0100006D8H    06E692065H    ; String: "e in"
      1756    0100006DCH    073616320H    ; String: " cas"
      1760    0100006E0H    074732065H    ; String: "e st"
      1764    0100006E4H    06D657461H    ; String: "atem"
      1768    0100006E8H      0746E65H    ; String: "ent."
      1772    0100006ECH        04B14H    ldr      r3,[pc,#80] -> 1856 ; Const 0FF000000H -16777216
      1774    0100006EEH        0680AH    ldr      r2,[r1]
      1776    0100006F0H        03104H    adds     r1,#4
      1778    0100006F2H        06002H    str      r2,[r0]
      1780    0100006F4H        03004H    adds     r0,#4
      1782    0100006F6H        0401AH    ands     r2,r3
      1784    0100006F8H        0D1F9H    bne.n    -14 -> 1774
      1786    0100006FAH        0E0BDH    b        378 -> 2168
      1788    0100006FCH        046C0H    nop
        msg := "input parameter has an unexpected value"
    | data:
      1790    0100006FEH        09801H    ldr      r0,[sp,#4]
      1792    010000700H        0A100H    adr      r1,pc,#0 -> 1796
      1794    010000702H        0E013H    b        38 -> 1836
      1796    010000704H    075706E69H    ; String: "inpu"
      1800    010000708H    061702074H    ; String: "t pa"
      1804    01000070CH    0656D6172H    ; String: "rame"
      1808    010000710H    020726574H    ; String: "ter "
      1812    010000714H    020736168H    ; String: "has "
      1816    010000718H    075206E61H    ; String: "an u"
      1820    01000071CH    07078656EH    ; String: "nexp"
      1824    010000720H    065746365H    ; String: "ecte"
      1828    010000724H    061762064H    ; String: "d va"
      1832    010000728H      065756CH    ; String: "lue."
      1836    01000072CH        04B04H    ldr      r3,[pc,#16] -> 1856 ; Const 0FF000000H -16777216
      1838    01000072EH        0680AH    ldr      r2,[r1]
      1840    010000730H        03104H    adds     r1,#4
      1842    010000732H        06002H    str      r2,[r0]
      1844    010000734H        03004H    adds     r0,#4
      1846    010000736H        0401AH    ands     r2,r3
      1848    010000738H        0D1F9H    bne.n    -14 -> 1838
      1850    01000073AH        046C0H    nop
      1852    01000073CH    0F000F802H    bl.w     Error.StdMsg + 568
      1856    010000740H    0FF000000H    ; Const 0FF000000H -16777216
      1860    010000744H        0E098H    b        304 -> 2168
      1862    010000746H        046C0H    nop
        msg := "data has an unexpected value"
    | rtIndex, index:
      1864    010000748H        09801H    ldr      r0,[sp,#4]
      1866    01000074AH        046C0H    nop
      1868    01000074CH        0A100H    adr      r1,pc,#0 -> 1872
      1870    01000074EH        0E00FH    b        30 -> 1904
      1872    010000750H    061746164H    ; String: "data"
      1876    010000754H    073616820H    ; String: " has"
      1880    010000758H    0206E6120H    ; String: " an "
      1884    01000075CH    078656E75H    ; String: "unex"
      1888    010000760H    074636570H    ; String: "pect"
      1892    010000764H    076206465H    ; String: "ed v"
      1896    010000768H    065756C61H    ; String: "alue"
      1900    01000076CH        00000H    ; String: "...."
      1904    010000770H        04B42H    ldr      r3,[pc,#264] -> 2172 ; Const 0FF000000H -16777216
      1906    010000772H        0680AH    ldr      r2,[r1]
      1908    010000774H        03104H    adds     r1,#4
      1910    010000776H        06002H    str      r2,[r0]
      1912    010000778H        03004H    adds     r0,#4
      1914    01000077AH        0401AH    ands     r2,r3
      1916    01000077CH        0D1F9H    bne.n    -14 -> 1906
      1918    01000077EH        0E07BH    b        246 -> 2168
      1920    010000780H        046C0H    nop
        msg := "index out of bounds"
    | version:
      1922    010000782H        09801H    ldr      r0,[sp,#4]
      1924    010000784H        0A100H    adr      r1,pc,#0 -> 1928
      1926    010000786H        0E009H    b        18 -> 1948
      1928    010000788H    065646E69H    ; String: "inde"
      1932    01000078CH    0756F2078H    ; String: "x ou"
      1936    010000790H    0666F2074H    ; String: "t of"
      1940    010000794H    0756F6220H    ; String: " bou"
      1944    010000798H      073646EH    ; String: "nds."
      1948    01000079CH        04B37H    ldr      r3,[pc,#220] -> 2172 ; Const 0FF000000H -16777216
      1950    01000079EH        0680AH    ldr      r2,[r1]
      1952    0100007A0H        03104H    adds     r1,#4
      1954    0100007A2H        06002H    str      r2,[r0]
      1956    0100007A4H        03004H    adds     r0,#4
      1958    0100007A6H        0401AH    ands     r2,r3
      1960    0100007A8H        0D1F9H    bne.n    -14 -> 1950
      1962    0100007AAH        0E065H    b        202 -> 2168
      1964    0100007ACH        046C0H    nop
        msg := "version check failed"
    | timeout:
      1966    0100007AEH        09801H    ldr      r0,[sp,#4]
      1968    0100007B0H        0A100H    adr      r1,pc,#0 -> 1972
      1970    0100007B2H        0E00BH    b        22 -> 1996
      1972    0100007B4H    073726576H    ; String: "vers"
      1976    0100007B8H    0206E6F69H    ; String: "ion "
      1980    0100007BCH    063656863H    ; String: "chec"
      1984    0100007C0H    06166206BH    ; String: "k fa"
      1988    0100007C4H    064656C69H    ; String: "iled"
      1992    0100007C8H        00000H    ; String: "...."
      1996    0100007CCH        04B2BH    ldr      r3,[pc,#172] -> 2172 ; Const 0FF000000H -16777216
      1998    0100007CEH        0680AH    ldr      r2,[r1]
      2000    0100007D0H        03104H    adds     r1,#4
      2002    0100007D2H        06002H    str      r2,[r0]
      2004    0100007D4H        03004H    adds     r0,#4
      2006    0100007D6H        0401AH    ands     r2,r3
      2008    0100007D8H        0D1F9H    bne.n    -14 -> 1998
      2010    0100007DAH        0E04DH    b        154 -> 2168
      2012    0100007DCH        046C0H    nop
        msg := "timeout value exceeded"
    | nilProc, undefinedProc:
      2014    0100007DEH        09801H    ldr      r0,[sp,#4]
      2016    0100007E0H        0A100H    adr      r1,pc,#0 -> 2020
      2018    0100007E2H        0E00BH    b        22 -> 2044
      2020    0100007E4H    0656D6974H    ; String: "time"
      2024    0100007E8H    02074756FH    ; String: "out "
      2028    0100007ECH    0756C6176H    ; String: "valu"
      2032    0100007F0H    078652065H    ; String: "e ex"
      2036    0100007F4H    064656563H    ; String: "ceed"
      2040    0100007F8H        06465H    ; String: "ed.."
      2044    0100007FCH        04B1FH    ldr      r3,[pc,#124] -> 2172 ; Const 0FF000000H -16777216
      2046    0100007FEH        0680AH    ldr      r2,[r1]
      2048    010000800H        03104H    adds     r1,#4
      2050    010000802H        06002H    str      r2,[r0]
      2052    010000804H        03004H    adds     r0,#4
      2054    010000806H        0401AH    ands     r2,r3
      2056    010000808H        0D1F9H    bne.n    -14 -> 2046
      2058    01000080AH        0E035H    b        106 -> 2168
      2060    01000080CH        046C0H    nop
        msg := "undefined procedure variable"
    END
      2062    01000080EH        09801H    ldr      r0,[sp,#4]
      2064    010000810H        0A100H    adr      r1,pc,#0 -> 2068
      2066    010000812H        0E00FH    b        30 -> 2100
      2068    010000814H    065646E75H    ; String: "unde"
      2072    010000818H    0656E6966H    ; String: "fine"
      2076    01000081CH    072702064H    ; String: "d pr"
      2080    010000820H    06465636FH    ; String: "oced"
      2084    010000824H    020657275H    ; String: "ure "
      2088    010000828H    069726176H    ; String: "vari"
      2092    01000082CH    0656C6261H    ; String: "able"
      2096    010000830H        00000H    ; String: "...."
      2100    010000834H        04B11H    ldr      r3,[pc,#68] -> 2172 ; Const 0FF000000H -16777216
      2102    010000836H        0680AH    ldr      r2,[r1]
      2104    010000838H        03104H    adds     r1,#4
      2106    01000083AH        06002H    str      r2,[r0]
      2108    01000083CH        03004H    adds     r0,#4
      2110    01000083EH        0401AH    ands     r2,r3
      2112    010000840H        0D1F9H    bne.n    -14 -> 2102
      2114    010000842H        0E019H    b        50 -> 2168
      2116    010000844H        046C0H    nop
  END
      2118    010000846H        0E79CH    b        -200 -> 1922
      2120    010000848H        0E688H    b        -752 -> 1372
      2122    01000084AH        0E69EH    b        -708 -> 1418
      2124    01000084CH        0E73BH    b        -394 -> 1734
      2126    01000084EH        0E7DEH    b        -68 -> 2062
      2128    010000850H        0E6B7H    b        -658 -> 1474
      2130    010000852H        0E6D2H    b        -604 -> 1530
      2132    010000854H        0E6F3H    b        -538 -> 1598
      2134    010000856H        0E6F2H    b        -540 -> 1598
      2136    010000858H        0E6F1H    b        -542 -> 1598
      2138    01000085AH        0E702H    b        -508 -> 1634
      2140    01000085CH        0E715H    b        -470 -> 1674
      2142    01000085EH        0E672H    b        -796 -> 1350
      2144    010000860H        0E671H    b        -798 -> 1350
      2146    010000862H        0E670H    b        -800 -> 1350
      2148    010000864H        0E66FH    b        -802 -> 1350
      2150    010000866H        0E66EH    b        -804 -> 1350
      2152    010000868H        0E66DH    b        -806 -> 1350
      2154    01000086AH        0E66CH    b        -808 -> 1350
      2156    01000086CH        0E747H    b        -370 -> 1790
      2158    01000086EH        0E76BH    b        -298 -> 1864
      2160    010000870H        0E787H    b        -242 -> 1922
      2162    010000872H        0E79CH    b        -200 -> 1966
      2164    010000874H        0E7B3H    b        -154 -> 2014
      2166    010000876H        0E7CAH    b        -108 -> 2062
END StdMsg;
      2168    010000878H        0B002H    add      sp,#8
      2170    01000087AH        0BD00H    pop      { pc }
      2172    01000087CH    0FF000000H    ; Const 0FF000000H -16777216

PROCEDURE Error..init;
BEGIN
      2176    010000880H        0B500H    push     { lr }
  Msg := StdMsg
END .init;
END Error.
      2178    010000882H        046C0H    nop
      2180    010000884H        04802H    ldr      r0,[pc,#8] -> 2192 ; Const 0FFFFFC82H -894
      2182    010000886H        04478H    add      r0,pc
      2184    010000888H        04902H    ldr      r1,[pc,#8] -> 2196 ; Global 02002FFB8H
      2186    01000088AH        06008H    str      r0,[r1]
      2188    01000088CH        0BD00H    pop      { pc }
      2190    01000088EH        046C0H    nop
      2192    010000890H    0FFFFFC82H    ; Const 0FFFFFC82H -894
      2196    010000894H    02002FFB8H    ; Global 02002FFB8H

MODULE Errors;
      2200    010000898H        00000H    ; Pad

  PROCEDURE Errors.faultMessage(code: INTEGER; VAR msg: String);
  BEGIN
      2204    01000089CH        0B503H    push     { r0, r1, lr }
    IF code = NMI THEN
      2206    01000089EH        09800H    ldr      r0,[sp]
      2208    0100008A0H        02102H    movs     r1,#2
      2210    0100008A2H        042C8H    cmn      r0,r1
      2212    0100008A4H        0D001H    beq.n    2 -> 2218
      2214    0100008A6H        0E009H    b        18 -> 2236
      2216    0100008A8H        046C0H    nop
      msg := "NMI"
    ELSIF code = HardFault THEN
      2218    0100008AAH        09801H    ldr      r0,[sp,#4]
      2220    0100008ACH        0A100H    adr      r1,pc,#0 -> 2224
      2222    0100008AEH        0E001H    b        2 -> 2228
      2224    0100008B0H      0494D4EH    ; String: "NMI."
      2228    0100008B4H        0680AH    ldr      r2,[r1]
      2230    0100008B6H        06002H    str      r2,[r0]
      2232    0100008B8H        0E07FH    b        254 -> 2490
      2234    0100008BAH        046C0H    nop
      2236    0100008BCH        09800H    ldr      r0,[sp]
      2238    0100008BEH        02103H    movs     r1,#3
      2240    0100008C0H        042C8H    cmn      r0,r1
      2242    0100008C2H        0D001H    beq.n    2 -> 2248
      2244    0100008C4H        0E013H    b        38 -> 2286
      2246    0100008C6H        046C0H    nop
      msg := "hard fault"
    ELSIF code = MemMgmtFault THEN
      2248    0100008C8H        09801H    ldr      r0,[sp,#4]
      2250    0100008CAH        046C0H    nop
      2252    0100008CCH        0A100H    adr      r1,pc,#0 -> 2256
      2254    0100008CEH        0E005H    b        10 -> 2268
      2256    0100008D0H    064726168H    ; String: "hard"
      2260    0100008D4H    075616620H    ; String: " fau"
      2264    0100008D8H        0746CH    ; String: "lt.."
      2268    0100008DCH        04B38H    ldr      r3,[pc,#224] -> 2496 ; Const 0FF000000H -16777216
      2270    0100008DEH        0680AH    ldr      r2,[r1]
      2272    0100008E0H        03104H    adds     r1,#4
      2274    0100008E2H        06002H    str      r2,[r0]
      2276    0100008E4H        03004H    adds     r0,#4
      2278    0100008E6H        0401AH    ands     r2,r3
      2280    0100008E8H        0D1F9H    bne.n    -14 -> 2270
      2282    0100008EAH        0E066H    b        204 -> 2490
      2284    0100008ECH        046C0H    nop
      2286    0100008EEH        09800H    ldr      r0,[sp]
      2288    0100008F0H        02104H    movs     r1,#4
      2290    0100008F2H        042C8H    cmn      r0,r1
      2292    0100008F4H        0D001H    beq.n    2 -> 2298
      2294    0100008F6H        0E018H    b        48 -> 2346
      2296    0100008F8H        046C0H    nop
      msg := "memory management fault"
    ELSIF code = BusFault THEN
      2298    0100008FAH        09801H    ldr      r0,[sp,#4]
      2300    0100008FCH        0A100H    adr      r1,pc,#0 -> 2304
      2302    0100008FEH        0E00BH    b        22 -> 2328
      2304    010000900H    06F6D656DH    ; String: "memo"
      2308    010000904H    06D207972H    ; String: "ry m"
      2312    010000908H    067616E61H    ; String: "anag"
      2316    01000090CH    06E656D65H    ; String: "emen"
      2320    010000910H    061662074H    ; String: "t fa"
      2324    010000914H      0746C75H    ; String: "ult."
      2328    010000918H        04B29H    ldr      r3,[pc,#164] -> 2496 ; Const 0FF000000H -16777216
      2330    01000091AH        0680AH    ldr      r2,[r1]
      2332    01000091CH        03104H    adds     r1,#4
      2334    01000091EH        06002H    str      r2,[r0]
      2336    010000920H        03004H    adds     r0,#4
      2338    010000922H        0401AH    ands     r2,r3
      2340    010000924H        0D1F9H    bne.n    -14 -> 2330
      2342    010000926H        0E048H    b        144 -> 2490
      2344    010000928H        046C0H    nop
      2346    01000092AH        09800H    ldr      r0,[sp]
      2348    01000092CH        02105H    movs     r1,#5
      2350    01000092EH        042C8H    cmn      r0,r1
      2352    010000930H        0D001H    beq.n    2 -> 2358
      2354    010000932H        0E012H    b        36 -> 2394
      2356    010000934H        046C0H    nop
      msg := "bus fault"
    ELSIF code = UsageFault THEN
      2358    010000936H        09801H    ldr      r0,[sp,#4]
      2360    010000938H        0A100H    adr      r1,pc,#0 -> 2364
      2362    01000093AH        0E005H    b        10 -> 2376
      2364    01000093CH    020737562H    ; String: "bus "
      2368    010000940H    06C756166H    ; String: "faul"
      2372    010000944H        00074H    ; String: "t..."
      2376    010000948H        04B1DH    ldr      r3,[pc,#116] -> 2496 ; Const 0FF000000H -16777216
      2378    01000094AH        0680AH    ldr      r2,[r1]
      2380    01000094CH        03104H    adds     r1,#4
      2382    01000094EH        06002H    str      r2,[r0]
      2384    010000950H        03004H    adds     r0,#4
      2386    010000952H        0401AH    ands     r2,r3
      2388    010000954H        0D1F9H    bne.n    -14 -> 2378
      2390    010000956H        0E030H    b        96 -> 2490
      2392    010000958H        046C0H    nop
      2394    01000095AH        09800H    ldr      r0,[sp]
      2396    01000095CH        02106H    movs     r1,#6
      2398    01000095EH        042C8H    cmn      r0,r1
      2400    010000960H        0D001H    beq.n    2 -> 2406
      2402    010000962H        0E012H    b        36 -> 2442
      2404    010000964H        046C0H    nop
      msg := "usage fault"
    ELSE
      2406    010000966H        09801H    ldr      r0,[sp,#4]
      2408    010000968H        0A100H    adr      r1,pc,#0 -> 2412
      2410    01000096AH        0E005H    b        10 -> 2424
      2412    01000096CH    067617375H    ; String: "usag"
      2416    010000970H    061662065H    ; String: "e fa"
      2420    010000974H      0746C75H    ; String: "ult."
      2424    010000978H        04B11H    ldr      r3,[pc,#68] -> 2496 ; Const 0FF000000H -16777216
      2426    01000097AH        0680AH    ldr      r2,[r1]
      2428    01000097CH        03104H    adds     r1,#4
      2430    01000097EH        06002H    str      r2,[r0]
      2432    010000980H        03004H    adds     r0,#4
      2434    010000982H        0401AH    ands     r2,r3
      2436    010000984H        0D1F9H    bne.n    -14 -> 2426
      msg := "missing exception handler"
      2438    010000986H        0E018H    b        48 -> 2490
      2440    010000988H        046C0H    nop
    END
      2442    01000098AH        09801H    ldr      r0,[sp,#4]
      2444    01000098CH        0A100H    adr      r1,pc,#0 -> 2448
      2446    01000098EH        0E00DH    b        26 -> 2476
      2448    010000990H    07373696DH    ; String: "miss"
      2452    010000994H    020676E69H    ; String: "ing "
      2456    010000998H    065637865H    ; String: "exce"
      2460    01000099CH    06F697470H    ; String: "ptio"
      2464    0100009A0H    06168206EH    ; String: "n ha"
      2468    0100009A4H    0656C646EH    ; String: "ndle"
      2472    0100009A8H        00072H    ; String: "r..."
      2476    0100009ACH        04B04H    ldr      r3,[pc,#16] -> 2496 ; Const 0FF000000H -16777216
      2478    0100009AEH        0680AH    ldr      r2,[r1]
      2480    0100009B0H        03104H    adds     r1,#4
      2482    0100009B2H        06002H    str      r2,[r0]
      2484    0100009B4H        03004H    adds     r0,#4
      2486    0100009B6H        0401AH    ands     r2,r3
      2488    0100009B8H        0D1F9H    bne.n    -14 -> 2478
  END faultMessage;
      2490    0100009BAH        0B002H    add      sp,#8
      2492    0100009BCH        0BD00H    pop      { pc }
      2494    0100009BEH        046C0H    nop
      2496    0100009C0H    0FF000000H    ; Const 0FF000000H -16777216

  PROCEDURE Errors.errorMessage(code: INTEGER; VAR msg: String);
  BEGIN
      2500    0100009C4H        0B503H    push     { r0, r1, lr }
    IF (code >= FirstRTKcode) & (code <= LastRTKcode) THEN
      2502    0100009C6H        09800H    ldr      r0,[sp]
      2504    0100009C8H        02864H    cmp      r0,#100
      2506    0100009CAH        0DA01H    bge.n    2 -> 2512
      2508    0100009CCH        0E1ACH    b        856 -> 3368
      2510    0100009CEH        046C0H    nop
      2512    0100009D0H        09800H    ldr      r0,[sp]
      2514    0100009D2H        02875H    cmp      r0,#117
      2516    0100009D4H        0DD01H    ble.n    2 -> 2522
      2518    0100009D6H        0E1A7H    b        846 -> 3368
      2520    0100009D8H        046C0H    nop
      CASE code OF
        Trace:
      2522    0100009DAH        09800H    ldr      r0,[sp]
      2524    0100009DCH        04601H    mov      r1,r0
      2526    0100009DEH        03964H    subs     r1,#100
      2528    0100009E0H        02912H    cmp      r1,#18
      2530    0100009E2H        0DD01H    ble.n    2 -> 2536
      2532    0100009E4H        0DF04H    svc      4
      2534    0100009E6H        00050H    ; LineNo: 80
      2536    0100009E8H        00049H    lsls     r1,r1,#1
      2538    0100009EAH        046C0H    nop
      2540    0100009ECH        04A01H    ldr      r2,[pc,#4] -> 2548 ; Const 030BH 779
      2542    0100009EEH        01852H    adds     r2,r2,r1
      2544    0100009F0H        0447AH    add      r2,pc
      2546    0100009F2H        04710H    bx       r2
      2548    0100009F4H        0030BH    ; Const 030BH 779
          msg := "stack trace"
      | PreCond:
      2552    0100009F8H        09801H    ldr      r0,[sp,#4]
      2554    0100009FAH        046C0H    nop
      2556    0100009FCH        0A100H    adr      r1,pc,#0 -> 2560
      2558    0100009FEH        0E005H    b        10 -> 2572
      2560    010000A00H    063617473H    ; String: "stac"
      2564    010000A04H    07274206BH    ; String: "k tr"
      2568    010000A08H      0656361H    ; String: "ace."
      2572    010000A0CH        04B72H    ldr      r3,[pc,#456] -> 3032 ; Const 0FF000000H -16777216
      2574    010000A0EH        0680AH    ldr      r2,[r1]
      2576    010000A10H        03104H    adds     r1,#4
      2578    010000A12H        06002H    str      r2,[r0]
      2580    010000A14H        03004H    adds     r0,#4
      2582    010000A16H        0401AH    ands     r2,r3
      2584    010000A18H        0D1F9H    bne.n    -14 -> 2574
      2586    010000A1AH        0E183H    b        774 -> 3364
      2588    010000A1CH        046C0H    nop
          msg := "precondition violation"
      | PostCond:
      2590    010000A1EH        09801H    ldr      r0,[sp,#4]
      2592    010000A20H        0A100H    adr      r1,pc,#0 -> 2596
      2594    010000A22H        0E00BH    b        22 -> 2620
      2596    010000A24H    063657270H    ; String: "prec"
      2600    010000A28H    069646E6FH    ; String: "ondi"
      2604    010000A2CH    06E6F6974H    ; String: "tion"
      2608    010000A30H    06F697620H    ; String: " vio"
      2612    010000A34H    06974616CH    ; String: "lati"
      2616    010000A38H        06E6FH    ; String: "on.."
      2620    010000A3CH        04B66H    ldr      r3,[pc,#408] -> 3032 ; Const 0FF000000H -16777216
      2622    010000A3EH        0680AH    ldr      r2,[r1]
      2624    010000A40H        03104H    adds     r1,#4
      2626    010000A42H        06002H    str      r2,[r0]
      2628    010000A44H        03004H    adds     r0,#4
      2630    010000A46H        0401AH    ands     r2,r3
      2632    010000A48H        0D1F9H    bne.n    -14 -> 2622
      2634    010000A4AH        0E16BH    b        726 -> 3364
      2636    010000A4CH        046C0H    nop
          msg := "postcondition violation"
      | ConsCheck:
      2638    010000A4EH        09801H    ldr      r0,[sp,#4]
      2640    010000A50H        0A100H    adr      r1,pc,#0 -> 2644
      2642    010000A52H        0E00BH    b        22 -> 2668
      2644    010000A54H    074736F70H    ; String: "post"
      2648    010000A58H    0646E6F63H    ; String: "cond"
      2652    010000A5CH    06F697469H    ; String: "itio"
      2656    010000A60H    06976206EH    ; String: "n vi"
      2660    010000A64H    074616C6FH    ; String: "olat"
      2664    010000A68H      06E6F69H    ; String: "ion."
      2668    010000A6CH        04B5AH    ldr      r3,[pc,#360] -> 3032 ; Const 0FF000000H -16777216
      2670    010000A6EH        0680AH    ldr      r2,[r1]
      2672    010000A70H        03104H    adds     r1,#4
      2674    010000A72H        06002H    str      r2,[r0]
      2676    010000A74H        03004H    adds     r0,#4
      2678    010000A76H        0401AH    ands     r2,r3
      2680    010000A78H        0D1F9H    bne.n    -14 -> 2670
      2682    010000A7AH        0E153H    b        678 -> 3364
      2684    010000A7CH        046C0H    nop
          msg := "consistency check violation"
      | ProgError:
      2686    010000A7EH        09801H    ldr      r0,[sp,#4]
      2688    010000A80H        0A100H    adr      r1,pc,#0 -> 2692
      2690    010000A82H        0E00DH    b        26 -> 2720
      2692    010000A84H    0736E6F63H    ; String: "cons"
      2696    010000A88H    065747369H    ; String: "iste"
      2700    010000A8CH    02079636EH    ; String: "ncy "
      2704    010000A90H    063656863H    ; String: "chec"
      2708    010000A94H    06976206BH    ; String: "k vi"
      2712    010000A98H    074616C6FH    ; String: "olat"
      2716    010000A9CH      06E6F69H    ; String: "ion."
      2720    010000AA0H        04B4DH    ldr      r3,[pc,#308] -> 3032 ; Const 0FF000000H -16777216
      2722    010000AA2H        0680AH    ldr      r2,[r1]
      2724    010000AA4H        03104H    adds     r1,#4
      2726    010000AA6H        06002H    str      r2,[r0]
      2728    010000AA8H        03004H    adds     r0,#4
      2730    010000AAAH        0401AH    ands     r2,r3
      2732    010000AACH        0D1F9H    bne.n    -14 -> 2722
      2734    010000AAEH        0E139H    b        626 -> 3364
      2736    010000AB0H        046C0H    nop
          msg := "program design error"
      | BufferOverflow:
      2738    010000AB2H        09801H    ldr      r0,[sp,#4]
      2740    010000AB4H        0A100H    adr      r1,pc,#0 -> 2744
      2742    010000AB6H        0E00BH    b        22 -> 2768
      2744    010000AB8H    0676F7270H    ; String: "prog"
      2748    010000ABCH    0206D6172H    ; String: "ram "
      2752    010000AC0H    069736564H    ; String: "desi"
      2756    010000AC4H    065206E67H    ; String: "gn e"
      2760    010000AC8H    0726F7272H    ; String: "rror"
      2764    010000ACCH        00000H    ; String: "...."
      2768    010000AD0H        04B41H    ldr      r3,[pc,#260] -> 3032 ; Const 0FF000000H -16777216
      2770    010000AD2H        0680AH    ldr      r2,[r1]
      2772    010000AD4H        03104H    adds     r1,#4
      2774    010000AD6H        06002H    str      r2,[r0]
      2776    010000AD8H        03004H    adds     r0,#4
      2778    010000ADAH        0401AH    ands     r2,r3
      2780    010000ADCH        0D1F9H    bne.n    -14 -> 2770
      2782    010000ADEH        0E121H    b        578 -> 3364
      2784    010000AE0H        046C0H    nop
          msg := "buffer overflow"
      | BufferEmpty:
      2786    010000AE2H        09801H    ldr      r0,[sp,#4]
      2788    010000AE4H        0A100H    adr      r1,pc,#0 -> 2792
      2790    010000AE6H        0E007H    b        14 -> 2808
      2792    010000AE8H    066667562H    ; String: "buff"
      2796    010000AECH    06F207265H    ; String: "er o"
      2800    010000AF0H    066726576H    ; String: "verf"
      2804    010000AF4H      0776F6CH    ; String: "low."
      2808    010000AF8H        04B37H    ldr      r3,[pc,#220] -> 3032 ; Const 0FF000000H -16777216
      2810    010000AFAH        0680AH    ldr      r2,[r1]
      2812    010000AFCH        03104H    adds     r1,#4
      2814    010000AFEH        06002H    str      r2,[r0]
      2816    010000B00H        03004H    adds     r0,#4
      2818    010000B02H        0401AH    ands     r2,r3
      2820    010000B04H        0D1F9H    bne.n    -14 -> 2810
      2822    010000B06H        0E10DH    b        538 -> 3364
      2824    010000B08H        046C0H    nop
          msg := "buffer empty"
      | Timing:
      2826    010000B0AH        09801H    ldr      r0,[sp,#4]
      2828    010000B0CH        0A100H    adr      r1,pc,#0 -> 2832
      2830    010000B0EH        0E007H    b        14 -> 2848
      2832    010000B10H    066667562H    ; String: "buff"
      2836    010000B14H    065207265H    ; String: "er e"
      2840    010000B18H    07974706DH    ; String: "mpty"
      2844    010000B1CH        00000H    ; String: "...."
      2848    010000B20H        04B2DH    ldr      r3,[pc,#180] -> 3032 ; Const 0FF000000H -16777216
      2850    010000B22H        0680AH    ldr      r2,[r1]
      2852    010000B24H        03104H    adds     r1,#4
      2854    010000B26H        06002H    str      r2,[r0]
      2856    010000B28H        03004H    adds     r0,#4
      2858    010000B2AH        0401AH    ands     r2,r3
      2860    010000B2CH        0D1F9H    bne.n    -14 -> 2850
      2862    010000B2EH        0E0F9H    b        498 -> 3364
      2864    010000B30H        046C0H    nop
          msg := "timing error"
      | HeapOverflow:
      2866    010000B32H        09801H    ldr      r0,[sp,#4]
      2868    010000B34H        0A100H    adr      r1,pc,#0 -> 2872
      2870    010000B36H        0E007H    b        14 -> 2888
      2872    010000B38H    0696D6974H    ; String: "timi"
      2876    010000B3CH    06520676EH    ; String: "ng e"
      2880    010000B40H    0726F7272H    ; String: "rror"
      2884    010000B44H        00000H    ; String: "...."
      2888    010000B48H        04B23H    ldr      r3,[pc,#140] -> 3032 ; Const 0FF000000H -16777216
      2890    010000B4AH        0680AH    ldr      r2,[r1]
      2892    010000B4CH        03104H    adds     r1,#4
      2894    010000B4EH        06002H    str      r2,[r0]
      2896    010000B50H        03004H    adds     r0,#4
      2898    010000B52H        0401AH    ands     r2,r3
      2900    010000B54H        0D1F9H    bne.n    -14 -> 2890
      2902    010000B56H        0E0E5H    b        458 -> 3364
      2904    010000B58H        046C0H    nop
          msg := "heap overflow"
      | StackOverflow:
      2906    010000B5AH        09801H    ldr      r0,[sp,#4]
      2908    010000B5CH        0A100H    adr      r1,pc,#0 -> 2912
      2910    010000B5EH        0E007H    b        14 -> 2928
      2912    010000B60H    070616568H    ; String: "heap"
      2916    010000B64H    065766F20H    ; String: " ove"
      2920    010000B68H    06F6C6672H    ; String: "rflo"
      2924    010000B6CH        00077H    ; String: "w..."
      2928    010000B70H        04B19H    ldr      r3,[pc,#100] -> 3032 ; Const 0FF000000H -16777216
      2930    010000B72H        0680AH    ldr      r2,[r1]
      2932    010000B74H        03104H    adds     r1,#4
      2934    010000B76H        06002H    str      r2,[r0]
      2936    010000B78H        03004H    adds     r0,#4
      2938    010000B7AH        0401AH    ands     r2,r3
      2940    010000B7CH        0D1F9H    bne.n    -14 -> 2930
      2942    010000B7EH        0E0D1H    b        418 -> 3364
      2944    010000B80H        046C0H    nop
          msg := "stack overflow"
      | StorageOverflow:
      2946    010000B82H        09801H    ldr      r0,[sp,#4]
      2948    010000B84H        0A100H    adr      r1,pc,#0 -> 2952
      2950    010000B86H        0E007H    b        14 -> 2968
      2952    010000B88H    063617473H    ; String: "stac"
      2956    010000B8CH    0766F206BH    ; String: "k ov"
      2960    010000B90H    06C667265H    ; String: "erfl"
      2964    010000B94H        0776FH    ; String: "ow.."
      2968    010000B98H        04B0FH    ldr      r3,[pc,#60] -> 3032 ; Const 0FF000000H -16777216
      2970    010000B9AH        0680AH    ldr      r2,[r1]
      2972    010000B9CH        03104H    adds     r1,#4
      2974    010000B9EH        06002H    str      r2,[r0]
      2976    010000BA0H        03004H    adds     r0,#4
      2978    010000BA2H        0401AH    ands     r2,r3
      2980    010000BA4H        0D1F9H    bne.n    -14 -> 2970
      2982    010000BA6H        0E0BDH    b        378 -> 3364
      2984    010000BA8H        046C0H    nop
          msg := "storage overflow"
      | StorageError:
      2986    010000BAAH        09801H    ldr      r0,[sp,#4]
      2988    010000BACH        0A100H    adr      r1,pc,#0 -> 2992
      2990    010000BAEH        0E009H    b        18 -> 3012
      2992    010000BB0H    0726F7473H    ; String: "stor"
      2996    010000BB4H    020656761H    ; String: "age "
      3000    010000BB8H    07265766FH    ; String: "over"
      3004    010000BBCH    0776F6C66H    ; String: "flow"
      3008    010000BC0H        00000H    ; String: "...."
      3012    010000BC4H        04B04H    ldr      r3,[pc,#16] -> 3032 ; Const 0FF000000H -16777216
      3014    010000BC6H        0680AH    ldr      r2,[r1]
      3016    010000BC8H        03104H    adds     r1,#4
      3018    010000BCAH        06002H    str      r2,[r0]
      3020    010000BCCH        03004H    adds     r0,#4
      3022    010000BCEH        0401AH    ands     r2,r3
      3024    010000BD0H        0D1F9H    bne.n    -14 -> 3014
      3026    010000BD2H        046C0H    nop
      3028    010000BD4H    0F000F802H    bl.w     Errors.errorMessage + 536
      3032    010000BD8H    0FF000000H    ; Const 0FF000000H -16777216
      3036    010000BDCH        0E0A2H    b        324 -> 3364
      3038    010000BDEH        046C0H    nop
          msg := "storage error"
      | UsageError:
      3040    010000BE0H        09801H    ldr      r0,[sp,#4]
      3042    010000BE2H        046C0H    nop
      3044    010000BE4H        0A100H    adr      r1,pc,#0 -> 3048
      3046    010000BE6H        0E007H    b        14 -> 3064
      3048    010000BE8H    0726F7473H    ; String: "stor"
      3052    010000BECH    020656761H    ; String: "age "
      3056    010000BF0H    06F727265H    ; String: "erro"
      3060    010000BF4H        00072H    ; String: "r..."
      3064    010000BF8H        04B66H    ldr      r3,[pc,#408] -> 3476 ; Const 0FF000000H -16777216
      3066    010000BFAH        0680AH    ldr      r2,[r1]
      3068    010000BFCH        03104H    adds     r1,#4
      3070    010000BFEH        06002H    str      r2,[r0]
      3072    010000C00H        03004H    adds     r0,#4
      3074    010000C02H        0401AH    ands     r2,r3
      3076    010000C04H        0D1F9H    bne.n    -14 -> 3066
      3078    010000C06H        0E08DH    b        282 -> 3364
      3080    010000C08H        046C0H    nop
          msg := "usage error"
      | ResourceMissing:
      3082    010000C0AH        09801H    ldr      r0,[sp,#4]
      3084    010000C0CH        0A100H    adr      r1,pc,#0 -> 3088
      3086    010000C0EH        0E005H    b        10 -> 3100
      3088    010000C10H    067617375H    ; String: "usag"
      3092    010000C14H    072652065H    ; String: "e er"
      3096    010000C18H      0726F72H    ; String: "ror."
      3100    010000C1CH        04B5DH    ldr      r3,[pc,#372] -> 3476 ; Const 0FF000000H -16777216
      3102    010000C1EH        0680AH    ldr      r2,[r1]
      3104    010000C20H        03104H    adds     r1,#4
      3106    010000C22H        06002H    str      r2,[r0]
      3108    010000C24H        03004H    adds     r0,#4
      3110    010000C26H        0401AH    ands     r2,r3
      3112    010000C28H        0D1F9H    bne.n    -14 -> 3102
      3114    010000C2AH        0E07BH    b        246 -> 3364
      3116    010000C2CH        046C0H    nop
          msg := "resource missing or faulty"
      | NotSupported:
      3118    010000C2EH        09801H    ldr      r0,[sp,#4]
      3120    010000C30H        0A100H    adr      r1,pc,#0 -> 3124
      3122    010000C32H        0E00DH    b        26 -> 3152
      3124    010000C34H    06F736572H    ; String: "reso"
      3128    010000C38H    065637275H    ; String: "urce"
      3132    010000C3CH    073696D20H    ; String: " mis"
      3136    010000C40H    0676E6973H    ; String: "sing"
      3140    010000C44H    020726F20H    ; String: " or "
      3144    010000C48H    06C756166H    ; String: "faul"
      3148    010000C4CH        07974H    ; String: "ty.."
      3152    010000C50H        04B50H    ldr      r3,[pc,#320] -> 3476 ; Const 0FF000000H -16777216
      3154    010000C52H        0680AH    ldr      r2,[r1]
      3156    010000C54H        03104H    adds     r1,#4
      3158    010000C56H        06002H    str      r2,[r0]
      3160    010000C58H        03004H    adds     r0,#4
      3162    010000C5AH        0401AH    ands     r2,r3
      3164    010000C5CH        0D1F9H    bne.n    -14 -> 3154
      3166    010000C5EH        0E061H    b        194 -> 3364
      3168    010000C60H        046C0H    nop
          msg := "functionality not supported"
      | NotImplemented:
      3170    010000C62H        09801H    ldr      r0,[sp,#4]
      3172    010000C64H        0A100H    adr      r1,pc,#0 -> 3176
      3174    010000C66H        0E00DH    b        26 -> 3204
      3176    010000C68H    0636E7566H    ; String: "func"
      3180    010000C6CH    06E6F6974H    ; String: "tion"
      3184    010000C70H    074696C61H    ; String: "alit"
      3188    010000C74H    06F6E2079H    ; String: "y no"
      3192    010000C78H    075732074H    ; String: "t su"
      3196    010000C7CH    0726F7070H    ; String: "ppor"
      3200    010000C80H      0646574H    ; String: "ted."
      3204    010000C84H        04B43H    ldr      r3,[pc,#268] -> 3476 ; Const 0FF000000H -16777216
      3206    010000C86H        0680AH    ldr      r2,[r1]
      3208    010000C88H        03104H    adds     r1,#4
      3210    010000C8AH        06002H    str      r2,[r0]
      3212    010000C8CH        03004H    adds     r0,#4
      3214    010000C8EH        0401AH    ands     r2,r3
      3216    010000C90H        0D1F9H    bne.n    -14 -> 3206
      3218    010000C92H        0E047H    b        142 -> 3364
      3220    010000C94H        046C0H    nop
          msg := "functionality not (yet) implemented"
      | NumThreads:
      3222    010000C96H        09801H    ldr      r0,[sp,#4]
      3224    010000C98H        0A100H    adr      r1,pc,#0 -> 3228
      3226    010000C9AH        0E011H    b        34 -> 3264
      3228    010000C9CH    0636E7566H    ; String: "func"
      3232    010000CA0H    06E6F6974H    ; String: "tion"
      3236    010000CA4H    074696C61H    ; String: "alit"
      3240    010000CA8H    06F6E2079H    ; String: "y no"
      3244    010000CACH    079282074H    ; String: "t (y"
      3248    010000CB0H    020297465H    ; String: "et) "
      3252    010000CB4H    06C706D69H    ; String: "impl"
      3256    010000CB8H    06E656D65H    ; String: "emen"
      3260    010000CBCH      0646574H    ; String: "ted."
      3264    010000CC0H        04B34H    ldr      r3,[pc,#208] -> 3476 ; Const 0FF000000H -16777216
      3266    010000CC2H        0680AH    ldr      r2,[r1]
      3268    010000CC4H        03104H    adds     r1,#4
      3270    010000CC6H        06002H    str      r2,[r0]
      3272    010000CC8H        03004H    adds     r0,#4
      3274    010000CCAH        0401AH    ands     r2,r3
      3276    010000CCCH        0D1F9H    bne.n    -14 -> 3266
      3278    010000CCEH        0E029H    b        82 -> 3364
      3280    010000CD0H        046C0H    nop
          msg := "too many threads"
      END
      3282    010000CD2H        09801H    ldr      r0,[sp,#4]
      3284    010000CD4H        0A100H    adr      r1,pc,#0 -> 3288
      3286    010000CD6H        0E009H    b        18 -> 3308
      3288    010000CD8H    0206F6F74H    ; String: "too "
      3292    010000CDCH    0796E616DH    ; String: "many"
      3296    010000CE0H    072687420H    ; String: " thr"
      3300    010000CE4H    073646165H    ; String: "eads"
      3304    010000CE8H        00000H    ; String: "...."
      3308    010000CECH        04B29H    ldr      r3,[pc,#164] -> 3476 ; Const 0FF000000H -16777216
      3310    010000CEEH        0680AH    ldr      r2,[r1]
      3312    010000CF0H        03104H    adds     r1,#4
      3314    010000CF2H        06002H    str      r2,[r0]
      3316    010000CF4H        03004H    adds     r0,#4
      3318    010000CF6H        0401AH    ands     r2,r3
      3320    010000CF8H        0D1F9H    bne.n    -14 -> 3310
      3322    010000CFAH        0E013H    b        38 -> 3364
      3324    010000CFCH        046C0H    nop
    ELSIF (code >= FirstAstrobeCode) & (code <= LastAstrobeCode) & ~(code IN AstrobeUnused) THEN
      3326    010000CFEH        0E67BH    b        -778 -> 2552
      3328    010000D00H        0E68DH    b        -742 -> 2590
      3330    010000D02H        0E6A4H    b        -696 -> 2638
      3332    010000D04H        0E6BBH    b        -650 -> 2686
      3334    010000D06H        0E6D4H    b        -600 -> 2738
      3336    010000D08H        0E6EBH    b        -554 -> 2786
      3338    010000D0AH        0E6FEH    b        -516 -> 2826
      3340    010000D0CH        0E711H    b        -478 -> 2866
      3342    010000D0EH        0E724H    b        -440 -> 2906
      3344    010000D10H        0E737H    b        -402 -> 2946
      3346    010000D12H        0E74AH    b        -364 -> 2986
      3348    010000D14H        0E764H    b        -312 -> 3040
      3350    010000D16H        0E778H    b        -272 -> 3082
      3352    010000D18H        0E663H    b        -826 -> 2530
      3354    010000D1AH        0E788H    b        -240 -> 3118
      3356    010000D1CH        0E7A1H    b        -190 -> 3170
      3358    010000D1EH        0E7BAH    b        -140 -> 3222
      3360    010000D20H        0E7D7H    b        -82 -> 3282
      3362    010000D22H        046C0H    nop
      3364    010000D24H        0E033H    b        102 -> 3470
      3366    010000D26H        046C0H    nop
      3368    010000D28H        09800H    ldr      r0,[sp]
      3370    010000D2AH        02801H    cmp      r0,#1
      3372    010000D2CH        0DA01H    bge.n    2 -> 3378
      3374    010000D2EH        0E01CH    b        56 -> 3434
      3376    010000D30H        046C0H    nop
      3378    010000D32H        09800H    ldr      r0,[sp]
      3380    010000D34H        02819H    cmp      r0,#25
      3382    010000D36H        0DD01H    ble.n    2 -> 3388
      3384    010000D38H        0E017H    b        46 -> 3434
      3386    010000D3AH        046C0H    nop
      3388    010000D3CH        0207FH    movs     r0,#127
      3390    010000D3EH        00340H    lsls     r0,r0,#13
      3392    010000D40H        09900H    ldr      r1,[sp]
      3394    010000D42H        02201H    movs     r2,#1
      3396    010000D44H        0408AH    lsls     r2,r1
      3398    010000D46H        04210H    tst      r0,r2
      3400    010000D48H        0D001H    beq.n    2 -> 3406
      3402    010000D4AH        0E00EH    b        28 -> 3434
      3404    010000D4CH        046C0H    nop
      Error.Msg(code, msg)
      3406    010000D4EH        09800H    ldr      r0,[sp]
      3408    010000D50H        09901H    ldr      r1,[sp,#4]
    ELSE
      3410    010000D52H        04A11H    ldr      r2,[pc,#68] -> 3480 ; Global 02002FFB8H
      3412    010000D54H        06812H    ldr      r2,[r2]
      3414    010000D56H        02A00H    cmp      r2,#0
      3416    010000D58H        0D101H    bne.n    2 -> 3422
      3418    010000D5AH        0DF05H    svc      5
      3420    010000D5CH        00075H    ; LineNo: 117
      3422    010000D5EH        03201H    adds     r2,#1
      3424    010000D60H        04790H    blx      r2
      3426    010000D62H        0E000H    b        0 -> 3430
      3428    010000D64H        00075H    ; LineNo: 117
      msg := "unknown error"
      3430    010000D66H        0E012H    b        36 -> 3470
      3432    010000D68H        046C0H    nop
    END
      3434    010000D6AH        09801H    ldr      r0,[sp,#4]
      3436    010000D6CH        0A100H    adr      r1,pc,#0 -> 3440
      3438    010000D6EH        0E007H    b        14 -> 3456
      3440    010000D70H    06E6B6E75H    ; String: "unkn"
      3444    010000D74H    0206E776FH    ; String: "own "
      3448    010000D78H    06F727265H    ; String: "erro"
      3452    010000D7CH        00072H    ; String: "r..."
      3456    010000D80H        04B04H    ldr      r3,[pc,#16] -> 3476 ; Const 0FF000000H -16777216
      3458    010000D82H        0680AH    ldr      r2,[r1]
      3460    010000D84H        03104H    adds     r1,#4
      3462    010000D86H        06002H    str      r2,[r0]
      3464    010000D88H        03004H    adds     r0,#4
      3466    010000D8AH        0401AH    ands     r2,r3
      3468    010000D8CH        0D1F9H    bne.n    -14 -> 3458
  END errorMessage;
      3470    010000D8EH        0B002H    add      sp,#8
      3472    010000D90H        0BD00H    pop      { pc }
      3474    010000D92H        046C0H    nop
      3476    010000D94H    0FF000000H    ; Const 0FF000000H -16777216
      3480    010000D98H    02002FFB8H    ; Global 02002FFB8H

  PROCEDURE Errors.Msg*(code: INTEGER; VAR msg: String);
  BEGIN
      3484    010000D9CH        0B503H    push     { r0, r1, lr }
    IF code < 0 THEN
      3486    010000D9EH        09800H    ldr      r0,[sp]
      3488    010000DA0H        02800H    cmp      r0,#0
      3490    010000DA2H        0DB01H    blt.n    2 -> 3496
      3492    010000DA4H        0E008H    b        16 -> 3512
      3494    010000DA6H        046C0H    nop
      faultMessage(code, msg)
      3496    010000DA8H        09800H    ldr      r0,[sp]
      3498    010000DAAH        09901H    ldr      r1,[sp,#4]
    ELSE
      3500    010000DACH    0F7FFFD76H    bl.w     Errors.faultMessage
      3504    010000DB0H        0E000H    b        0 -> 3508
      3506    010000DB2H        0007FH    ; LineNo: 127
      errorMessage(code, msg)
      3508    010000DB4H        0E006H    b        12 -> 3524
      3510    010000DB6H        046C0H    nop
      3512    010000DB8H        09800H    ldr      r0,[sp]
      3514    010000DBAH        09901H    ldr      r1,[sp,#4]
    END
      3516    010000DBCH    0F7FFFE02H    bl.w     Errors.errorMessage
      3520    010000DC0H        0E000H    b        0 -> 3524
      3522    010000DC2H        00081H    ; LineNo: 129
  END Msg;
      3524    010000DC4H        0B002H    add      sp,#8
      3526    010000DC6H        0BD00H    pop      { pc }

  PROCEDURE Errors.GetExceptionType*(code: INTEGER; VAR msg: String);
  BEGIN
      3528    010000DC8H        0B503H    push     { r0, r1, lr }
    IF code < 0 THEN
      3530    010000DCAH        09800H    ldr      r0,[sp]
      3532    010000DCCH        02800H    cmp      r0,#0
      3534    010000DCEH        0DB01H    blt.n    2 -> 3540
      3536    010000DD0H        0E013H    b        38 -> 3578
      3538    010000DD2H        046C0H    nop
      msg := "mcu fault"
    ELSE
      3540    010000DD4H        09801H    ldr      r0,[sp,#4]
      3542    010000DD6H        046C0H    nop
      3544    010000DD8H        0A100H    adr      r1,pc,#0 -> 3548
      3546    010000DDAH        0E005H    b        10 -> 3560
      3548    010000DDCH    02075636DH    ; String: "mcu "
      3552    010000DE0H    06C756166H    ; String: "faul"
      3556    010000DE4H        00074H    ; String: "t..."
      3560    010000DE8H        04B0EH    ldr      r3,[pc,#56] -> 3620 ; Const 0FF000000H -16777216
      3562    010000DEAH        0680AH    ldr      r2,[r1]
      3564    010000DECH        03104H    adds     r1,#4
      3566    010000DEEH        06002H    str      r2,[r0]
      3568    010000DF0H        03004H    adds     r0,#4
      3570    010000DF2H        0401AH    ands     r2,r3
      3572    010000DF4H        0D1F9H    bne.n    -14 -> 3562
      msg := "run-time error"
      3574    010000DF6H        0E012H    b        36 -> 3614
      3576    010000DF8H        046C0H    nop
    END
      3578    010000DFAH        09801H    ldr      r0,[sp,#4]
      3580    010000DFCH        0A100H    adr      r1,pc,#0 -> 3584
      3582    010000DFEH        0E007H    b        14 -> 3600
      3584    010000E00H    02D6E7572H    ; String: "run-"
      3588    010000E04H    0656D6974H    ; String: "time"
      3592    010000E08H    072726520H    ; String: " err"
      3596    010000E0CH        0726FH    ; String: "or.."
      3600    010000E10H        04B04H    ldr      r3,[pc,#16] -> 3620 ; Const 0FF000000H -16777216
      3602    010000E12H        0680AH    ldr      r2,[r1]
      3604    010000E14H        03104H    adds     r1,#4
      3606    010000E16H        06002H    str      r2,[r0]
      3608    010000E18H        03004H    adds     r0,#4
      3610    010000E1AH        0401AH    ands     r2,r3
      3612    010000E1CH        0D1F9H    bne.n    -14 -> 3602
  END GetExceptionType;
      3614    010000E1EH        0B002H    add      sp,#8
      3616    010000E20H        0BD00H    pop      { pc }
      3618    010000E22H        046C0H    nop
      3620    010000E24H    0FF000000H    ; Const 0FF000000H -16777216

PROCEDURE Errors..init;
END .init;
END Errors;
      3624    010000E28H        0B500H    push     { lr }
      3626    010000E2AH        0BD00H    pop      { pc }

MODULE GPIO;
      3628    010000E2CH        00000H    ; Pad
      3632    010000E30H        0001CH    ; Type (size)
      3636    010000E34H        00000H    ; Type
      3640    010000E38H        00000H    ; Type
      3644    010000E3CH        00000H    ; Type
      3648    010000E40H        00000H    ; Type

  PROCEDURE GPIO.SetFunction*(pinNo, functionNo: INTEGER);
    VAR addr, x: INTEGER;
  BEGIN
      3652    010000E44H        0B503H    push     { r0, r1, lr }
      3654    010000E46H        0B082H    sub      sp,#8
    ASSERT(functionNo IN {F1 .. F9}, Errors. PreCond);
      3656    010000E48H        0480DH    ldr      r0,[pc,#52] -> 3712 ; Const 03FEH 1022
      3658    010000E4AH        09903H    ldr      r1,[sp,#12]
      3660    010000E4CH        02201H    movs     r2,#1
      3662    010000E4EH        0408AH    lsls     r2,r1
      3664    010000E50H        04210H    tst      r0,r2
      3666    010000E52H        0D101H    bne.n    2 -> 3672
      3668    010000E54H        0DF65H    svc      101
      3670    010000E56H        00056H    ; LineNo: 86
    addr := MCU.IO_BANK0_GPIO_CTRL + (pinNo * MCU.IO_BANK0_GPIO_Offset);
      3672    010000E58H        09802H    ldr      r0,[sp,#8]
      3674    010000E5AH        000C0H    lsls     r0,r0,#3
      3676    010000E5CH        04909H    ldr      r1,[pc,#36] -> 3716 ; Const 040014004H 1073823748
      3678    010000E5EH        01840H    adds     r0,r0,r1
      3680    010000E60H        09000H    str      r0,[sp]
    SYSTEM.GET(addr, x);
      3682    010000E62H        09800H    ldr      r0,[sp]
      3684    010000E64H        06801H    ldr      r1,[r0]
      3686    010000E66H        09101H    str      r1,[sp,#4]
    BFI(x, 4, 0, functionNo);
      3688    010000E68H        09803H    ldr      r0,[sp,#12]
      3690    010000E6AH        04669H    mov      r1,sp
      3692    010000E6CH        0684AH    ldr      r2,[r1,#4]
      3694    010000E6EH        04B06H    ldr      r3,[pc,#24] -> 3720 ; Const 0FFFFFFE0H -32
      3696    010000E70H        0401AH    ands     r2,r3
      3698    010000E72H        04302H    orrs     r2,r0
      3700    010000E74H        09201H    str      r2,[sp,#4]
    SYSTEM.PUT(addr, x)
  END SetFunction;
      3702    010000E76H        09800H    ldr      r0,[sp]
      3704    010000E78H        09901H    ldr      r1,[sp,#4]
      3706    010000E7AH        06001H    str      r1,[r0]
      3708    010000E7CH        0B004H    add      sp,#16
      3710    010000E7EH        0BD00H    pop      { pc }
      3712    010000E80H        003FEH    ; Const 03FEH 1022
      3716    010000E84H    040014004H    ; Const 040014004H 1073823748
      3720    010000E88H    0FFFFFFE0H    ; Const 0FFFFFFE0H -32

  PROCEDURE GPIO.SetInverters*(pinNo: INTEGER; mask: SET);
    VAR addr, x: INTEGER;
  BEGIN
      3724    010000E8CH        0B503H    push     { r0, r1, lr }
      3726    010000E8EH        0B082H    sub      sp,#8
    addr := MCU.IO_BANK0_GPIO_CTRL + (pinNo * MCU.IO_BANK0_GPIO_Offset);
      3728    010000E90H        09802H    ldr      r0,[sp,#8]
      3730    010000E92H        000C0H    lsls     r0,r0,#3
      3732    010000E94H        04909H    ldr      r1,[pc,#36] -> 3772 ; Const 040014004H 1073823748
      3734    010000E96H        01840H    adds     r0,r0,r1
      3736    010000E98H        09000H    str      r0,[sp]
    SYSTEM.GET(addr, x);
      3738    010000E9AH        09800H    ldr      r0,[sp]
      3740    010000E9CH        06801H    ldr      r1,[r0]
      3742    010000E9EH        09101H    str      r1,[sp,#4]
    BFI(x, 31, 5, ORD(mask));
      3744    010000EA0H        09803H    ldr      r0,[sp,#12]
      3746    010000EA2H        04669H    mov      r1,sp
      3748    010000EA4H        0684AH    ldr      r2,[r1,#4]
      3750    010000EA6H        0231FH    movs     r3,#31
      3752    010000EA8H        0401AH    ands     r2,r3
      3754    010000EAAH        00140H    lsls     r0,r0,#5
      3756    010000EACH        04302H    orrs     r2,r0
      3758    010000EAEH        09201H    str      r2,[sp,#4]
    SYSTEM.PUT(addr, x)
  END SetInverters;
      3760    010000EB0H        09800H    ldr      r0,[sp]
      3762    010000EB2H        09901H    ldr      r1,[sp,#4]
      3764    010000EB4H        06001H    str      r1,[r0]
      3766    010000EB6H        0B004H    add      sp,#16
      3768    010000EB8H        0BD00H    pop      { pc }
      3770    010000EBAH        046C0H    nop
      3772    010000EBCH    040014004H    ; Const 040014004H 1073823748

  PROCEDURE GPIO.ConfigurePad*(pinNo: INTEGER; cfg: PadCfg);
    VAR addr, x: INTEGER;
  BEGIN
      3776    010000EC0H        0B507H    push     { r0, r1, r2, lr }
      3778    010000EC2H        0B082H    sub      sp,#8
    ASSERT(cfg.outputDe IN {Disabled, Enabled}, Errors.PreCond);
      3780    010000EC4H        02003H    movs     r0,#3
      3782    010000EC6H        09903H    ldr      r1,[sp,#12]
      3784    010000EC8H        06809H    ldr      r1,[r1]
      3786    010000ECAH        02201H    movs     r2,#1
      3788    010000ECCH        0408AH    lsls     r2,r1
      3790    010000ECEH        04210H    tst      r0,r2
      3792    010000ED0H        0D101H    bne.n    2 -> 3798
      3794    010000ED2H        0DF65H    svc      101
      3796    010000ED4H        0006EH    ; LineNo: 110
    ASSERT(cfg.inputEn IN {Disabled, Enabled}, Errors.PreCond);
      3798    010000ED6H        02003H    movs     r0,#3
      3800    010000ED8H        09903H    ldr      r1,[sp,#12]
      3802    010000EDAH        06849H    ldr      r1,[r1,#4]
      3804    010000EDCH        02201H    movs     r2,#1
      3806    010000EDEH        0408AH    lsls     r2,r1
      3808    010000EE0H        04210H    tst      r0,r2
      3810    010000EE2H        0D101H    bne.n    2 -> 3816
      3812    010000EE4H        0DF65H    svc      101
      3814    010000EE6H        0006FH    ; LineNo: 111
    ASSERT(cfg.driveStrength IN {DRIVE_val_2mA .. DRIVE_val_12mA}, Errors.PreCond);
      3816    010000EE8H        0200FH    movs     r0,#15
      3818    010000EEAH        09903H    ldr      r1,[sp,#12]
      3820    010000EECH        06889H    ldr      r1,[r1,#8]
      3822    010000EEEH        02201H    movs     r2,#1
      3824    010000EF0H        0408AH    lsls     r2,r1
      3826    010000EF2H        04210H    tst      r0,r2
      3828    010000EF4H        0D101H    bne.n    2 -> 3834
      3830    010000EF6H        0DF65H    svc      101
      3832    010000EF8H        00070H    ; LineNo: 112
    ASSERT(cfg.pullupEn IN {Disabled, Enabled}, Errors.PreCond);
      3834    010000EFAH        02003H    movs     r0,#3
      3836    010000EFCH        09903H    ldr      r1,[sp,#12]
      3838    010000EFEH        068C9H    ldr      r1,[r1,#12]
      3840    010000F00H        02201H    movs     r2,#1
      3842    010000F02H        0408AH    lsls     r2,r1
      3844    010000F04H        04210H    tst      r0,r2
      3846    010000F06H        0D101H    bne.n    2 -> 3852
      3848    010000F08H        0DF65H    svc      101
      3850    010000F0AH        00071H    ; LineNo: 113
    ASSERT(cfg.pulldownEn IN {Disabled, Enabled}, Errors.PreCond);
      3852    010000F0CH        02003H    movs     r0,#3
      3854    010000F0EH        09903H    ldr      r1,[sp,#12]
      3856    010000F10H        06909H    ldr      r1,[r1,#16]
      3858    010000F12H        02201H    movs     r2,#1
      3860    010000F14H        0408AH    lsls     r2,r1
      3862    010000F16H        04210H    tst      r0,r2
      3864    010000F18H        0D101H    bne.n    2 -> 3870
      3866    010000F1AH        0DF65H    svc      101
      3868    010000F1CH        00072H    ; LineNo: 114
    ASSERT(cfg.schmittTrigEn IN {Disabled, Enabled}, Errors.PreCond);
      3870    010000F1EH        02003H    movs     r0,#3
      3872    010000F20H        09903H    ldr      r1,[sp,#12]
      3874    010000F22H        06949H    ldr      r1,[r1,#20]
      3876    010000F24H        02201H    movs     r2,#1
      3878    010000F26H        0408AH    lsls     r2,r1
      3880    010000F28H        04210H    tst      r0,r2
      3882    010000F2AH        0D101H    bne.n    2 -> 3888
      3884    010000F2CH        0DF65H    svc      101
      3886    010000F2EH        00073H    ; LineNo: 115
    ASSERT(cfg.slewRate IN {SLEWFAST_val_slow, SLEWFAST_val_fast}, Errors.PreCond);
      3888    010000F30H        02003H    movs     r0,#3
      3890    010000F32H        09903H    ldr      r1,[sp,#12]
      3892    010000F34H        06989H    ldr      r1,[r1,#24]
      3894    010000F36H        02201H    movs     r2,#1
      3896    010000F38H        0408AH    lsls     r2,r1
      3898    010000F3AH        04210H    tst      r0,r2
      3900    010000F3CH        0D101H    bne.n    2 -> 3906
      3902    010000F3EH        0DF65H    svc      101
      3904    010000F40H        00074H    ; LineNo: 116
    addr := MCU.PADS_BANK0_GPIO + (pinNo * MCU.PADS_BANK0_GPIO_Offset);
      3906    010000F42H        09802H    ldr      r0,[sp,#8]
      3908    010000F44H        00080H    lsls     r0,r0,#2
      3910    010000F46H        04917H    ldr      r1,[pc,#92] -> 4004 ; Const 04001C004H 1073856516
      3912    010000F48H        01840H    adds     r0,r0,r1
      3914    010000F4AH        09000H    str      r0,[sp]
    x := cfg.slewRate;
      3916    010000F4CH        09803H    ldr      r0,[sp,#12]
      3918    010000F4EH        06980H    ldr      r0,[r0,#24]
      3920    010000F50H        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.schmittTrigEn, BANK0_GPIO_SCHMITT);
      3922    010000F52H        09803H    ldr      r0,[sp,#12]
      3924    010000F54H        06940H    ldr      r0,[r0,#20]
      3926    010000F56H        00040H    lsls     r0,r0,#1
      3928    010000F58H        09901H    ldr      r1,[sp,#4]
      3930    010000F5AH        01808H    adds     r0,r1,r0
      3932    010000F5CH        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.pulldownEn, BANK0_GPIO_PDE);
      3934    010000F5EH        09803H    ldr      r0,[sp,#12]
      3936    010000F60H        06900H    ldr      r0,[r0,#16]
      3938    010000F62H        00080H    lsls     r0,r0,#2
      3940    010000F64H        09901H    ldr      r1,[sp,#4]
      3942    010000F66H        01808H    adds     r0,r1,r0
      3944    010000F68H        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.pullupEn, BANK0_GPIO_PUE);
      3946    010000F6AH        09803H    ldr      r0,[sp,#12]
      3948    010000F6CH        068C0H    ldr      r0,[r0,#12]
      3950    010000F6EH        000C0H    lsls     r0,r0,#3
      3952    010000F70H        09901H    ldr      r1,[sp,#4]
      3954    010000F72H        01808H    adds     r0,r1,r0
      3956    010000F74H        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.driveStrength, BANK0_GPIO_DRIVE0);
      3958    010000F76H        09803H    ldr      r0,[sp,#12]
      3960    010000F78H        06880H    ldr      r0,[r0,#8]
      3962    010000F7AH        00100H    lsls     r0,r0,#4
      3964    010000F7CH        09901H    ldr      r1,[sp,#4]
      3966    010000F7EH        01808H    adds     r0,r1,r0
      3968    010000F80H        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.inputEn, BANK0_GPIO_IE);
      3970    010000F82H        09803H    ldr      r0,[sp,#12]
      3972    010000F84H        06840H    ldr      r0,[r0,#4]
      3974    010000F86H        00180H    lsls     r0,r0,#6
      3976    010000F88H        09901H    ldr      r1,[sp,#4]
      3978    010000F8AH        01808H    adds     r0,r1,r0
      3980    010000F8CH        09001H    str      r0,[sp,#4]
    x := x + LSL(cfg.outputDe, BANK0_GPIO_OD);
      3982    010000F8EH        09803H    ldr      r0,[sp,#12]
      3984    010000F90H        06800H    ldr      r0,[r0]
      3986    010000F92H        001C0H    lsls     r0,r0,#7
      3988    010000F94H        09901H    ldr      r1,[sp,#4]
      3990    010000F96H        01808H    adds     r0,r1,r0
      3992    010000F98H        09001H    str      r0,[sp,#4]
    SYSTEM.PUT(addr, x)
  END ConfigurePad;
      3994    010000F9AH        09800H    ldr      r0,[sp]
      3996    010000F9CH        09901H    ldr      r1,[sp,#4]
      3998    010000F9EH        06001H    str      r1,[r0]
      4000    010000FA0H        0B005H    add      sp,#20
      4002    010000FA2H        0BD00H    pop      { pc }
      4004    010000FA4H    04001C004H    ; Const 04001C004H 1073856516

  PROCEDURE GPIO.GetPadBaseCfg*(VAR cfg: PadCfg);
  BEGIN
      4008    010000FA8H        0B503H    push     { r0, r1, lr }
    CLEAR(cfg);
      4010    010000FAAH        09800H    ldr      r0,[sp]
      4012    010000FACH        02100H    movs     r1,#0
      4014    010000FAEH        02207H    movs     r2,#7
      4016    010000FB0H        06001H    str      r1,[r0]
      4018    010000FB2H        03004H    adds     r0,#4
      4020    010000FB4H        03A01H    subs     r2,#1
      4022    010000FB6H        0DCFBH    bgt.n    -10 -> 4016
    cfg.inputEn := Enabled;
      4024    010000FB8H        02001H    movs     r0,#1
      4026    010000FBAH        09900H    ldr      r1,[sp]
      4028    010000FBCH        06048H    str      r0,[r1,#4]
    cfg.driveStrength := DRIVE_val_4mA;
      4030    010000FBEH        02001H    movs     r0,#1
      4032    010000FC0H        09900H    ldr      r1,[sp]
      4034    010000FC2H        06088H    str      r0,[r1,#8]
    cfg.pulldownEn := Enabled;
      4036    010000FC4H        02001H    movs     r0,#1
      4038    010000FC6H        09900H    ldr      r1,[sp]
      4040    010000FC8H        06108H    str      r0,[r1,#16]
    cfg.schmittTrigEn := Enabled
  END GetPadBaseCfg;
      4042    010000FCAH        02001H    movs     r0,#1
      4044    010000FCCH        09900H    ldr      r1,[sp]
      4046    010000FCEH        06148H    str      r0,[r1,#20]
      4048    010000FD0H        0B002H    add      sp,#8
      4050    010000FD2H        0BD00H    pop      { pc }

  PROCEDURE GPIO.DisableOutput*(pinNo: INTEGER);
    VAR addr: INTEGER;
  BEGIN
      4052    010000FD4H        0B501H    push     { r0, lr }
      4054    010000FD6H        0B081H    sub      sp,#4
    addr := MCU.PADS_BANK0_GPIO + MCU.ASET + (pinNo * MCU.PADS_BANK0_GPIO_Offset);  
      4056    010000FD8H        09801H    ldr      r0,[sp,#4]
      4058    010000FDAH        00080H    lsls     r0,r0,#2
      4060    010000FDCH        04903H    ldr      r1,[pc,#12] -> 4076 ; Const 04001E004H 1073864708
      4062    010000FDEH        01840H    adds     r0,r0,r1
      4064    010000FE0H        09000H    str      r0,[sp]
    SYSTEM.PUT(addr, {OD})
  END DisableOutput;
      4066    010000FE2H        09800H    ldr      r0,[sp]
      4068    010000FE4H        02180H    movs     r1,#128
      4070    010000FE6H        06001H    str      r1,[r0]
      4072    010000FE8H        0B002H    add      sp,#8
      4074    010000FEAH        0BD00H    pop      { pc }
      4076    010000FECH    04001E004H    ; Const 04001E004H 1073864708

  PROCEDURE GPIO.DisableInput*(pinNo: INTEGER);
    VAR addr: INTEGER;
  BEGIN
      4080    010000FF0H        0B501H    push     { r0, lr }
      4082    010000FF2H        0B081H    sub      sp,#4
    addr := MCU.PADS_BANK0_GPIO + MCU.ACLR + (pinNo * MCU.PADS_BANK0_GPIO_Offset);
      4084    010000FF4H        09801H    ldr      r0,[sp,#4]
      4086    010000FF6H        00080H    lsls     r0,r0,#2
      4088    010000FF8H        04903H    ldr      r1,[pc,#12] -> 4104 ; Const 04001F004H 1073868804
      4090    010000FFAH        01840H    adds     r0,r0,r1
      4092    010000FFCH        09000H    str      r0,[sp]
    SYSTEM.PUT(addr, {IE})
  END DisableInput;
      4094    010000FFEH        09800H    ldr      r0,[sp]
      4096    010001000H        02140H    movs     r1,#64
      4098    010001002H        06001H    str      r1,[r0]
      4100    010001004H        0B002H    add      sp,#8
      4102    010001006H        0BD00H    pop      { pc }
      4104    010001008H    04001F004H    ; Const 04001F004H 1073868804

  PROCEDURE GPIO.Set*(mask: SET);
  BEGIN
      4108    01000100CH        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OUT_SET, mask)
  END Set;
      4110    01000100EH        04802H    ldr      r0,[pc,#8] -> 4120 ; Const 0D0000014H -805306348
      4112    010001010H        09900H    ldr      r1,[sp]
      4114    010001012H        06001H    str      r1,[r0]
      4116    010001014H        0B001H    add      sp,#4
      4118    010001016H        0BD00H    pop      { pc }
      4120    010001018H    0D0000014H    ; Const 0D0000014H -805306348

  PROCEDURE GPIO.Clear*(mask: SET);
  BEGIN
      4124    01000101CH        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OUT_CLR, mask)
  END Clear;
      4126    01000101EH        04802H    ldr      r0,[pc,#8] -> 4136 ; Const 0D0000018H -805306344
      4128    010001020H        09900H    ldr      r1,[sp]
      4130    010001022H        06001H    str      r1,[r0]
      4132    010001024H        0B001H    add      sp,#4
      4134    010001026H        0BD00H    pop      { pc }
      4136    010001028H    0D0000018H    ; Const 0D0000018H -805306344

  PROCEDURE GPIO.Toggle*(mask: SET);
  BEGIN
      4140    01000102CH        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OUT_XOR, mask)
  END Toggle;
      4142    01000102EH        04802H    ldr      r0,[pc,#8] -> 4152 ; Const 0D000001CH -805306340
      4144    010001030H        09900H    ldr      r1,[sp]
      4146    010001032H        06001H    str      r1,[r0]
      4148    010001034H        0B001H    add      sp,#4
      4150    010001036H        0BD00H    pop      { pc }
      4152    010001038H    0D000001CH    ; Const 0D000001CH -805306340

  PROCEDURE GPIO.Get*(VAR value: SET);
  BEGIN
      4156    01000103CH        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.SIO_GPIO_IN, value)
  END Get;
      4158    01000103EH        04803H    ldr      r0,[pc,#12] -> 4172 ; Const 0D0000004H -805306364
      4160    010001040H        06801H    ldr      r1,[r0]
      4162    010001042H        09A00H    ldr      r2,[sp]
      4164    010001044H        06011H    str      r1,[r2]
      4166    010001046H        0B001H    add      sp,#4
      4168    010001048H        0BD00H    pop      { pc }
      4170    01000104AH        046C0H    nop
      4172    01000104CH    0D0000004H    ; Const 0D0000004H -805306364

  PROCEDURE GPIO.Put*(value: SET);
  BEGIN
      4176    010001050H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OUT, value)
  END Put;
      4178    010001052H        04802H    ldr      r0,[pc,#8] -> 4188 ; Const 0D0000010H -805306352
      4180    010001054H        09900H    ldr      r1,[sp]
      4182    010001056H        06001H    str      r1,[r0]
      4184    010001058H        0B001H    add      sp,#4
      4186    01000105AH        0BD00H    pop      { pc }
      4188    01000105CH    0D0000010H    ; Const 0D0000010H -805306352

  PROCEDURE GPIO.GetBack*(VAR value: INTEGER);
  BEGIN
      4192    010001060H        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.SIO_GPIO_OUT, value)
  END GetBack;
      4194    010001062H        04803H    ldr      r0,[pc,#12] -> 4208 ; Const 0D0000010H -805306352
      4196    010001064H        06801H    ldr      r1,[r0]
      4198    010001066H        09A00H    ldr      r2,[sp]
      4200    010001068H        06011H    str      r1,[r2]
      4202    01000106AH        0B001H    add      sp,#4
      4204    01000106CH        0BD00H    pop      { pc }
      4206    01000106EH        046C0H    nop
      4208    010001070H    0D0000010H    ; Const 0D0000010H -805306352

  PROCEDURE GPIO.Check*(mask: SET): BOOLEAN;
    VAR value: SET;
  BEGIN
      4212    010001074H        0B501H    push     { r0, lr }
      4214    010001076H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_GPIO_IN, value);
      4216    010001078H        04806H    ldr      r0,[pc,#24] -> 4244 ; Const 0D0000004H -805306364
      4218    01000107AH        06801H    ldr      r1,[r0]
      4220    01000107CH        09100H    str      r1,[sp]
    RETURN value * mask # {}
      4222    01000107EH        09800H    ldr      r0,[sp]
      4224    010001080H        09901H    ldr      r1,[sp,#4]
      4226    010001082H        04008H    ands     r0,r1
  END Check;
      4228    010001084H        02100H    movs     r1,#0
      4230    010001086H        04288H    cmp      r0,r1
      4232    010001088H        0D101H    bne.n    2 -> 4238
      4234    01000108AH        02000H    movs     r0,#0
      4236    01000108CH        0E000H    b        0 -> 4240
      4238    01000108EH        02001H    movs     r0,#1
      4240    010001090H        0B002H    add      sp,#8
      4242    010001092H        0BD00H    pop      { pc }
      4244    010001094H    0D0000004H    ; Const 0D0000004H -805306364

  PROCEDURE GPIO.OutputEnable*(mask: SET);
  BEGIN
      4248    010001098H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OE_SET, mask)
  END OutputEnable;
      4250    01000109AH        04802H    ldr      r0,[pc,#8] -> 4260 ; Const 0D0000024H -805306332
      4252    01000109CH        09900H    ldr      r1,[sp]
      4254    01000109EH        06001H    str      r1,[r0]
      4256    0100010A0H        0B001H    add      sp,#4
      4258    0100010A2H        0BD00H    pop      { pc }
      4260    0100010A4H    0D0000024H    ; Const 0D0000024H -805306332

  PROCEDURE GPIO.OutputDisable*(mask: SET);
  BEGIN
      4264    0100010A8H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OE_CLR, mask)
  END OutputDisable;
      4266    0100010AAH        04802H    ldr      r0,[pc,#8] -> 4276 ; Const 0D0000028H -805306328
      4268    0100010ACH        09900H    ldr      r1,[sp]
      4270    0100010AEH        06001H    str      r1,[r0]
      4272    0100010B0H        0B001H    add      sp,#4
      4274    0100010B2H        0BD00H    pop      { pc }
      4276    0100010B4H    0D0000028H    ; Const 0D0000028H -805306328

  PROCEDURE GPIO.OutputEnToggle*(mask: SET);
  BEGIN
      4280    0100010B8H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.SIO_GPIO_OE_XOR, mask)
  END OutputEnToggle;
      4282    0100010BAH        04802H    ldr      r0,[pc,#8] -> 4292 ; Const 0D000002CH -805306324
      4284    0100010BCH        09900H    ldr      r1,[sp]
      4286    0100010BEH        06001H    str      r1,[r0]
      4288    0100010C0H        0B001H    add      sp,#4
      4290    0100010C2H        0BD00H    pop      { pc }
      4292    0100010C4H    0D000002CH    ; Const 0D000002CH -805306324

  PROCEDURE GPIO.GetOutputEnable*(VAR value: SET);
  BEGIN
      4296    0100010C8H        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.SIO_GPIO_OE, value)
  END GetOutputEnable;
      4298    0100010CAH        04803H    ldr      r0,[pc,#12] -> 4312 ; Const 0D0000020H -805306336
      4300    0100010CCH        06801H    ldr      r1,[r0]
      4302    0100010CEH        09A00H    ldr      r2,[sp]
      4304    0100010D0H        06011H    str      r1,[r2]
      4306    0100010D2H        0B001H    add      sp,#4
      4308    0100010D4H        0BD00H    pop      { pc }
      4310    0100010D6H        046C0H    nop
      4312    0100010D8H    0D0000020H    ; Const 0D0000020H -805306336

  PROCEDURE GPIO.init;
  BEGIN
      4316    0100010DCH        0B500H    push     { lr }
    StartUp.ReleaseReset(MCU.RESETS_IO_BANK0);
      4318    0100010DEH        02005H    movs     r0,#5
      4320    0100010E0H    0F7FFF9E6H    bl.w     StartUp.ReleaseReset
      4324    0100010E4H        0E000H    b        0 -> 4328
      4326    0100010E6H        000EDH    ; LineNo: 237
    StartUp.AwaitReleaseDone(MCU.RESETS_IO_BANK0);
      4328    0100010E8H        02005H    movs     r0,#5
      4330    0100010EAH    0F7FFF9FBH    bl.w     StartUp.AwaitReleaseDone
      4334    0100010EEH        0E000H    b        0 -> 4338
      4336    0100010F0H        000EEH    ; LineNo: 238
    StartUp.ReleaseReset(MCU.RESETS_PADS_BANK0);
      4338    0100010F2H        02008H    movs     r0,#8
      4340    0100010F4H    0F7FFF9DCH    bl.w     StartUp.ReleaseReset
      4344    0100010F8H        0E000H    b        0 -> 4348
      4346    0100010FAH        000EFH    ; LineNo: 239
    StartUp.AwaitReleaseDone(MCU.RESETS_PADS_BANK0)
      4348    0100010FCH        02008H    movs     r0,#8
  END init;
      4350    0100010FEH    0F7FFF9F1H    bl.w     StartUp.AwaitReleaseDone
      4354    010001102H        0E000H    b        0 -> 4358
      4356    010001104H        000F0H    ; LineNo: 240
      4358    010001106H        0BD00H    pop      { pc }

PROCEDURE GPIO..init;
BEGIN
      4360    010001108H        0B500H    push     { lr }
  init
END .init;
END GPIO.
      4362    01000110AH    0F7FFFFE7H    bl.w     GPIO.init
      4366    01000110EH        0E000H    b        0 -> 4370
      4368    010001110H        000F4H    ; LineNo: 244
      4370    010001112H        0BD00H    pop      { pc }

MODULE Clocks;
      4372    010001114H        00000H    ; Pad

  PROCEDURE Clocks.Monitor*(which: INTEGER);
    CONST Pin = 21;
    VAR x: INTEGER;
  BEGIN
      4376    010001118H        0B501H    push     { r0, lr }
      4378    01000111AH        0B081H    sub      sp,#4
    x := 0;
      4380    01000111CH        02000H    movs     r0,#0
      4382    01000111EH        09000H    str      r0,[sp]
    BFI(x, 8, 5, which);
      4384    010001120H        09801H    ldr      r0,[sp,#4]
      4386    010001122H        04669H    mov      r1,sp
      4388    010001124H        0680AH    ldr      r2,[r1]
      4390    010001126H        04B0AH    ldr      r3,[pc,#40] -> 4432 ; Const 0FFFFFE1FH -481
      4392    010001128H        0401AH    ands     r2,r3
      4394    01000112AH        00140H    lsls     r0,r0,#5
      4396    01000112CH        04302H    orrs     r2,r0
      4398    01000112EH        09200H    str      r2,[sp]
    SYSTEM.PUT(MCU.CLK_GPOUT0_CTRL, x);
      4400    010001130H        04808H    ldr      r0,[pc,#32] -> 4436 ; Const 040008000H 1073774592
      4402    010001132H        09900H    ldr      r1,[sp]
      4404    010001134H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_GPOUT0_CTRL + MCU.ASET, {CLK_GPOUT0_CTRL_ENABLE});
      4406    010001136H        04808H    ldr      r0,[pc,#32] -> 4440 ; Const 04000A000H 1073782784
      4408    010001138H        02101H    movs     r1,#1
      4410    01000113AH        002C9H    lsls     r1,r1,#11
      4412    01000113CH        06001H    str      r1,[r0]
    GPIO.SetFunction(Pin, GPIO.Fclk)
      4414    01000113EH        02015H    movs     r0,#21
      4416    010001140H        02108H    movs     r1,#8
  END Monitor;
      4418    010001142H    0F7FFFE7FH    bl.w     GPIO.SetFunction
      4422    010001146H        0E000H    b        0 -> 4426
      4424    010001148H        0004BH    ; LineNo: 75
      4426    01000114AH        0B002H    add      sp,#8
      4428    01000114CH        0BD00H    pop      { pc }
      4430    01000114EH        046C0H    nop
      4432    010001150H    0FFFFFE1FH    ; Const 0FFFFFE1FH -481
      4436    010001154H    040008000H    ; Const 040008000H 1073774592
      4440    010001158H    04000A000H    ; Const 04000A000H 1073782784

  PROCEDURE Clocks.EnableClockWake*(en0, en1: SET);
  BEGIN
      4444    01000115CH        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(MCU.CLK_WAKE_EN0 + MCU.ASET, en0);
      4446    01000115EH        04804H    ldr      r0,[pc,#16] -> 4464 ; Const 04000A0A0H 1073782944
      4448    010001160H        09900H    ldr      r1,[sp]
      4450    010001162H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_WAKE_EN1 + MCU.ASET, en1)
  END EnableClockWake;
      4452    010001164H        04803H    ldr      r0,[pc,#12] -> 4468 ; Const 04000A0A4H 1073782948
      4454    010001166H        09901H    ldr      r1,[sp,#4]
      4456    010001168H        06001H    str      r1,[r0]
      4458    01000116AH        0B002H    add      sp,#8
      4460    01000116CH        0BD00H    pop      { pc }
      4462    01000116EH        046C0H    nop
      4464    010001170H    04000A0A0H    ; Const 04000A0A0H 1073782944
      4468    010001174H    04000A0A4H    ; Const 04000A0A4H 1073782948

  PROCEDURE Clocks.DisableClockWake*(en0, en1: SET);
  BEGIN
      4472    010001178H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(MCU.CLK_WAKE_EN0 + MCU.ACLR, en0);
      4474    01000117AH        04804H    ldr      r0,[pc,#16] -> 4492 ; Const 04000B0A0H 1073787040
      4476    01000117CH        09900H    ldr      r1,[sp]
      4478    01000117EH        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_WAKE_EN1 + MCU.ACLR, en1)
  END DisableClockWake;
      4480    010001180H        04803H    ldr      r0,[pc,#12] -> 4496 ; Const 04000B0A4H 1073787044
      4482    010001182H        09901H    ldr      r1,[sp,#4]
      4484    010001184H        06001H    str      r1,[r0]
      4486    010001186H        0B002H    add      sp,#8
      4488    010001188H        0BD00H    pop      { pc }
      4490    01000118AH        046C0H    nop
      4492    01000118CH    04000B0A0H    ; Const 04000B0A0H 1073787040
      4496    010001190H    04000B0A4H    ; Const 04000B0A4H 1073787044

  PROCEDURE Clocks.EnableClockSleep*(en0, en1: SET);
  BEGIN
      4500    010001194H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(MCU.CLK_SLEEP_EN0 + MCU.ASET, en0);
      4502    010001196H        04804H    ldr      r0,[pc,#16] -> 4520 ; Const 04000A0A8H 1073782952
      4504    010001198H        09900H    ldr      r1,[sp]
      4506    01000119AH        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_SLEEP_EN1 + MCU.ASET, en1)
  END EnableClockSleep;
      4508    01000119CH        04803H    ldr      r0,[pc,#12] -> 4524 ; Const 04000A0ACH 1073782956
      4510    01000119EH        09901H    ldr      r1,[sp,#4]
      4512    0100011A0H        06001H    str      r1,[r0]
      4514    0100011A2H        0B002H    add      sp,#8
      4516    0100011A4H        0BD00H    pop      { pc }
      4518    0100011A6H        046C0H    nop
      4520    0100011A8H    04000A0A8H    ; Const 04000A0A8H 1073782952
      4524    0100011ACH    04000A0ACH    ; Const 04000A0ACH 1073782956

  PROCEDURE Clocks.DisableClockSleep*(en0, en1: SET);
  BEGIN
      4528    0100011B0H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(MCU.CLK_SLEEP_EN0 + MCU.ACLR, en0);
      4530    0100011B2H        04804H    ldr      r0,[pc,#16] -> 4548 ; Const 04000B0A8H 1073787048
      4532    0100011B4H        09900H    ldr      r1,[sp]
      4534    0100011B6H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_SLEEP_EN1 + MCU.ACLR, en1)
  END DisableClockSleep;
      4536    0100011B8H        04803H    ldr      r0,[pc,#12] -> 4552 ; Const 04000B0ACH 1073787052
      4538    0100011BAH        09901H    ldr      r1,[sp,#4]
      4540    0100011BCH        06001H    str      r1,[r0]
      4542    0100011BEH        0B002H    add      sp,#8
      4544    0100011C0H        0BD00H    pop      { pc }
      4546    0100011C2H        046C0H    nop
      4548    0100011C4H    04000B0A8H    ; Const 04000B0A8H 1073787048
      4552    0100011C8H    04000B0ACH    ; Const 04000B0ACH 1073787052

  PROCEDURE Clocks.GetEnabled*(VAR en0, en1: SET);
  BEGIN
      4556    0100011CCH        0B503H    push     { r0, r1, lr }
    SYSTEM.GET(MCU.CLK_ENABLED0, en0);
      4558    0100011CEH        04805H    ldr      r0,[pc,#20] -> 4580 ; Const 0400080B0H 1073774768
      4560    0100011D0H        06801H    ldr      r1,[r0]
      4562    0100011D2H        09A00H    ldr      r2,[sp]
      4564    0100011D4H        06011H    str      r1,[r2]
    SYSTEM.GET(MCU.CLK_ENABLED1, en1)
  END GetEnabled;
      4566    0100011D6H        04804H    ldr      r0,[pc,#16] -> 4584 ; Const 0400080B4H 1073774772
      4568    0100011D8H        06801H    ldr      r1,[r0]
      4570    0100011DAH        09A01H    ldr      r2,[sp,#4]
      4572    0100011DCH        06011H    str      r1,[r2]
      4574    0100011DEH        0B002H    add      sp,#8
      4576    0100011E0H        0BD00H    pop      { pc }
      4578    0100011E2H        046C0H    nop
      4580    0100011E4H    0400080B0H    ; Const 0400080B0H 1073774768
      4584    0100011E8H    0400080B4H    ; Const 0400080B4H 1073774772

  PROCEDURE Clocks.startXOSC;
    VAR x: INTEGER;
  BEGIN
      4588    0100011ECH        0B500H    push     { lr }
      4590    0100011EEH        0B081H    sub      sp,#4
    StartUp.AwaitPowerOnResetDone(MCU.PSM_XOSC);
      4592    0100011F0H        02001H    movs     r0,#1
      4594    0100011F2H    0F7FFF94DH    bl.w     StartUp.AwaitPowerOnResetDone
      4598    0100011F6H        0E000H    b        0 -> 4602
      4600    0100011F8H        00076H    ; LineNo: 118
    SYSTEM.PUT(MCU.XOSC_STARTUP, 94);  
      4602    0100011FAH        0480BH    ldr      r0,[pc,#44] -> 4648 ; Const 04002400CH 1073889292
      4604    0100011FCH        0215EH    movs     r1,#94
      4606    0100011FEH        06001H    str      r1,[r0]
    SYSTEM.GET(MCU.XOSC_CTRL, x);
      4608    010001200H        0480AH    ldr      r0,[pc,#40] -> 4652 ; Const 040024000H 1073889280
      4610    010001202H        06801H    ldr      r1,[r0]
      4612    010001204H        09100H    str      r1,[sp]
    BFI(x, 23, 12, XOSC_CTRL_ENABLE);
      4614    010001206H        0480AH    ldr      r0,[pc,#40] -> 4656 ; Const 0FABH 4011
      4616    010001208H        04669H    mov      r1,sp
      4618    01000120AH        0680AH    ldr      r2,[r1]
      4620    01000120CH        04B09H    ldr      r3,[pc,#36] -> 4660 ; Const 0FF000FFFH -16773121
      4622    01000120EH        0401AH    ands     r2,r3
      4624    010001210H        00300H    lsls     r0,r0,#12
      4626    010001212H        04302H    orrs     r2,r0
      4628    010001214H        09200H    str      r2,[sp]
    SYSTEM.PUT(MCU.XOSC_CTRL, x);
      4630    010001216H        04805H    ldr      r0,[pc,#20] -> 4652 ; Const 040024000H 1073889280
      4632    010001218H        09900H    ldr      r1,[sp]
      4634    01000121AH        06001H    str      r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.XOSC_STATUS, XOSC_STATUS_STABLE)
  END startXOSC;
      4636    01000121CH        04806H    ldr      r0,[pc,#24] -> 4664 ; Const 040024004H 1073889284
      4638    01000121EH        06801H    ldr      r1,[r0]
      4640    010001220H        00009H    movs     r1,r1
      4642    010001222H        0D5FBH    bpl.n    -10 -> 4636 ldr      r0,[pc,#24] -> 4664 ; Const 040024004H 1073889284
      4644    010001224H        0B001H    add      sp,#4
      4646    010001226H        0BD00H    pop      { pc }
      4648    010001228H    04002400CH    ; Const 04002400CH 1073889292
      4652    01000122CH    040024000H    ; Const 040024000H 1073889280
      4656    010001230H        00FABH    ; Const 0FABH 4011
      4660    010001234H    0FF000FFFH    ; Const 0FF000FFFH -16773121
      4664    010001238H    040024004H    ; Const 040024004H 1073889284

  PROCEDURE Clocks.startSysPLL;
    VAR x: INTEGER;
  BEGIN
      4668    01000123CH        0B500H    push     { lr }
      4670    01000123EH        0B081H    sub      sp,#4
    StartUp.ReleaseReset(MCU.RESETS_PLL_SYS);
      4672    010001240H        0200CH    movs     r0,#12
      4674    010001242H    0F7FFF935H    bl.w     StartUp.ReleaseReset
      4678    010001246H        0E000H    b        0 -> 4682
      4680    010001248H        00086H    ; LineNo: 134
    StartUp.AwaitReleaseDone(MCU.RESETS_PLL_SYS);
      4682    01000124AH        0200CH    movs     r0,#12
      4684    01000124CH    0F7FFF94AH    bl.w     StartUp.AwaitReleaseDone
      4688    010001250H        0E000H    b        0 -> 4692
      4690    010001252H        00087H    ; LineNo: 135
    SYSTEM.PUT(MCU.PLL_SYS_FBDIV_INT, 125);
      4692    010001254H        04811H    ldr      r0,[pc,#68] -> 4764 ; Const 040028008H 1073905672
      4694    010001256H        0217DH    movs     r1,#125
      4696    010001258H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.PLL_SYS_PWR + MCU.ACLR, {PLL_SYS_PWR_VCOPD, PLL_SYS_PWR_PD});  
      4698    01000125AH        04811H    ldr      r0,[pc,#68] -> 4768 ; Const 04002B004H 1073917956
      4700    01000125CH        02121H    movs     r1,#33
      4702    01000125EH        06001H    str      r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.PLL_SYS_CS, PLL_SYS_CS_LOCK);
      4704    010001260H        04810H    ldr      r0,[pc,#64] -> 4772 ; Const 040028000H 1073905664
      4706    010001262H        06801H    ldr      r1,[r0]
      4708    010001264H        00009H    movs     r1,r1
      4710    010001266H        0D5FBH    bpl.n    -10 -> 4704 ldr      r0,[pc,#64] -> 4772 ; Const 040028000H 1073905664
    x := 0;
      4712    010001268H        02000H    movs     r0,#0
      4714    01000126AH        09000H    str      r0,[sp]
    BFI(x, 18, 16, 6);
      4716    01000126CH        02006H    movs     r0,#6
      4718    01000126EH        04669H    mov      r1,sp
      4720    010001270H        0680AH    ldr      r2,[r1]
      4722    010001272H        04B0DH    ldr      r3,[pc,#52] -> 4776 ; Const 0FFF8FFFFH -458753
      4724    010001274H        0401AH    ands     r2,r3
      4726    010001276H        00400H    lsls     r0,r0,#16
      4728    010001278H        04302H    orrs     r2,r0
      4730    01000127AH        09200H    str      r2,[sp]
    BFI(x, 14, 12, 2);
      4732    01000127CH        02002H    movs     r0,#2
      4734    01000127EH        04669H    mov      r1,sp
      4736    010001280H        0680AH    ldr      r2,[r1]
      4738    010001282H        04B0AH    ldr      r3,[pc,#40] -> 4780 ; Const 0FFFF8FFFH -28673
      4740    010001284H        0401AH    ands     r2,r3
      4742    010001286H        00300H    lsls     r0,r0,#12
      4744    010001288H        04302H    orrs     r2,r0
      4746    01000128AH        09200H    str      r2,[sp]
    SYSTEM.PUT(MCU.PLL_SYS_PRIM, x);
      4748    01000128CH        04808H    ldr      r0,[pc,#32] -> 4784 ; Const 04002800CH 1073905676
      4750    01000128EH        09900H    ldr      r1,[sp]
      4752    010001290H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.PLL_SYS_PWR + MCU.ACLR, {PLL_SYS_PWR_POSTDIVPD})
  END startSysPLL;
      4754    010001292H        04803H    ldr      r0,[pc,#12] -> 4768 ; Const 04002B004H 1073917956
      4756    010001294H        02108H    movs     r1,#8
      4758    010001296H        06001H    str      r1,[r0]
      4760    010001298H        0B001H    add      sp,#4
      4762    01000129AH        0BD00H    pop      { pc }
      4764    01000129CH    040028008H    ; Const 040028008H 1073905672
      4768    0100012A0H    04002B004H    ; Const 04002B004H 1073917956
      4772    0100012A4H    040028000H    ; Const 040028000H 1073905664
      4776    0100012A8H    0FFF8FFFFH    ; Const 0FFF8FFFFH -458753
      4780    0100012ACH    0FFFF8FFFH    ; Const 0FFFF8FFFH -28673
      4784    0100012B0H    04002800CH    ; Const 04002800CH 1073905676

  PROCEDURE Clocks.startUsbPLL;
    VAR x: INTEGER;
  BEGIN
      4788    0100012B4H        0B500H    push     { lr }
      4790    0100012B6H        0B081H    sub      sp,#4
    StartUp.ReleaseReset(MCU.RESETS_PLL_USB);
      4792    0100012B8H        0200DH    movs     r0,#13
      4794    0100012BAH    0F7FFF8F9H    bl.w     StartUp.ReleaseReset
      4798    0100012BEH        0E000H    b        0 -> 4802
      4800    0100012C0H        0009FH    ; LineNo: 159
    StartUp.AwaitReleaseDone(MCU.RESETS_PLL_USB);
      4802    0100012C2H        0200DH    movs     r0,#13
      4804    0100012C4H    0F7FFF90EH    bl.w     StartUp.AwaitReleaseDone
      4808    0100012C8H        0E000H    b        0 -> 4812
      4810    0100012CAH        000A0H    ; LineNo: 160
    SYSTEM.PUT(MCU.PLL_USB_FBDIV_INT, 64);
      4812    0100012CCH        04811H    ldr      r0,[pc,#68] -> 4884 ; Const 04002C008H 1073922056
      4814    0100012CEH        02140H    movs     r1,#64
      4816    0100012D0H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.PLL_USB_PWR + MCU.ACLR, {PLL_USB_PWR_VCOPD, PLL_USB_PWR_PD});  
      4818    0100012D2H        04811H    ldr      r0,[pc,#68] -> 4888 ; Const 04002F004H 1073934340
      4820    0100012D4H        02121H    movs     r1,#33
      4822    0100012D6H        06001H    str      r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.PLL_USB_CS, PLL_USB_CS_LOCK);
      4824    0100012D8H        04810H    ldr      r0,[pc,#64] -> 4892 ; Const 04002C000H 1073922048
      4826    0100012DAH        06801H    ldr      r1,[r0]
      4828    0100012DCH        00009H    movs     r1,r1
      4830    0100012DEH        0D5FBH    bpl.n    -10 -> 4824 ldr      r0,[pc,#64] -> 4892 ; Const 04002C000H 1073922048
    x := 0;
      4832    0100012E0H        02000H    movs     r0,#0
      4834    0100012E2H        09000H    str      r0,[sp]
    BFI(x, 18, 16, 4);
      4836    0100012E4H        02004H    movs     r0,#4
      4838    0100012E6H        04669H    mov      r1,sp
      4840    0100012E8H        0680AH    ldr      r2,[r1]
      4842    0100012EAH        04B0DH    ldr      r3,[pc,#52] -> 4896 ; Const 0FFF8FFFFH -458753
      4844    0100012ECH        0401AH    ands     r2,r3
      4846    0100012EEH        00400H    lsls     r0,r0,#16
      4848    0100012F0H        04302H    orrs     r2,r0
      4850    0100012F2H        09200H    str      r2,[sp]
    BFI(x, 14, 12, 4);
      4852    0100012F4H        02004H    movs     r0,#4
      4854    0100012F6H        04669H    mov      r1,sp
      4856    0100012F8H        0680AH    ldr      r2,[r1]
      4858    0100012FAH        04B0AH    ldr      r3,[pc,#40] -> 4900 ; Const 0FFFF8FFFH -28673
      4860    0100012FCH        0401AH    ands     r2,r3
      4862    0100012FEH        00300H    lsls     r0,r0,#12
      4864    010001300H        04302H    orrs     r2,r0
      4866    010001302H        09200H    str      r2,[sp]
    SYSTEM.PUT(MCU.PLL_USB_PRIM, x);
      4868    010001304H        04808H    ldr      r0,[pc,#32] -> 4904 ; Const 04002C00CH 1073922060
      4870    010001306H        09900H    ldr      r1,[sp]
      4872    010001308H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.PLL_USB_PWR + MCU.ACLR, {PLL_USB_PWR_POSTDIVPD})
  END startUsbPLL;
      4874    01000130AH        04803H    ldr      r0,[pc,#12] -> 4888 ; Const 04002F004H 1073934340
      4876    01000130CH        02108H    movs     r1,#8
      4878    01000130EH        06001H    str      r1,[r0]
      4880    010001310H        0B001H    add      sp,#4
      4882    010001312H        0BD00H    pop      { pc }
      4884    010001314H    04002C008H    ; Const 04002C008H 1073922056
      4888    010001318H    04002F004H    ; Const 04002F004H 1073934340
      4892    01000131CH    04002C000H    ; Const 04002C000H 1073922048
      4896    010001320H    0FFF8FFFFH    ; Const 0FFF8FFFFH -458753
      4900    010001324H    0FFFF8FFFH    ; Const 0FFFF8FFFH -28673
      4904    010001328H    04002C00CH    ; Const 04002C00CH 1073922060

  PROCEDURE Clocks.connectClocks;
    VAR x: INTEGER;
  BEGIN
      4908    01000132CH        0B500H    push     { lr }
      4910    01000132EH        0B081H    sub      sp,#4
    SYSTEM.PUT(MCU.CLK_SYS_CTRL + MCU.ASET, {0});
      4912    010001330H        04810H    ldr      r0,[pc,#64] -> 4980 ; Const 04000A03CH 1073782844
      4914    010001332H        02101H    movs     r1,#1
      4916    010001334H        06001H    str      r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.CLK_SYS_SELECTED, 1);
      4918    010001336H        04810H    ldr      r0,[pc,#64] -> 4984 ; Const 040008044H 1073774660
      4920    010001338H        06801H    ldr      r1,[r0]
      4922    01000133AH        00789H    lsls     r1,r1,#30
      4924    01000133CH        0D5FBH    bpl.n    -10 -> 4918 ldr      r0,[pc,#64] -> 4984 ; Const 040008044H 1073774660
    SYSTEM.PUT(MCU.CLK_REF_CTRL + MCU.ASET, {0});
      4926    01000133EH        0480FH    ldr      r0,[pc,#60] -> 4988 ; Const 04000A030H 1073782832
      4928    010001340H        02101H    movs     r1,#1
      4930    010001342H        06001H    str      r1,[r0]
    REPEAT UNTIL SYSTEM.BIT(MCU.CLK_REF_SELECTED, 1);
      4932    010001344H        0480EH    ldr      r0,[pc,#56] -> 4992 ; Const 040008038H 1073774648
      4934    010001346H        06801H    ldr      r1,[r0]
      4936    010001348H        00789H    lsls     r1,r1,#30
      4938    01000134AH        0D5FBH    bpl.n    -10 -> 4932 ldr      r0,[pc,#56] -> 4992 ; Const 040008038H 1073774648
    x := 0;
      4940    01000134CH        02000H    movs     r0,#0
      4942    01000134EH        09000H    str      r0,[sp]
    BFI(x, 7, 5, 2);
      4944    010001350H        02002H    movs     r0,#2
      4946    010001352H        04669H    mov      r1,sp
      4948    010001354H        0680AH    ldr      r2,[r1]
      4950    010001356H        04B0BH    ldr      r3,[pc,#44] -> 4996 ; Const 0FFFFFF1FH -225
      4952    010001358H        0401AH    ands     r2,r3
      4954    01000135AH        00140H    lsls     r0,r0,#5
      4956    01000135CH        04302H    orrs     r2,r0
      4958    01000135EH        09200H    str      r2,[sp]
    SYSTEM.PUT(MCU.CLK_PERI_CTRL, x);
      4960    010001360H        04809H    ldr      r0,[pc,#36] -> 5000 ; Const 040008048H 1073774664
      4962    010001362H        09900H    ldr      r1,[sp]
      4964    010001364H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.CLK_PERI_CTRL + MCU.ASET, {CLK_PERI_CTRL_ENABLE})
  END connectClocks;
      4966    010001366H        04809H    ldr      r0,[pc,#36] -> 5004 ; Const 04000A048H 1073782856
      4968    010001368H        02101H    movs     r1,#1
      4970    01000136AH        002C9H    lsls     r1,r1,#11
      4972    01000136CH        06001H    str      r1,[r0]
      4974    01000136EH        0B001H    add      sp,#4
      4976    010001370H        0BD00H    pop      { pc }
      4978    010001372H        046C0H    nop
      4980    010001374H    04000A03CH    ; Const 04000A03CH 1073782844
      4984    010001378H    040008044H    ; Const 040008044H 1073774660
      4988    01000137CH    04000A030H    ; Const 04000A030H 1073782832
      4992    010001380H    040008038H    ; Const 040008038H 1073774648
      4996    010001384H    0FFFFFF1FH    ; Const 0FFFFFF1FH -225
      5000    010001388H    040008048H    ; Const 040008048H 1073774664
      5004    01000138CH    04000A048H    ; Const 04000A048H 1073782856

  PROCEDURE Clocks.startTickClock;
  BEGIN
      5008    010001390H        0B500H    push     { lr }
    SYSTEM.PUT(MCU.WATCHDOG_TICK, 48);
      5010    010001392H        04804H    ldr      r0,[pc,#16] -> 5028 ; Const 04005802CH 1074102316
      5012    010001394H        02130H    movs     r1,#48
      5014    010001396H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.WATCHDOG_TICK + MCU.ASET, {MCU.WATCHDOG_TICK_EN})
  END startTickClock;
      5016    010001398H        04803H    ldr      r0,[pc,#12] -> 5032 ; Const 04005A02CH 1074110508
      5018    01000139AH        02101H    movs     r1,#1
      5020    01000139CH        00249H    lsls     r1,r1,#9
      5022    01000139EH        06001H    str      r1,[r0]
      5024    0100013A0H        0BD00H    pop      { pc }
      5026    0100013A2H        046C0H    nop
      5028    0100013A4H    04005802CH    ; Const 04005802CH 1074102316
      5032    0100013A8H    04005A02CH    ; Const 04005A02CH 1074110508

  PROCEDURE Clocks.init;
  BEGIN
      5036    0100013ACH        0B500H    push     { lr }
    startXOSC;
      5038    0100013AEH    0F7FFFF1DH    bl.w     Clocks.startXOSC
      5042    0100013B2H        0E000H    b        0 -> 5046
      5044    0100013B4H        000D6H    ; LineNo: 214
    startSysPLL;
      5046    0100013B6H    0F7FFFF41H    bl.w     Clocks.startSysPLL
      5050    0100013BAH        0E000H    b        0 -> 5054
      5052    0100013BCH        000D7H    ; LineNo: 215
    startUsbPLL;
      5054    0100013BEH    0F7FFFF79H    bl.w     Clocks.startUsbPLL
      5058    0100013C2H        0E000H    b        0 -> 5062
      5060    0100013C4H        000D8H    ; LineNo: 216
    connectClocks;
      5062    0100013C6H    0F7FFFFB1H    bl.w     Clocks.connectClocks
      5066    0100013CAH        0E000H    b        0 -> 5070
      5068    0100013CCH        000D9H    ; LineNo: 217
    startTickClock
  END init;
      5070    0100013CEH    0F7FFFFDFH    bl.w     Clocks.startTickClock
      5074    0100013D2H        0E000H    b        0 -> 5078
      5076    0100013D4H        000DAH    ; LineNo: 218
      5078    0100013D6H        0BD00H    pop      { pc }

PROCEDURE Clocks..init;
BEGIN
      5080    0100013D8H        0B500H    push     { lr }
  init
END .init;
END Clocks.
      5082    0100013DAH    0F7FFFFE7H    bl.w     Clocks.init
      5086    0100013DEH        0E000H    b        0 -> 5090
      5088    0100013E0H        000DEH    ; LineNo: 222
      5090    0100013E2H        0BD00H    pop      { pc }

MODULE MAU;
      5092    0100013E4H        00000H    ; Pad

  PROCEDURE MAU.New*(VAR p: INTEGER; T: INTEGER);
  BEGIN
      5096    0100013E8H        0B503H    push     { r0, r1, lr }
    allocate(p, T)
      5098    0100013EAH        09800H    ldr      r0,[sp]
      5100    0100013ECH        09901H    ldr      r1,[sp,#4]
  END New;
      5102    0100013EEH        04A06H    ldr      r2,[pc,#24] -> 5128 ; Global 02002FFB4H
      5104    0100013F0H        06812H    ldr      r2,[r2]
      5106    0100013F2H        02A00H    cmp      r2,#0
      5108    0100013F4H        0D101H    bne.n    2 -> 5114
      5110    0100013F6H        0DF05H    svc      5
      5112    0100013F8H        0001FH    ; LineNo: 31
      5114    0100013FAH        03201H    adds     r2,#1
      5116    0100013FCH        04790H    blx      r2
      5118    0100013FEH        0E000H    b        0 -> 5122
      5120    010001400H        0001FH    ; LineNo: 31
      5122    010001402H        0B002H    add      sp,#8
      5124    010001404H        0BD00H    pop      { pc }
      5126    010001406H        046C0H    nop
      5128    010001408H    02002FFB4H    ; Global 02002FFB4H

  PROCEDURE MAU.Dispose*(VAR p: INTEGER; T: INTEGER);
  BEGIN
      5132    01000140CH        0B503H    push     { r0, r1, lr }
    deallocate(p, T)
      5134    01000140EH        09800H    ldr      r0,[sp]
      5136    010001410H        09901H    ldr      r1,[sp,#4]
  END Dispose;
      5138    010001412H        04A06H    ldr      r2,[pc,#24] -> 5164 ; Global 02002FFB0H
      5140    010001414H        06812H    ldr      r2,[r2]
      5142    010001416H        02A00H    cmp      r2,#0
      5144    010001418H        0D101H    bne.n    2 -> 5150
      5146    01000141AH        0DF05H    svc      5
      5148    01000141CH        00025H    ; LineNo: 37
      5150    01000141EH        03201H    adds     r2,#1
      5152    010001420H        04790H    blx      r2
      5154    010001422H        0E000H    b        0 -> 5158
      5156    010001424H        00025H    ; LineNo: 37
      5158    010001426H        0B002H    add      sp,#8
      5160    010001428H        0BD00H    pop      { pc }
      5162    01000142AH        046C0H    nop
      5164    01000142CH    02002FFB0H    ; Global 02002FFB0H

  PROCEDURE MAU.SetNew*(p: Proc);
  BEGIN
      5168    010001430H        0B501H    push     { r0, lr }
    allocate := p
  END SetNew;
      5170    010001432H        09800H    ldr      r0,[sp]
      5172    010001434H        04901H    ldr      r1,[pc,#4] -> 5180 ; Global 02002FFB4H
      5174    010001436H        06008H    str      r0,[r1]
      5176    010001438H        0B001H    add      sp,#4
      5178    01000143AH        0BD00H    pop      { pc }
      5180    01000143CH    02002FFB4H    ; Global 02002FFB4H

  PROCEDURE MAU.SetDispose*(p: Proc);
  BEGIN
      5184    010001440H        0B501H    push     { r0, lr }
    deallocate := p
  END SetDispose;
      5186    010001442H        09800H    ldr      r0,[sp]
      5188    010001444H        04901H    ldr      r1,[pc,#4] -> 5196 ; Global 02002FFB0H
      5190    010001446H        06008H    str      r0,[r1]
      5192    010001448H        0B001H    add      sp,#4
      5194    01000144AH        0BD00H    pop      { pc }
      5196    01000144CH    02002FFB0H    ; Global 02002FFB0H

  PROCEDURE MAU.Allocate*(VAR p: INTEGER; typeDesc: INTEGER);
  CONST 
    SP = 13;
  VAR
    h, size, limit: INTEGER;
  BEGIN
      5200    010001450H        0B503H    push     { r0, r1, lr }
      5202    010001452H        0B083H    sub      sp,#12
    IF heapLimit = 0 THEN
      5204    010001454H        04817H    ldr      r0,[pc,#92] -> 5300 ; Global 02002FFA8H
      5206    010001456H        06800H    ldr      r0,[r0]
      5208    010001458H        02800H    cmp      r0,#0
      5210    01000145AH        0D001H    beq.n    2 -> 5216
      5212    01000145CH        0E004H    b        8 -> 5224
      5214    01000145EH        046C0H    nop
      limit := SYSTEM.REG(SP)
    ELSE
      5216    010001460H        04668H    mov      r0,sp
      5218    010001462H        09002H    str      r0,[sp,#8]
      limit := heapLimit
      5220    010001464H        0E003H    b        6 -> 5230
      5222    010001466H        046C0H    nop
    END;
      5224    010001468H        04812H    ldr      r0,[pc,#72] -> 5300 ; Global 02002FFA8H
      5226    01000146AH        06800H    ldr      r0,[r0]
      5228    01000146CH        09002H    str      r0,[sp,#8]
    SYSTEM.GET(typeDesc, size);
      5230    01000146EH        09804H    ldr      r0,[sp,#16]
      5232    010001470H        06801H    ldr      r1,[r0]
      5234    010001472H        09101H    str      r1,[sp,#4]
    h := heapTop + 4 + size;
      5236    010001474H        04810H    ldr      r0,[pc,#64] -> 5304 ; Global 02002FFACH
      5238    010001476H        06800H    ldr      r0,[r0]
      5240    010001478H        03004H    adds     r0,#4
      5242    01000147AH        09901H    ldr      r1,[sp,#4]
      5244    01000147CH        01840H    adds     r0,r0,r1
      5246    01000147EH        09000H    str      r0,[sp]
    IF h > limit THEN
      5248    010001480H        09800H    ldr      r0,[sp]
      5250    010001482H        09902H    ldr      r1,[sp,#8]
      5252    010001484H        04288H    cmp      r0,r1
      5254    010001486H        0DC01H    bgt.n    2 -> 5260
      5256    010001488H        0E005H    b        10 -> 5270
      5258    01000148AH        046C0H    nop
      p := 0
    ELSE
      5260    01000148CH        02000H    movs     r0,#0
      5262    01000148EH        09903H    ldr      r1,[sp,#12]
      5264    010001490H        06008H    str      r0,[r1]
      p := heapTop + 4;
      5266    010001492H        0E00CH    b        24 -> 5294
      5268    010001494H        046C0H    nop
      5270    010001496H        04808H    ldr      r0,[pc,#32] -> 5304 ; Global 02002FFACH
      5272    010001498H        06800H    ldr      r0,[r0]
      5274    01000149AH        03004H    adds     r0,#4
      5276    01000149CH        09903H    ldr      r1,[sp,#12]
      5278    01000149EH        06008H    str      r0,[r1]
      SYSTEM.PUT(heapTop, typeDesc);
      5280    0100014A0H        04805H    ldr      r0,[pc,#20] -> 5304 ; Global 02002FFACH
      5282    0100014A2H        06800H    ldr      r0,[r0]
      5284    0100014A4H        09904H    ldr      r1,[sp,#16]
      5286    0100014A6H        06001H    str      r1,[r0]
      heapTop := h
    END
      5288    0100014A8H        09800H    ldr      r0,[sp]
      5290    0100014AAH        04903H    ldr      r1,[pc,#12] -> 5304 ; Global 02002FFACH
      5292    0100014ACH        06008H    str      r0,[r1]
  END Allocate;
      5294    0100014AEH        0B005H    add      sp,#20
      5296    0100014B0H        0BD00H    pop      { pc }
      5298    0100014B2H        046C0H    nop
      5300    0100014B4H    02002FFA8H    ; Global 02002FFA8H
      5304    0100014B8H    02002FFACH    ; Global 02002FFACH

  PROCEDURE MAU.Deallocate*(VAR p: INTEGER; typeDesc: INTEGER);
  VAR
    h, size: INTEGER;
  BEGIN
      5308    0100014BCH        0B503H    push     { r0, r1, lr }
      5310    0100014BEH        0B082H    sub      sp,#8
    ASSERT(p # 0, 12);
      5312    0100014C0H        09802H    ldr      r0,[sp,#8]
      5314    0100014C2H        06800H    ldr      r0,[r0]
      5316    0100014C4H        02800H    cmp      r0,#0
      5318    0100014C6H        0D101H    bne.n    2 -> 5324
      5320    0100014C8H        0DF0CH    svc      12
      5322    0100014CAH        00055H    ; LineNo: 85
    SYSTEM.GET(typeDesc, size);
      5324    0100014CCH        09803H    ldr      r0,[sp,#12]
      5326    0100014CEH        06801H    ldr      r1,[r0]
      5328    0100014D0H        09101H    str      r1,[sp,#4]
    h := heapTop - size;
      5330    0100014D2H        0480AH    ldr      r0,[pc,#40] -> 5372 ; Global 02002FFACH
      5332    0100014D4H        06800H    ldr      r0,[r0]
      5334    0100014D6H        09901H    ldr      r1,[sp,#4]
      5336    0100014D8H        01A40H    subs     r0,r0,r1
      5338    0100014DAH        09000H    str      r0,[sp]
    IF h = p THEN heapTop := h - 4 END;
      5340    0100014DCH        09800H    ldr      r0,[sp]
      5342    0100014DEH        09902H    ldr      r1,[sp,#8]
      5344    0100014E0H        06809H    ldr      r1,[r1]
      5346    0100014E2H        04288H    cmp      r0,r1
      5348    0100014E4H        0D001H    beq.n    2 -> 5354
      5350    0100014E6H        0E004H    b        8 -> 5362
      5352    0100014E8H        046C0H    nop
      5354    0100014EAH        09800H    ldr      r0,[sp]
      5356    0100014ECH        03804H    subs     r0,#4
      5358    0100014EEH        04903H    ldr      r1,[pc,#12] -> 5372 ; Global 02002FFACH
      5360    0100014F0H        06008H    str      r0,[r1]
    p := 0
  END Deallocate;
      5362    0100014F2H        02000H    movs     r0,#0
      5364    0100014F4H        09902H    ldr      r1,[sp,#8]
      5366    0100014F6H        06008H    str      r0,[r1]
      5368    0100014F8H        0B004H    add      sp,#16
      5370    0100014FAH        0BD00H    pop      { pc }
      5372    0100014FCH    02002FFACH    ; Global 02002FFACH

PROCEDURE MAU..init;
BEGIN
      5376    010001500H        0B500H    push     { lr }
  SetNew(Allocate);
      5378    010001502H        046C0H    nop
      5380    010001504H        0480AH    ldr      r0,[pc,#40] -> 5424 ; Const 0FFFFFF46H -186
      5382    010001506H        04478H    add      r0,pc
      5384    010001508H    0F7FFFF92H    bl.w     MAU.SetNew
      5388    01000150CH        0E000H    b        0 -> 5392
      5390    01000150EH        0005FH    ; LineNo: 95
  SetDispose(Deallocate);
      5392    010001510H        04808H    ldr      r0,[pc,#32] -> 5428 ; Const 0FFFFFFA6H -90
      5394    010001512H        04478H    add      r0,pc
      5396    010001514H    0F7FFFF94H    bl.w     MAU.SetDispose
      5400    010001518H        0E000H    b        0 -> 5404
      5402    01000151AH        00060H    ; LineNo: 96
  heapTop := LinkOptions.HeapStart;
      5404    01000151CH        04806H    ldr      r0,[pc,#24] -> 5432 ; Global 02002FFF4H
      5406    01000151EH        06800H    ldr      r0,[r0]
      5408    010001520H        04907H    ldr      r1,[pc,#28] -> 5440 ; Global 02002FFACH
      5410    010001522H        06008H    str      r0,[r1]
  heapLimit := LinkOptions.HeapLimit
END .init;
END MAU.
      5412    010001524H        04805H    ldr      r0,[pc,#20] -> 5436 ; Global 02002FFF0H
      5414    010001526H        06800H    ldr      r0,[r0]
      5416    010001528H        04906H    ldr      r1,[pc,#24] -> 5444 ; Global 02002FFA8H
      5418    01000152AH        06008H    str      r0,[r1]
      5420    01000152CH        0BD00H    pop      { pc }
      5422    01000152EH        046C0H    nop
      5424    010001530H    0FFFFFF46H    ; Const 0FFFFFF46H -186
      5428    010001534H    0FFFFFFA6H    ; Const 0FFFFFFA6H -90
      5432    010001538H    02002FFF4H    ; Global 02002FFF4H
      5436    01000153CH    02002FFF0H    ; Global 02002FFF0H
      5440    010001540H    02002FFACH    ; Global 02002FFACH
      5444    010001544H    02002FFA8H    ; Global 02002FFA8H

MODULE Memory;
      5448    010001548H        00000H    ; Pad
      5452    01000154CH        00008H    ; Type (size)
      5456    010001550H        00000H    ; Type
      5460    010001554H        00000H    ; Type
      5464    010001558H        00000H    ; Type
      5468    01000155CH        00000H    ; Type
      5472    010001560H        00008H    ; Type (size)
      5476    010001564H        00000H    ; Type
      5480    010001568H        00000H    ; Type
      5484    01000156CH        00000H    ; Type
      5488    010001570H        00000H    ; Type
      5492    010001574H        00094H    ; Type (size)
      5496    010001578H        00000H    ; Type
      5500    01000157CH        00000H    ; Type
      5504    010001580H        00000H    ; Type
      5508    010001584H        00000H    ; Type
      5512    010001588H        00008H    ; Type (size)
      5516    01000158CH        00000H    ; Type
      5520    010001590H        00000H    ; Type
      5524    010001594H        00000H    ; Type
      5528    010001598H        00000H    ; Type

  PROCEDURE* Memory.Allocate*(VAR p: INTEGER; typeDesc: INTEGER);
    VAR cid, h, size, limit: INTEGER;
  BEGIN
      5532    01000159CH        0B503H    push     { r0, r1, lr }
      5534    01000159EH        0B084H    sub      sp,#16
    SYSTEM.GET(MCU.SIO_CPUID, cid);  
      5536    0100015A0H        04821H    ldr      r0,[pc,#132] -> 5672 ; Const 0D0000000H -805306368
      5538    0100015A2H        06801H    ldr      r1,[r0]
      5540    0100015A4H        09100H    str      r1,[sp]
    limit := heaps[cid].heapLimit;
      5542    0100015A6H        09800H    ldr      r0,[sp]
      5544    0100015A8H        04920H    ldr      r1,[pc,#128] -> 5676 ; Global 02002FF88H
      5546    0100015AAH        000C0H    lsls     r0,r0,#3
      5548    0100015ACH        01808H    adds     r0,r1,r0
      5550    0100015AEH        06800H    ldr      r0,[r0]
      5552    0100015B0H        09003H    str      r0,[sp,#12]
    IF limit = 0 THEN
      5554    0100015B2H        09803H    ldr      r0,[sp,#12]
      5556    0100015B4H        02800H    cmp      r0,#0
      5558    0100015B6H        0D001H    beq.n    2 -> 5564
      5560    0100015B8H        0E008H    b        16 -> 5580
      5562    0100015BAH        046C0H    nop
      limit := stacks[cid].stacksBottom
      5564    0100015BCH        09800H    ldr      r0,[sp]
      5566    0100015BEH        0491CH    ldr      r1,[pc,#112] -> 5680 ; Global 02002FE60H
      5568    0100015C0H        02294H    movs     r2,#148
      5570    0100015C2H        04350H    muls     r0,r2
      5572    0100015C4H        01808H    adds     r0,r1,r0
    END;
      5574    0100015C6H        02188H    movs     r1,#136
      5576    0100015C8H        05840H    ldr      r0,[r0,r1]
      5578    0100015CAH        09003H    str      r0,[sp,#12]
    SYSTEM.GET(typeDesc, size);
      5580    0100015CCH        09805H    ldr      r0,[sp,#20]
      5582    0100015CEH        06801H    ldr      r1,[r0]
      5584    0100015D0H        09102H    str      r1,[sp,#8]
    h := heaps[cid].heapTop + 4 + size;
      5586    0100015D2H        09800H    ldr      r0,[sp]
      5588    0100015D4H        04915H    ldr      r1,[pc,#84] -> 5676 ; Global 02002FF88H
      5590    0100015D6H        000C0H    lsls     r0,r0,#3
      5592    0100015D8H        01808H    adds     r0,r1,r0
      5594    0100015DAH        06840H    ldr      r0,[r0,#4]
      5596    0100015DCH        03004H    adds     r0,#4
      5598    0100015DEH        09902H    ldr      r1,[sp,#8]
      5600    0100015E0H        01840H    adds     r0,r0,r1
      5602    0100015E2H        09001H    str      r0,[sp,#4]
    IF h > limit THEN
      5604    0100015E4H        09801H    ldr      r0,[sp,#4]
      5606    0100015E6H        09903H    ldr      r1,[sp,#12]
      5608    0100015E8H        04288H    cmp      r0,r1
      5610    0100015EAH        0DC01H    bgt.n    2 -> 5616
      5612    0100015ECH        0E005H    b        10 -> 5626
      5614    0100015EEH        046C0H    nop
      p := 0
    ELSE
      5616    0100015F0H        02000H    movs     r0,#0
      5618    0100015F2H        09904H    ldr      r1,[sp,#16]
      5620    0100015F4H        06008H    str      r0,[r1]
      p := heaps[cid].heapTop + 4;
      5622    0100015F6H        0E015H    b        42 -> 5668
      5624    0100015F8H        046C0H    nop
      5626    0100015FAH        09800H    ldr      r0,[sp]
      5628    0100015FCH        0490BH    ldr      r1,[pc,#44] -> 5676 ; Global 02002FF88H
      5630    0100015FEH        000C0H    lsls     r0,r0,#3
      5632    010001600H        01808H    adds     r0,r1,r0
      5634    010001602H        06840H    ldr      r0,[r0,#4]
      5636    010001604H        03004H    adds     r0,#4
      5638    010001606H        09904H    ldr      r1,[sp,#16]
      5640    010001608H        06008H    str      r0,[r1]
      SYSTEM.PUT(heaps[cid].heapTop, typeDesc);
      5642    01000160AH        09800H    ldr      r0,[sp]
      5644    01000160CH        04907H    ldr      r1,[pc,#28] -> 5676 ; Global 02002FF88H
      5646    01000160EH        000C0H    lsls     r0,r0,#3
      5648    010001610H        01808H    adds     r0,r1,r0
      5650    010001612H        06840H    ldr      r0,[r0,#4]
      5652    010001614H        09905H    ldr      r1,[sp,#20]
      5654    010001616H        06001H    str      r1,[r0]
      heaps[cid].heapTop := h
      5656    010001618H        09800H    ldr      r0,[sp]
      5658    01000161AH        04904H    ldr      r1,[pc,#16] -> 5676 ; Global 02002FF88H
      5660    01000161CH        000C0H    lsls     r0,r0,#3
      5662    01000161EH        01808H    adds     r0,r1,r0
    END;
      5664    010001620H        09901H    ldr      r1,[sp,#4]
      5666    010001622H        06041H    str      r1,[r0,#4]
  END Allocate;
      5668    010001624H        0B006H    add      sp,#24
      5670    010001626H        0BD00H    pop      { pc }
      5672    010001628H    0D0000000H    ; Const 0D0000000H -805306368
      5676    01000162CH    02002FF88H    ; Global 02002FF88H
      5680    010001630H    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.Deallocate*(VAR p: INTEGER; typeDesc: INTEGER);
    VAR cid, h, size: INTEGER;
  BEGIN
      5684    010001634H        0B503H    push     { r0, r1, lr }
      5686    010001636H        0B083H    sub      sp,#12
    ASSERT(p # 0, 12);
      5688    010001638H        09803H    ldr      r0,[sp,#12]
      5690    01000163AH        06800H    ldr      r0,[r0]
      5692    01000163CH        02800H    cmp      r0,#0
      5694    01000163EH        0D101H    bne.n    2 -> 5700
      5696    010001640H        0DF0CH    svc      12
      5698    010001642H        00055H    ; LineNo: 85
    SYSTEM.GET(MCU.SIO_CPUID, cid);  
      5700    010001644H        04814H    ldr      r0,[pc,#80] -> 5784 ; Const 0D0000000H -805306368
      5702    010001646H        06801H    ldr      r1,[r0]
      5704    010001648H        09100H    str      r1,[sp]
    SYSTEM.GET(typeDesc, size);
      5706    01000164AH        09804H    ldr      r0,[sp,#16]
      5708    01000164CH        06801H    ldr      r1,[r0]
      5710    01000164EH        09102H    str      r1,[sp,#8]
    h := heaps[cid].heapTop - size;
      5712    010001650H        09800H    ldr      r0,[sp]
      5714    010001652H        02802H    cmp      r0,#2
      5716    010001654H        0D301H    bcc.n    2 -> 5722
      5718    010001656H        0DF01H    svc      1
      5720    010001658H        00059H    ; LineNo: 89
      5722    01000165AH        04910H    ldr      r1,[pc,#64] -> 5788 ; Global 02002FF88H
      5724    01000165CH        000C0H    lsls     r0,r0,#3
      5726    01000165EH        01808H    adds     r0,r1,r0
      5728    010001660H        06840H    ldr      r0,[r0,#4]
      5730    010001662H        09902H    ldr      r1,[sp,#8]
      5732    010001664H        01A40H    subs     r0,r0,r1
      5734    010001666H        09001H    str      r0,[sp,#4]
    IF h = p THEN heaps[cid].heapTop := h - 4 END;
      5736    010001668H        09801H    ldr      r0,[sp,#4]
      5738    01000166AH        09903H    ldr      r1,[sp,#12]
      5740    01000166CH        06809H    ldr      r1,[r1]
      5742    01000166EH        04288H    cmp      r0,r1
      5744    010001670H        0D001H    beq.n    2 -> 5750
      5746    010001672H        0E00BH    b        22 -> 5772
      5748    010001674H        046C0H    nop
      5750    010001676H        09800H    ldr      r0,[sp]
      5752    010001678H        02802H    cmp      r0,#2
      5754    01000167AH        0D301H    bcc.n    2 -> 5760
      5756    01000167CH        0DF01H    svc      1
      5758    01000167EH        0005AH    ; LineNo: 90
      5760    010001680H        04906H    ldr      r1,[pc,#24] -> 5788 ; Global 02002FF88H
      5762    010001682H        000C0H    lsls     r0,r0,#3
      5764    010001684H        01808H    adds     r0,r1,r0
      5766    010001686H        09901H    ldr      r1,[sp,#4]
      5768    010001688H        03904H    subs     r1,#4
      5770    01000168AH        06041H    str      r1,[r0,#4]
    p := 0
  END Deallocate;
      5772    01000168CH        02000H    movs     r0,#0
      5774    01000168EH        09903H    ldr      r1,[sp,#12]
      5776    010001690H        06008H    str      r0,[r1]
      5778    010001692H        0B005H    add      sp,#20
      5780    010001694H        0BD00H    pop      { pc }
      5782    010001696H        046C0H    nop
      5784    010001698H    0D0000000H    ; Const 0D0000000H -805306368
      5788    01000169CH    02002FF88H    ; Global 02002FF88H

  PROCEDURE Memory.LockHeaps*;
    CONST Core0 = 0; Core1 = 1;
  BEGIN
      5792    0100016A0H        0B500H    push     { lr }
    heaps[Core0].heapLimit := heaps[Core0].heapTop;
      5794    0100016A2H        04804H    ldr      r0,[pc,#16] -> 5812 ; Global 02002FF88H
      5796    0100016A4H        04903H    ldr      r1,[pc,#12] -> 5812 ; Global 02002FF88H
      5798    0100016A6H        06849H    ldr      r1,[r1,#4]
      5800    0100016A8H        06001H    str      r1,[r0]
    heaps[Core1].heapLimit := heaps[Core1].heapTop
      5802    0100016AAH        04802H    ldr      r0,[pc,#8] -> 5812 ; Global 02002FF88H
      5804    0100016ACH        04901H    ldr      r1,[pc,#4] -> 5812 ; Global 02002FF88H
  END LockHeaps;
      5806    0100016AEH        068C9H    ldr      r1,[r1,#12]
      5808    0100016B0H        06081H    str      r1,[r0,#8]
      5810    0100016B2H        0BD00H    pop      { pc }
      5812    0100016B4H    02002FF88H    ; Global 02002FF88H

  PROCEDURE Memory.initStackCheck(addr, limit: INTEGER);
  BEGIN
      5816    0100016B8H        0B503H    push     { r0, r1, lr }
    WHILE addr < limit DO
      5818    0100016BAH        09800H    ldr      r0,[sp]
      5820    0100016BCH        09901H    ldr      r1,[sp,#4]
      5822    0100016BEH        04288H    cmp      r0,r1
      5824    0100016C0H        0DB01H    blt.n    2 -> 5830
      5826    0100016C2H        0E008H    b        16 -> 5846
      5828    0100016C4H        046C0H    nop
      SYSTEM.PUT(addr, addr + 3);
      5830    0100016C6H        09800H    ldr      r0,[sp]
      5832    0100016C8H        03003H    adds     r0,#3
      5834    0100016CAH        09900H    ldr      r1,[sp]
      5836    0100016CCH        06008H    str      r0,[r1]
      INC(addr, 4)
    END
      5838    0100016CEH        09800H    ldr      r0,[sp]
      5840    0100016D0H        03004H    adds     r0,#4
      5842    0100016D2H        09000H    str      r0,[sp]
      5844    0100016D4H        0E7F1H    b        -30 -> 5818
  END initStackCheck;
      5846    0100016D6H        0B002H    add      sp,#8
      5848    0100016D8H        0BD00H    pop      { pc }
      5850    0100016DAH        046C0H    nop

  PROCEDURE Memory.checkStackUsage(addr, limit: INTEGER; VAR unused: INTEGER);
    VAR value: INTEGER;
  BEGIN
      5852    0100016DCH        0B507H    push     { r0, r1, r2, lr }
      5854    0100016DEH        0B081H    sub      sp,#4
    SYSTEM.GET(addr, value);
      5856    0100016E0H        09801H    ldr      r0,[sp,#4]
      5858    0100016E2H        06801H    ldr      r1,[r0]
      5860    0100016E4H        09100H    str      r1,[sp]
    unused := 0;
      5862    0100016E6H        02000H    movs     r0,#0
      5864    0100016E8H        09903H    ldr      r1,[sp,#12]
      5866    0100016EAH        06008H    str      r0,[r1]
    WHILE (value = addr + 3) & (addr < limit) DO
      5868    0100016ECH        09801H    ldr      r0,[sp,#4]
      5870    0100016EEH        03003H    adds     r0,#3
      5872    0100016F0H        09900H    ldr      r1,[sp]
      5874    0100016F2H        04281H    cmp      r1,r0
      5876    0100016F4H        0D001H    beq.n    2 -> 5882
      5878    0100016F6H        0E011H    b        34 -> 5916
      5880    0100016F8H        046C0H    nop
      5882    0100016FAH        09801H    ldr      r0,[sp,#4]
      5884    0100016FCH        09902H    ldr      r1,[sp,#8]
      5886    0100016FEH        04288H    cmp      r0,r1
      5888    010001700H        0DB01H    blt.n    2 -> 5894
      5890    010001702H        0E00BH    b        22 -> 5916
      5892    010001704H        046C0H    nop
      INC(addr, 4); INC(unused, 4);
      5894    010001706H        09801H    ldr      r0,[sp,#4]
      5896    010001708H        03004H    adds     r0,#4
      5898    01000170AH        09001H    str      r0,[sp,#4]
      5900    01000170CH        09803H    ldr      r0,[sp,#12]
      5902    01000170EH        06801H    ldr      r1,[r0]
      5904    010001710H        03104H    adds     r1,#4
      5906    010001712H        06001H    str      r1,[r0]
      SYSTEM.GET(addr, value)
    END
      5908    010001714H        09801H    ldr      r0,[sp,#4]
      5910    010001716H        06801H    ldr      r1,[r0]
      5912    010001718H        09100H    str      r1,[sp]
      5914    01000171AH        0E7E7H    b        -50 -> 5868
  END checkStackUsage;
      5916    01000171CH        0B004H    add      sp,#16
      5918    01000171EH        0BD00H    pop      { pc }

  PROCEDURE Memory.CheckLoopStackUsage*(VAR size, used: INTEGER);
    VAR cid, addr, limit, unused: INTEGER;
  BEGIN
      5920    010001720H        0B503H    push     { r0, r1, lr }
      5922    010001722H        0B084H    sub      sp,#16
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      5924    010001724H        04817H    ldr      r0,[pc,#92] -> 6020 ; Const 0D0000000H -805306368
      5926    010001726H        06801H    ldr      r1,[r0]
      5928    010001728H        09100H    str      r1,[sp]
    addr := stacks[cid].loopStack.addr;
      5930    01000172AH        09800H    ldr      r0,[sp]
      5932    01000172CH        02802H    cmp      r0,#2
      5934    01000172EH        0D301H    bcc.n    2 -> 5940
      5936    010001730H        0DF01H    svc      1
      5938    010001732H        00081H    ; LineNo: 129
      5940    010001734H        04914H    ldr      r1,[pc,#80] -> 6024 ; Global 02002FE60H
      5942    010001736H        02294H    movs     r2,#148
      5944    010001738H        04350H    muls     r0,r2
      5946    01000173AH        01808H    adds     r0,r1,r0
      5948    01000173CH        02180H    movs     r1,#128
      5950    01000173EH        05840H    ldr      r0,[r0,r1]
      5952    010001740H        09001H    str      r0,[sp,#4]
    size := stacks[cid].loopStack.size;
      5954    010001742H        09800H    ldr      r0,[sp]
      5956    010001744H        02802H    cmp      r0,#2
      5958    010001746H        0D301H    bcc.n    2 -> 5964
      5960    010001748H        0DF01H    svc      1
      5962    01000174AH        00082H    ; LineNo: 130
      5964    01000174CH        0490EH    ldr      r1,[pc,#56] -> 6024 ; Global 02002FE60H
      5966    01000174EH        02294H    movs     r2,#148
      5968    010001750H        04350H    muls     r0,r2
      5970    010001752H        01808H    adds     r0,r1,r0
      5972    010001754H        02184H    movs     r1,#132
      5974    010001756H        05840H    ldr      r0,[r0,r1]
      5976    010001758H        09904H    ldr      r1,[sp,#16]
      5978    01000175AH        06008H    str      r0,[r1]
    limit := addr + size;
      5980    01000175CH        09801H    ldr      r0,[sp,#4]
      5982    01000175EH        09904H    ldr      r1,[sp,#16]
      5984    010001760H        06809H    ldr      r1,[r1]
      5986    010001762H        01840H    adds     r0,r0,r1
      5988    010001764H        09002H    str      r0,[sp,#8]
    checkStackUsage(addr, limit, unused);
      5990    010001766H        09801H    ldr      r0,[sp,#4]
      5992    010001768H        09902H    ldr      r1,[sp,#8]
      5994    01000176AH        0AA03H    add      r2,sp,#12
      5996    01000176CH    0F7FFFFB6H    bl.w     Memory.checkStackUsage
      6000    010001770H        0E000H    b        0 -> 6004
      6002    010001772H        00084H    ; LineNo: 132
    used := size - unused
  END CheckLoopStackUsage;
      6004    010001774H        09804H    ldr      r0,[sp,#16]
      6006    010001776H        06800H    ldr      r0,[r0]
      6008    010001778H        09903H    ldr      r1,[sp,#12]
      6010    01000177AH        01A40H    subs     r0,r0,r1
      6012    01000177CH        09905H    ldr      r1,[sp,#20]
      6014    01000177EH        06008H    str      r0,[r1]
      6016    010001780H        0B006H    add      sp,#24
      6018    010001782H        0BD00H    pop      { pc }
      6020    010001784H    0D0000000H    ; Const 0D0000000H -805306368
      6024    010001788H    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.CheckThreadStackUsage*(id: INTEGER; VAR size, used: INTEGER);
    VAR cid, addr, limit, unused: INTEGER;
  BEGIN
      6028    01000178CH        0B507H    push     { r0, r1, r2, lr }
      6030    01000178EH        0B084H    sub      sp,#16
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      6032    010001790H        0481DH    ldr      r0,[pc,#116] -> 6152 ; Const 0D0000000H -805306368
      6034    010001792H        06801H    ldr      r1,[r0]
      6036    010001794H        09100H    str      r1,[sp]
    addr := stacks[cid].threadStacks[id].addr;
      6038    010001796H        09800H    ldr      r0,[sp]
      6040    010001798H        02802H    cmp      r0,#2
      6042    01000179AH        0D301H    bcc.n    2 -> 6048
      6044    01000179CH        0DF01H    svc      1
      6046    01000179EH        0008DH    ; LineNo: 141
      6048    0100017A0H        0491AH    ldr      r1,[pc,#104] -> 6156 ; Global 02002FE60H
      6050    0100017A2H        02294H    movs     r2,#148
      6052    0100017A4H        04350H    muls     r0,r2
      6054    0100017A6H        01808H    adds     r0,r1,r0
      6056    0100017A8H        09904H    ldr      r1,[sp,#16]
      6058    0100017AAH        02910H    cmp      r1,#16
      6060    0100017ACH        0D301H    bcc.n    2 -> 6066
      6062    0100017AEH        0DF01H    svc      1
      6064    0100017B0H        0008DH    ; LineNo: 141
      6066    0100017B2H        000C9H    lsls     r1,r1,#3
      6068    0100017B4H        01840H    adds     r0,r0,r1
      6070    0100017B6H        06800H    ldr      r0,[r0]
      6072    0100017B8H        09001H    str      r0,[sp,#4]
    size := stacks[cid].threadStacks[id].size;
      6074    0100017BAH        09800H    ldr      r0,[sp]
      6076    0100017BCH        02802H    cmp      r0,#2
      6078    0100017BEH        0D301H    bcc.n    2 -> 6084
      6080    0100017C0H        0DF01H    svc      1
      6082    0100017C2H        0008EH    ; LineNo: 142
      6084    0100017C4H        04911H    ldr      r1,[pc,#68] -> 6156 ; Global 02002FE60H
      6086    0100017C6H        02294H    movs     r2,#148
      6088    0100017C8H        04350H    muls     r0,r2
      6090    0100017CAH        01808H    adds     r0,r1,r0
      6092    0100017CCH        09904H    ldr      r1,[sp,#16]
      6094    0100017CEH        02910H    cmp      r1,#16
      6096    0100017D0H        0D301H    bcc.n    2 -> 6102
      6098    0100017D2H        0DF01H    svc      1
      6100    0100017D4H        0008EH    ; LineNo: 142
      6102    0100017D6H        000C9H    lsls     r1,r1,#3
      6104    0100017D8H        01840H    adds     r0,r0,r1
      6106    0100017DAH        06840H    ldr      r0,[r0,#4]
      6108    0100017DCH        09905H    ldr      r1,[sp,#20]
      6110    0100017DEH        06008H    str      r0,[r1]
    limit := addr + size;
      6112    0100017E0H        09801H    ldr      r0,[sp,#4]
      6114    0100017E2H        09905H    ldr      r1,[sp,#20]
      6116    0100017E4H        06809H    ldr      r1,[r1]
      6118    0100017E6H        01840H    adds     r0,r0,r1
      6120    0100017E8H        09002H    str      r0,[sp,#8]
    checkStackUsage(addr, limit, unused);
      6122    0100017EAH        09801H    ldr      r0,[sp,#4]
      6124    0100017ECH        09902H    ldr      r1,[sp,#8]
      6126    0100017EEH        0AA03H    add      r2,sp,#12
      6128    0100017F0H    0F7FFFF74H    bl.w     Memory.checkStackUsage
      6132    0100017F4H        0E000H    b        0 -> 6136
      6134    0100017F6H        00090H    ; LineNo: 144
    used := size - unused
  END CheckThreadStackUsage;
      6136    0100017F8H        09805H    ldr      r0,[sp,#20]
      6138    0100017FAH        06800H    ldr      r0,[r0]
      6140    0100017FCH        09903H    ldr      r1,[sp,#12]
      6142    0100017FEH        01A40H    subs     r0,r0,r1
      6144    010001800H        09906H    ldr      r1,[sp,#24]
      6146    010001802H        06008H    str      r0,[r1]
      6148    010001804H        0B007H    add      sp,#28
      6150    010001806H        0BD00H    pop      { pc }
      6152    010001808H    0D0000000H    ; Const 0D0000000H -805306368
      6156    01000180CH    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.allocStack(VAR stkAddr: INTEGER; cid, stkSize: INTEGER);
    VAR limit: INTEGER;
  BEGIN
      6160    010001810H        0B507H    push     { r0, r1, r2, lr }
      6162    010001812H        0B081H    sub      sp,#4
    limit := heaps[cid].heapLimit;
      6164    010001814H        09802H    ldr      r0,[sp,#8]
      6166    010001816H        02802H    cmp      r0,#2
      6168    010001818H        0D301H    bcc.n    2 -> 6174
      6170    01000181AH        0DF01H    svc      1
      6172    01000181CH        00098H    ; LineNo: 152
      6174    01000181EH        04924H    ldr      r1,[pc,#144] -> 6320 ; Global 02002FF88H
      6176    010001820H        000C0H    lsls     r0,r0,#3
      6178    010001822H        01808H    adds     r0,r1,r0
      6180    010001824H        06800H    ldr      r0,[r0]
      6182    010001826H        09000H    str      r0,[sp]
    IF limit = 0 THEN
      6184    010001828H        09800H    ldr      r0,[sp]
      6186    01000182AH        02800H    cmp      r0,#0
      6188    01000182CH        0D001H    beq.n    2 -> 6194
      6190    01000182EH        0E00AH    b        20 -> 6214
      6192    010001830H        046C0H    nop
      limit := heaps[cid].heapTop
      6194    010001832H        09802H    ldr      r0,[sp,#8]
      6196    010001834H        02802H    cmp      r0,#2
      6198    010001836H        0D301H    bcc.n    2 -> 6204
      6200    010001838H        0DF01H    svc      1
      6202    01000183AH        0009AH    ; LineNo: 154
      6204    01000183CH        0491CH    ldr      r1,[pc,#112] -> 6320 ; Global 02002FF88H
      6206    01000183EH        000C0H    lsls     r0,r0,#3
      6208    010001840H        01808H    adds     r0,r1,r0
    END;
      6210    010001842H        06840H    ldr      r0,[r0,#4]
      6212    010001844H        09000H    str      r0,[sp]
    IF stacks[cid].stacksBottom - stkSize > limit THEN
      6214    010001846H        09802H    ldr      r0,[sp,#8]
      6216    010001848H        02802H    cmp      r0,#2
      6218    01000184AH        0D301H    bcc.n    2 -> 6224
      6220    01000184CH        0DF01H    svc      1
      6222    01000184EH        0009CH    ; LineNo: 156
      6224    010001850H        04918H    ldr      r1,[pc,#96] -> 6324 ; Global 02002FE60H
      6226    010001852H        02294H    movs     r2,#148
      6228    010001854H        04350H    muls     r0,r2
      6230    010001856H        01808H    adds     r0,r1,r0
      6232    010001858H        02188H    movs     r1,#136
      6234    01000185AH        05840H    ldr      r0,[r0,r1]
      6236    01000185CH        09903H    ldr      r1,[sp,#12]
      6238    01000185EH        01A40H    subs     r0,r0,r1
      6240    010001860H        09900H    ldr      r1,[sp]
      6242    010001862H        04288H    cmp      r0,r1
      6244    010001864H        0DC01H    bgt.n    2 -> 6250
      6246    010001866H        0E01DH    b        58 -> 6308
      6248    010001868H        046C0H    nop
      DEC(stacks[cid].stacksBottom, stkSize);
      6250    01000186AH        09802H    ldr      r0,[sp,#8]
      6252    01000186CH        02802H    cmp      r0,#2
      6254    01000186EH        0D301H    bcc.n    2 -> 6260
      6256    010001870H        0DF01H    svc      1
      6258    010001872H        0009DH    ; LineNo: 157
      6260    010001874H        0490FH    ldr      r1,[pc,#60] -> 6324 ; Global 02002FE60H
      6262    010001876H        02294H    movs     r2,#148
      6264    010001878H        04350H    muls     r0,r2
      6266    01000187AH        01808H    adds     r0,r1,r0
      6268    01000187CH        09903H    ldr      r1,[sp,#12]
      6270    01000187EH        03088H    adds     r0,#136
      6272    010001880H        06802H    ldr      r2,[r0]
      6274    010001882H        01A52H    subs     r2,r2,r1
      6276    010001884H        06002H    str      r2,[r0]
      stkAddr := stacks[cid].stacksBottom
      6278    010001886H        09802H    ldr      r0,[sp,#8]
      6280    010001888H        02802H    cmp      r0,#2
      6282    01000188AH        0D301H    bcc.n    2 -> 6288
      6284    01000188CH        0DF01H    svc      1
      6286    01000188EH        0009EH    ; LineNo: 158
      6288    010001890H        04908H    ldr      r1,[pc,#32] -> 6324 ; Global 02002FE60H
      6290    010001892H        02294H    movs     r2,#148
      6292    010001894H        04350H    muls     r0,r2
      6294    010001896H        01808H    adds     r0,r1,r0
    ELSE
      6296    010001898H        02188H    movs     r1,#136
      6298    01000189AH        05840H    ldr      r0,[r0,r1]
      6300    01000189CH        09901H    ldr      r1,[sp,#4]
      6302    01000189EH        06008H    str      r0,[r1]
      stkAddr := 0
      6304    0100018A0H        0E003H    b        6 -> 6314
      6306    0100018A2H        046C0H    nop
    END
      6308    0100018A4H        02000H    movs     r0,#0
      6310    0100018A6H        09901H    ldr      r1,[sp,#4]
      6312    0100018A8H        06008H    str      r0,[r1]
  END allocStack;
      6314    0100018AAH        0B004H    add      sp,#16
      6316    0100018ACH        0BD00H    pop      { pc }
      6318    0100018AEH        046C0H    nop
      6320    0100018B0H    02002FF88H    ; Global 02002FF88H
      6324    0100018B4H    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.AllocThreadStack*(VAR stkAddr: INTEGER; id, stkSize: INTEGER);
    VAR cid: INTEGER;
  BEGIN
      6328    0100018B8H        0B507H    push     { r0, r1, r2, lr }
      6330    0100018BAH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      6332    0100018BCH        04828H    ldr      r0,[pc,#160] -> 6496 ; Const 0D0000000H -805306368
      6334    0100018BEH        06801H    ldr      r1,[r0]
      6336    0100018C0H        09100H    str      r1,[sp]
    allocStack(stkAddr, cid, stkSize);
      6338    0100018C2H        09801H    ldr      r0,[sp,#4]
      6340    0100018C4H        09900H    ldr      r1,[sp]
      6342    0100018C6H        09A03H    ldr      r2,[sp,#12]
      6344    0100018C8H    0F7FFFFA2H    bl.w     Memory.allocStack
      6348    0100018CCH        0E000H    b        0 -> 6352
      6350    0100018CEH        000A9H    ; LineNo: 169
    IF stkAddr # 0 THEN
      6352    0100018D0H        09801H    ldr      r0,[sp,#4]
      6354    0100018D2H        06800H    ldr      r0,[r0]
      6356    0100018D4H        02800H    cmp      r0,#0
      6358    0100018D6H        0D101H    bne.n    2 -> 6364
      6360    0100018D8H        0E03FH    b        126 -> 6490
      6362    0100018DAH        046C0H    nop
      stacks[cid].threadStacks[id].addr := stkAddr;
      6364    0100018DCH        09800H    ldr      r0,[sp]
      6366    0100018DEH        02802H    cmp      r0,#2
      6368    0100018E0H        0D301H    bcc.n    2 -> 6374
      6370    0100018E2H        0DF01H    svc      1
      6372    0100018E4H        000ABH    ; LineNo: 171
      6374    0100018E6H        0491FH    ldr      r1,[pc,#124] -> 6500 ; Global 02002FE60H
      6376    0100018E8H        02294H    movs     r2,#148
      6378    0100018EAH        04350H    muls     r0,r2
      6380    0100018ECH        01808H    adds     r0,r1,r0
      6382    0100018EEH        09902H    ldr      r1,[sp,#8]
      6384    0100018F0H        02910H    cmp      r1,#16
      6386    0100018F2H        0D301H    bcc.n    2 -> 6392
      6388    0100018F4H        0DF01H    svc      1
      6390    0100018F6H        000ABH    ; LineNo: 171
      6392    0100018F8H        000C9H    lsls     r1,r1,#3
      6394    0100018FAH        01840H    adds     r0,r0,r1
      6396    0100018FCH        09901H    ldr      r1,[sp,#4]
      6398    0100018FEH        06809H    ldr      r1,[r1]
      6400    010001900H        06001H    str      r1,[r0]
      stacks[cid].threadStacks[id].size := stkSize;
      6402    010001902H        09800H    ldr      r0,[sp]
      6404    010001904H        02802H    cmp      r0,#2
      6406    010001906H        0D301H    bcc.n    2 -> 6412
      6408    010001908H        0DF01H    svc      1
      6410    01000190AH        000ACH    ; LineNo: 172
      6412    01000190CH        04915H    ldr      r1,[pc,#84] -> 6500 ; Global 02002FE60H
      6414    01000190EH        02294H    movs     r2,#148
      6416    010001910H        04350H    muls     r0,r2
      6418    010001912H        01808H    adds     r0,r1,r0
      6420    010001914H        09902H    ldr      r1,[sp,#8]
      6422    010001916H        02910H    cmp      r1,#16
      6424    010001918H        0D301H    bcc.n    2 -> 6430
      6426    01000191AH        0DF01H    svc      1
      6428    01000191CH        000ACH    ; LineNo: 172
      6430    01000191EH        000C9H    lsls     r1,r1,#3
      6432    010001920H        01840H    adds     r0,r0,r1
      6434    010001922H        09903H    ldr      r1,[sp,#12]
      6436    010001924H        06041H    str      r1,[r0,#4]
      IF stacks[cid].stackCheckEnabled THEN
      6438    010001926H        09800H    ldr      r0,[sp]
      6440    010001928H        02802H    cmp      r0,#2
      6442    01000192AH        0D301H    bcc.n    2 -> 6448
      6444    01000192CH        0DF01H    svc      1
      6446    01000192EH        000ADH    ; LineNo: 173
      6448    010001930H        0490CH    ldr      r1,[pc,#48] -> 6500 ; Global 02002FE60H
      6450    010001932H        02294H    movs     r2,#148
      6452    010001934H        04350H    muls     r0,r2
      6454    010001936H        01808H    adds     r0,r1,r0
      6456    010001938H        02190H    movs     r1,#144
      6458    01000193AH        05C40H    ldrb     r0,[r0,r1]
      6460    01000193CH        02101H    movs     r1,#1
      6462    01000193EH        04208H    tst      r0,r1
      6464    010001940H        0D101H    bne.n    2 -> 6470
      6466    010001942H        0E00AH    b        20 -> 6490
      6468    010001944H        046C0H    nop
        initStackCheck(stkAddr, stkAddr + stkSize)
      6470    010001946H        09801H    ldr      r0,[sp,#4]
      6472    010001948H        06800H    ldr      r0,[r0]
      6474    01000194AH        09901H    ldr      r1,[sp,#4]
      6476    01000194CH        06809H    ldr      r1,[r1]
      6478    01000194EH        09A03H    ldr      r2,[sp,#12]
      6480    010001950H        01889H    adds     r1,r1,r2
      END
      6482    010001952H    0F7FFFEB1H    bl.w     Memory.initStackCheck
      6486    010001956H        0E000H    b        0 -> 6490
      6488    010001958H        000AEH    ; LineNo: 174
    END
  END AllocThreadStack;
      6490    01000195AH        0B004H    add      sp,#16
      6492    01000195CH        0BD00H    pop      { pc }
      6494    01000195EH        046C0H    nop
      6496    010001960H    0D0000000H    ; Const 0D0000000H -805306368
      6500    010001964H    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.AllocLoopStack*(VAR stkAddr: INTEGER; stkSize: INTEGER);
    VAR cid: INTEGER;
  BEGIN
      6504    010001968H        0B503H    push     { r0, r1, lr }
      6506    01000196AH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      6508    01000196CH        04822H    ldr      r0,[pc,#136] -> 6648 ; Const 0D0000000H -805306368
      6510    01000196EH        06801H    ldr      r1,[r0]
      6512    010001970H        09100H    str      r1,[sp]
    allocStack(stkAddr, cid, stkSize);
      6514    010001972H        09801H    ldr      r0,[sp,#4]
      6516    010001974H        09900H    ldr      r1,[sp]
      6518    010001976H        09A02H    ldr      r2,[sp,#8]
      6520    010001978H    0F7FFFF4AH    bl.w     Memory.allocStack
      6524    01000197CH        0E000H    b        0 -> 6528
      6526    01000197EH        000B8H    ; LineNo: 184
    IF stkAddr # 0 THEN
      6528    010001980H        09801H    ldr      r0,[sp,#4]
      6530    010001982H        06800H    ldr      r0,[r0]
      6532    010001984H        02800H    cmp      r0,#0
      6534    010001986H        0D101H    bne.n    2 -> 6540
      6536    010001988H        0E033H    b        102 -> 6642
      6538    01000198AH        046C0H    nop
      stacks[cid].loopStack.addr := stkAddr;
      6540    01000198CH        09800H    ldr      r0,[sp]
      6542    01000198EH        02802H    cmp      r0,#2
      6544    010001990H        0D301H    bcc.n    2 -> 6550
      6546    010001992H        0DF01H    svc      1
      6548    010001994H        000BAH    ; LineNo: 186
      6550    010001996H        04919H    ldr      r1,[pc,#100] -> 6652 ; Global 02002FE60H
      6552    010001998H        02294H    movs     r2,#148
      6554    01000199AH        04350H    muls     r0,r2
      6556    01000199CH        01808H    adds     r0,r1,r0
      6558    01000199EH        09901H    ldr      r1,[sp,#4]
      6560    0100019A0H        06809H    ldr      r1,[r1]
      6562    0100019A2H        02280H    movs     r2,#128
      6564    0100019A4H        05081H    str      r1,[r0,r2]
      stacks[cid].loopStack.size := stkSize;
      6566    0100019A6H        09800H    ldr      r0,[sp]
      6568    0100019A8H        02802H    cmp      r0,#2
      6570    0100019AAH        0D301H    bcc.n    2 -> 6576
      6572    0100019ACH        0DF01H    svc      1
      6574    0100019AEH        000BBH    ; LineNo: 187
      6576    0100019B0H        04912H    ldr      r1,[pc,#72] -> 6652 ; Global 02002FE60H
      6578    0100019B2H        02294H    movs     r2,#148
      6580    0100019B4H        04350H    muls     r0,r2
      6582    0100019B6H        01808H    adds     r0,r1,r0
      6584    0100019B8H        09902H    ldr      r1,[sp,#8]
      6586    0100019BAH        02284H    movs     r2,#132
      6588    0100019BCH        05081H    str      r1,[r0,r2]
      IF stacks[cid].stackCheckEnabled THEN
      6590    0100019BEH        09800H    ldr      r0,[sp]
      6592    0100019C0H        02802H    cmp      r0,#2
      6594    0100019C2H        0D301H    bcc.n    2 -> 6600
      6596    0100019C4H        0DF01H    svc      1
      6598    0100019C6H        000BCH    ; LineNo: 188
      6600    0100019C8H        0490CH    ldr      r1,[pc,#48] -> 6652 ; Global 02002FE60H
      6602    0100019CAH        02294H    movs     r2,#148
      6604    0100019CCH        04350H    muls     r0,r2
      6606    0100019CEH        01808H    adds     r0,r1,r0
      6608    0100019D0H        02190H    movs     r1,#144
      6610    0100019D2H        05C40H    ldrb     r0,[r0,r1]
      6612    0100019D4H        02101H    movs     r1,#1
      6614    0100019D6H        04208H    tst      r0,r1
      6616    0100019D8H        0D101H    bne.n    2 -> 6622
      6618    0100019DAH        0E00AH    b        20 -> 6642
      6620    0100019DCH        046C0H    nop
        initStackCheck(stkAddr, stkAddr + stkSize)
      6622    0100019DEH        09801H    ldr      r0,[sp,#4]
      6624    0100019E0H        06800H    ldr      r0,[r0]
      6626    0100019E2H        09901H    ldr      r1,[sp,#4]
      6628    0100019E4H        06809H    ldr      r1,[r1]
      6630    0100019E6H        09A02H    ldr      r2,[sp,#8]
      6632    0100019E8H        01889H    adds     r1,r1,r2
      END
      6634    0100019EAH    0F7FFFE65H    bl.w     Memory.initStackCheck
      6638    0100019EEH        0E000H    b        0 -> 6642
      6640    0100019F0H        000BDH    ; LineNo: 189
    END
  END AllocLoopStack;
      6642    0100019F2H        0B003H    add      sp,#12
      6644    0100019F4H        0BD00H    pop      { pc }
      6646    0100019F6H        046C0H    nop
      6648    0100019F8H    0D0000000H    ; Const 0D0000000H -805306368
      6652    0100019FCH    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.EnableStackCheck*(on: BOOLEAN);
    VAR cid: INTEGER;
  BEGIN
      6656    010001A00H        0B501H    push     { r0, lr }
      6658    010001A02H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      6660    010001A04H        04808H    ldr      r0,[pc,#32] -> 6696 ; Const 0D0000000H -805306368
      6662    010001A06H        06801H    ldr      r1,[r0]
      6664    010001A08H        09100H    str      r1,[sp]
    stacks[cid].stackCheckEnabled := on
      6666    010001A0AH        09800H    ldr      r0,[sp]
      6668    010001A0CH        02802H    cmp      r0,#2
      6670    010001A0EH        0D301H    bcc.n    2 -> 6676
      6672    010001A10H        0DF01H    svc      1
      6674    010001A12H        000C7H    ; LineNo: 199
      6676    010001A14H        04905H    ldr      r1,[pc,#20] -> 6700 ; Global 02002FE60H
      6678    010001A16H        02294H    movs     r2,#148
      6680    010001A18H        04350H    muls     r0,r2
      6682    010001A1AH        01808H    adds     r0,r1,r0
  END EnableStackCheck;
      6684    010001A1CH        0A901H    add      r1,sp,#4
      6686    010001A1EH        07809H    ldrb     r1,[r1]
      6688    010001A20H        02290H    movs     r2,#144
      6690    010001A22H        05481H    strb     r1,[r0,r2]
      6692    010001A24H        0B002H    add      sp,#8
      6694    010001A26H        0BD00H    pop      { pc }
      6696    010001A28H    0D0000000H    ; Const 0D0000000H -805306368
      6700    010001A2CH    02002FE60H    ; Global 02002FE60H

  PROCEDURE Memory.ResetMainStack*(cid, numAddr: INTEGER);
    VAR i, addr: INTEGER;
  BEGIN
      6704    010001A30H        0B503H    push     { r0, r1, lr }
      6706    010001A32H        0B082H    sub      sp,#8
    addr := DataMem[cid].stackStart - 4;
      6708    010001A34H        09802H    ldr      r0,[sp,#8]
      6710    010001A36H        02802H    cmp      r0,#2
      6712    010001A38H        0D301H    bcc.n    2 -> 6718
      6714    010001A3AH        0DF01H    svc      1
      6716    010001A3CH        000D0H    ; LineNo: 208
      6718    010001A3EH        0490DH    ldr      r1,[pc,#52] -> 6772 ; Global 02002FF98H
      6720    010001A40H        000C0H    lsls     r0,r0,#3
      6722    010001A42H        01808H    adds     r0,r1,r0
      6724    010001A44H        06800H    ldr      r0,[r0]
      6726    010001A46H        03804H    subs     r0,#4
      6728    010001A48H        09001H    str      r0,[sp,#4]
    i := 0;
      6730    010001A4AH        02000H    movs     r0,#0
      6732    010001A4CH        09000H    str      r0,[sp]
    WHILE i < numAddr DO
      6734    010001A4EH        09800H    ldr      r0,[sp]
      6736    010001A50H        09903H    ldr      r1,[sp,#12]
      6738    010001A52H        04288H    cmp      r0,r1
      6740    010001A54H        0DB01H    blt.n    2 -> 6746
      6742    010001A56H        0E00AH    b        20 -> 6766
      6744    010001A58H        046C0H    nop
      SYSTEM.PUT(addr, 0);
      6746    010001A5AH        09801H    ldr      r0,[sp,#4]
      6748    010001A5CH        02100H    movs     r1,#0
      6750    010001A5EH        06001H    str      r1,[r0]
      INC(i); DEC(addr, 4)
      6752    010001A60H        09800H    ldr      r0,[sp]
      6754    010001A62H        03001H    adds     r0,#1
      6756    010001A64H        09000H    str      r0,[sp]
    END
      6758    010001A66H        09801H    ldr      r0,[sp,#4]
      6760    010001A68H        03804H    subs     r0,#4
      6762    010001A6AH        09001H    str      r0,[sp,#4]
      6764    010001A6CH        0E7EFH    b        -34 -> 6734
  END ResetMainStack;
      6766    010001A6EH        0B004H    add      sp,#16
      6768    010001A70H        0BD00H    pop      { pc }
      6770    010001A72H        046C0H    nop
      6772    010001A74H    02002FF98H    ; Global 02002FF98H

  PROCEDURE Memory.init;
    CONST Core0 = 0; Core1 = 1;
  BEGIN
      6776    010001A78H        0B500H    push     { lr }
    MAU.SetNew(Allocate); MAU.SetDispose(Deallocate);
      6778    010001A7AH        046C0H    nop
      6780    010001A7CH        04829H    ldr      r0,[pc,#164] -> 6948 ; Const 0FFFFFB1AH -1254
      6782    010001A7EH        04478H    add      r0,pc
      6784    010001A80H    0F7FFFCD6H    bl.w     MAU.SetNew
      6788    010001A84H        0E000H    b        0 -> 6792
      6790    010001A86H        000DDH    ; LineNo: 221
      6792    010001A88H        04827H    ldr      r0,[pc,#156] -> 6952 ; Const 0FFFFFBA6H -1114
      6794    010001A8AH        04478H    add      r0,pc
      6796    010001A8CH    0F7FFFCD8H    bl.w     MAU.SetDispose
      6800    010001A90H        0E000H    b        0 -> 6804
      6802    010001A92H        000DDH    ; LineNo: 221
    DataMem[Core0].stackStart := Config.CoreZeroStackStart;
      6804    010001A94H        0482DH    ldr      r0,[pc,#180] -> 6988 ; Global 02002FF98H
      6806    010001A96H        04929H    ldr      r1,[pc,#164] -> 6972 ; Global 02002FFCCH
      6808    010001A98H        06809H    ldr      r1,[r1]
      6810    010001A9AH        06001H    str      r1,[r0]
    DataMem[Core0].dataStart := Config.CoreZeroDataStart;
      6812    010001A9CH        0482BH    ldr      r0,[pc,#172] -> 6988 ; Global 02002FF98H
      6814    010001A9EH        04928H    ldr      r1,[pc,#160] -> 6976 ; Global 02002FFD0H
      6816    010001AA0H        06809H    ldr      r1,[r1]
      6818    010001AA2H        06041H    str      r1,[r0,#4]
    DataMem[Core1].stackStart := Config.CoreOneStackStart;
      6820    010001AA4H        04829H    ldr      r0,[pc,#164] -> 6988 ; Global 02002FF98H
      6822    010001AA6H        04921H    ldr      r1,[pc,#132] -> 6956 ; Const 02003FFFCH 537133052
      6824    010001AA8H        06081H    str      r1,[r0,#8]
    DataMem[Core1].dataStart := Config.CoreOneDataStart;
      6826    010001AAAH        04828H    ldr      r0,[pc,#160] -> 6988 ; Global 02002FF98H
      6828    010001AACH        04920H    ldr      r1,[pc,#128] -> 6960 ; Const 020030000H 537067520
      6830    010001AAEH        060C1H    str      r1,[r0,#12]
    heaps[Core0].heapTop := Config.CoreZeroHeapStart;
      6832    010001AB0H        04827H    ldr      r0,[pc,#156] -> 6992 ; Global 02002FF88H
      6834    010001AB2H        04924H    ldr      r1,[pc,#144] -> 6980 ; Global 02002FFC8H
      6836    010001AB4H        06809H    ldr      r1,[r1]
      6838    010001AB6H        06041H    str      r1,[r0,#4]
    heaps[Core0].heapLimit := Config.CoreZeroHeapLimit;
      6840    010001AB8H        04825H    ldr      r0,[pc,#148] -> 6992 ; Global 02002FF88H
      6842    010001ABAH        04923H    ldr      r1,[pc,#140] -> 6984 ; Global 02002FFC4H
      6844    010001ABCH        06809H    ldr      r1,[r1]
      6846    010001ABEH        06001H    str      r1,[r0]
    heaps[Core1].heapTop := Config.CoreOneHeapStart;
      6848    010001AC0H        04823H    ldr      r0,[pc,#140] -> 6992 ; Global 02002FF88H
      6850    010001AC2H        0491CH    ldr      r1,[pc,#112] -> 6964 ; Const 020030200H 537068032
      6852    010001AC4H        060C1H    str      r1,[r0,#12]
    heaps[Core1].heapLimit := Config.CoreOneHeapLimit;
      6854    010001AC6H        04822H    ldr      r0,[pc,#136] -> 6992 ; Global 02002FF88H
      6856    010001AC8H        02100H    movs     r1,#0
      6858    010001ACAH        06081H    str      r1,[r0,#8]
    stacks[Core0].stacksBottom := Config.CoreZeroStackStart - Config.CoreZeroMainStackSize;
      6860    010001ACCH        04821H    ldr      r0,[pc,#132] -> 6996 ; Global 02002FE60H
      6862    010001ACEH        0491BH    ldr      r1,[pc,#108] -> 6972 ; Global 02002FFCCH
      6864    010001AD0H        06809H    ldr      r1,[r1]
      6866    010001AD2H        02201H    movs     r2,#1
      6868    010001AD4H        00292H    lsls     r2,r2,#10
      6870    010001AD6H        01A89H    subs     r1,r1,r2
      6872    010001AD8H        02288H    movs     r2,#136
      6874    010001ADAH        05081H    str      r1,[r0,r2]
    stacks[Core0].stacksTop := Config.CoreZeroStackStart;
      6876    010001ADCH        0481DH    ldr      r0,[pc,#116] -> 6996 ; Global 02002FE60H
      6878    010001ADEH        04917H    ldr      r1,[pc,#92] -> 6972 ; Global 02002FFCCH
      6880    010001AE0H        06809H    ldr      r1,[r1]
      6882    010001AE2H        0228CH    movs     r2,#140
      6884    010001AE4H        05081H    str      r1,[r0,r2]
    stacks[Core0].stackCheckEnabled := FALSE;
      6886    010001AE6H        0481BH    ldr      r0,[pc,#108] -> 6996 ; Global 02002FE60H
      6888    010001AE8H        02100H    movs     r1,#0
      6890    010001AEAH        02290H    movs     r2,#144
      6892    010001AECH        05481H    strb     r1,[r0,r2]
    stacks[Core1].stacksBottom := Config.CoreOneStackStart - Config.CoreOneMainStackSize;
      6894    010001AEEH        04819H    ldr      r0,[pc,#100] -> 6996 ; Global 02002FE60H
      6896    010001AF0H        04911H    ldr      r1,[pc,#68] -> 6968 ; Const 02003FBFCH 537132028
      6898    010001AF2H        02247H    movs     r2,#71
      6900    010001AF4H        00092H    lsls     r2,r2,#2
      6902    010001AF6H        05081H    str      r1,[r0,r2]
    stacks[Core1].stacksTop := Config.CoreOneStackStart;
      6904    010001AF8H        04816H    ldr      r0,[pc,#88] -> 6996 ; Global 02002FE60H
      6906    010001AFAH        0490CH    ldr      r1,[pc,#48] -> 6956 ; Const 02003FFFCH 537133052
      6908    010001AFCH        02209H    movs     r2,#9
      6910    010001AFEH        00152H    lsls     r2,r2,#5
      6912    010001B00H        05081H    str      r1,[r0,r2]
    stacks[Core1].stackCheckEnabled := FALSE;
      6914    010001B02H        04814H    ldr      r0,[pc,#80] -> 6996 ; Global 02002FE60H
      6916    010001B04H        02100H    movs     r1,#0
      6918    010001B06H        02249H    movs     r2,#73
      6920    010001B08H        00092H    lsls     r2,r2,#2
      6922    010001B0AH        05481H    strb     r1,[r0,r2]
    SYSTEM.PUT(DataMem[Core0].stackStart, DataMem[Core0].stackStart);
      6924    010001B0CH        0480FH    ldr      r0,[pc,#60] -> 6988 ; Global 02002FF98H
      6926    010001B0EH        0490FH    ldr      r1,[pc,#60] -> 6988 ; Global 02002FF98H
      6928    010001B10H        06800H    ldr      r0,[r0]
      6930    010001B12H        06809H    ldr      r1,[r1]
      6932    010001B14H        06001H    str      r1,[r0]
    SYSTEM.PUT(DataMem[Core1].stackStart, DataMem[Core1].stackStart)
      6934    010001B16H        0480DH    ldr      r0,[pc,#52] -> 6988 ; Global 02002FF98H
      6936    010001B18H        0490CH    ldr      r1,[pc,#48] -> 6988 ; Global 02002FF98H
  END init;
      6938    010001B1AH        06880H    ldr      r0,[r0,#8]
      6940    010001B1CH        06889H    ldr      r1,[r1,#8]
      6942    010001B1EH        06001H    str      r1,[r0]
      6944    010001B20H        0BD00H    pop      { pc }
      6946    010001B22H        046C0H    nop
      6948    010001B24H    0FFFFFB1AH    ; Const 0FFFFFB1AH -1254
      6952    010001B28H    0FFFFFBA6H    ; Const 0FFFFFBA6H -1114
      6956    010001B2CH    02003FFFCH    ; Const 02003FFFCH 537133052
      6960    010001B30H    020030000H    ; Const 020030000H 537067520
      6964    010001B34H    020030200H    ; Const 020030200H 537068032
      6968    010001B38H    02003FBFCH    ; Const 02003FBFCH 537132028
      6972    010001B3CH    02002FFCCH    ; Global 02002FFCCH
      6976    010001B40H    02002FFD0H    ; Global 02002FFD0H
      6980    010001B44H    02002FFC8H    ; Global 02002FFC8H
      6984    010001B48H    02002FFC4H    ; Global 02002FFC4H
      6988    010001B4CH    02002FF98H    ; Global 02002FF98H
      6992    010001B50H    02002FF88H    ; Global 02002FF88H
      6996    010001B54H    02002FE60H    ; Global 02002FE60H

PROCEDURE Memory..init;
BEGIN
      7000    010001B58H        0B500H    push     { lr }
  init
END .init;
END Memory.
      7002    010001B5AH    0F7FFFF8DH    bl.w     Memory.init
      7006    010001B5EH        0E000H    b        0 -> 7010
      7008    010001B60H        000F9H    ; LineNo: 249
      7010    010001B62H        0BD00H    pop      { pc }

MODULE LED;
      7012    010001B64H        00000H    ; Pad

  PROCEDURE LED.init;
  BEGIN
      7016    010001B68H        0B500H    push     { lr }
    GPIO.SetFunction(LEDpinNo, GPIO.Fsio);
      7018    010001B6AH        02019H    movs     r0,#25
      7020    010001B6CH        02105H    movs     r1,#5
      7022    010001B6EH    0F7FFF969H    bl.w     GPIO.SetFunction
      7026    010001B72H        0E000H    b        0 -> 7030
      7028    010001B74H        00023H    ; LineNo: 35
    GPIO.OutputEnable({LEDpinNo})
      7030    010001B76H        02001H    movs     r0,#1
      7032    010001B78H        00640H    lsls     r0,r0,#25
  END init;
      7034    010001B7AH    0F7FFFA8DH    bl.w     GPIO.OutputEnable
      7038    010001B7EH        0E000H    b        0 -> 7042
      7040    010001B80H        00024H    ; LineNo: 36
      7042    010001B82H        0BD00H    pop      { pc }

PROCEDURE LED..init;
BEGIN
      7044    010001B84H        0B500H    push     { lr }
  init
END .init;
END LED.
      7046    010001B86H    0F7FFFFEFH    bl.w     LED.init
      7050    010001B8AH        0E000H    b        0 -> 7054
      7052    010001B8CH        00028H    ; LineNo: 40
      7054    010001B8EH        0BD00H    pop      { pc }

MODULE RuntimeErrors;
      7056    010001B90H        00000H    ; Pad
      7060    010001B94H        00008H    ; Type (size)
      7064    010001B98H        00000H    ; Type
      7068    010001B9CH        00000H    ; Type
      7072    010001BA0H        00000H    ; Type
      7076    010001BA4H        00000H    ; Type
      7080    010001BA8H        00044H    ; Type (size)
      7084    010001BACH        00000H    ; Type
      7088    010001BB0H        00000H    ; Type
      7092    010001BB4H        00000H    ; Type
      7096    010001BB8H        00000H    ; Type
      7100    010001BBCH        00024H    ; Type (size)
      7104    010001BC0H        00000H    ; Type
      7108    010001BC4H        00000H    ; Type
      7112    010001BC8H        00000H    ; Type
      7116    010001BCCH        00000H    ; Type
      7120    010001BD0H        00010H    ; Type (size)
      7124    010001BD4H        00000H    ; Type
      7128    010001BD8H        00000H    ; Type
      7132    010001BDCH        00000H    ; Type
      7136    010001BE0H        00000H    ; Type
      7140    010001BE4H        00008H    ; Type (size)
      7144    010001BE8H        00000H    ; Type
      7148    010001BECH        00000H    ; Type
      7152    010001BF0H        00000H    ; Type
      7156    010001BF4H        00000H    ; Type
      7160    010001BF8H        00040H    ; Type (size)
      7164    010001BFCH    010001BF8H    ; Type (ref)
      7168    010001C00H        00000H    ; Type
      7172    010001C04H        00000H    ; Type
      7176    010001C08H        00000H    ; Type
      7180    010001C0CH        00080H    ; Type (size)
      7184    010001C10H    010001C0CH    ; Type (ref)
      7188    010001C14H        00000H    ; Type
      7192    010001C18H        00000H    ; Type
      7196    010001C1CH        00000H    ; Type
      7200    010001C20H        000C8H    ; Type (size)
      7204    010001C24H        00000H    ; Type
      7208    010001C28H        00000H    ; Type
      7212    010001C2CH        00000H    ; Type
      7216    010001C30H        00000H    ; Type

  PROCEDURE* RuntimeErrors.HALT(cid: INTEGER);
  BEGIN
      7220    010001C34H        0B501H    push     { r0, lr }
    IF exc[cid].haltOn THEN
      7222    010001C36H        09800H    ldr      r0,[sp]
      7224    010001C38H        04907H    ldr      r1,[pc,#28] -> 7256 ; Global 02002FCD0H
      7226    010001C3AH        022C8H    movs     r2,#200
      7228    010001C3CH        04350H    muls     r0,r2
      7230    010001C3EH        01808H    adds     r0,r1,r0
      7232    010001C40H        021C4H    movs     r1,#196
      7234    010001C42H        05C40H    ldrb     r0,[r0,r1]
      7236    010001C44H        02101H    movs     r1,#1
      7238    010001C46H        04208H    tst      r0,r1
      7240    010001C48H        0D101H    bne.n    2 -> 7246
      7242    010001C4AH        0E002H    b        4 -> 7250
      7244    010001C4CH        046C0H    nop
      REPEAT UNTIL FALSE
    END
      7246    010001C4EH        04280H    cmp      r0,r0
      7248    010001C50H        0D0FDH    beq.n    -6 -> 7246
  END HALT;
      7250    010001C52H        0B001H    add      sp,#4
      7252    010001C54H        0BD00H    pop      { pc }
      7254    010001C56H        046C0H    nop
      7256    010001C58H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE RuntimeErrors.getHalfWord(addr: INTEGER; VAR value: INTEGER);
    VAR b1, b2: BYTE;
  BEGIN
      7260    010001C5CH        0B503H    push     { r0, r1, lr }
      7262    010001C5EH        0B081H    sub      sp,#4
    SYSTEM.GET(addr + 1, b1);
      7264    010001C60H        09801H    ldr      r0,[sp,#4]
      7266    010001C62H        03001H    adds     r0,#1
      7268    010001C64H        07801H    ldrb     r1,[r0]
      7270    010001C66H        0AA00H    add      r2,sp,#0
      7272    010001C68H        07011H    strb     r1,[r2]
    SYSTEM.GET(addr, b2);
      7274    010001C6AH        09801H    ldr      r0,[sp,#4]
      7276    010001C6CH        07801H    ldrb     r1,[r0]
      7278    010001C6EH        0AA00H    add      r2,sp,#0
      7280    010001C70H        07051H    strb     r1,[r2,#1]
    value := LSL(b1, 8) + b2
      7282    010001C72H        0A800H    add      r0,sp,#0
      7284    010001C74H        07800H    ldrb     r0,[r0]
      7286    010001C76H        00200H    lsls     r0,r0,#8
  END getHalfWord;
      7288    010001C78H        0A900H    add      r1,sp,#0
      7290    010001C7AH        07849H    ldrb     r1,[r1,#1]
      7292    010001C7CH        01840H    adds     r0,r0,r1
      7294    010001C7EH        09902H    ldr      r1,[sp,#8]
      7296    010001C80H        06008H    str      r0,[r1]
      7298    010001C82H        0B003H    add      sp,#12
      7300    010001C84H        0BD00H    pop      { pc }
      7302    010001C86H        046C0H    nop

  PROCEDURE RuntimeErrors.isBL(codeAddr: INTEGER): BOOLEAN;
    VAR instr: INTEGER;
  BEGIN
      7304    010001C88H        0B501H    push     { r0, lr }
      7306    010001C8AH        0B081H    sub      sp,#4
    getHalfWord(codeAddr, instr);
      7308    010001C8CH        09801H    ldr      r0,[sp,#4]
      7310    010001C8EH        04669H    mov      r1,sp
      7312    010001C90H    0F7FFFFE4H    bl.w     RuntimeErrors.getHalfWord
      7316    010001C94H        0E000H    b        0 -> 7320
      7318    010001C96H        00094H    ; LineNo: 148
    RETURN BFX(instr, 15, 11) = 01EH
      7320    010001C98H        09800H    ldr      r0,[sp]
      7322    010001C9AH        00400H    lsls     r0,r0,#16
      7324    010001C9CH        00EC0H    lsrs     r0,r0,#27
  END isBL;
      7326    010001C9EH        0281EH    cmp      r0,#30
      7328    010001CA0H        0D001H    beq.n    2 -> 7334
      7330    010001CA2H        02000H    movs     r0,#0
      7332    010001CA4H        0E000H    b        0 -> 7336
      7334    010001CA6H        02001H    movs     r0,#1
      7336    010001CA8H        0B002H    add      sp,#8
      7338    010001CAAH        0BD00H    pop      { pc }

  PROCEDURE RuntimeErrors.isBLX(codeAddr: INTEGER): BOOLEAN;
    VAR instr: INTEGER;
  BEGIN
      7340    010001CACH        0B501H    push     { r0, lr }
      7342    010001CAEH        0B081H    sub      sp,#4
    getHalfWord(codeAddr, instr);
      7344    010001CB0H        09801H    ldr      r0,[sp,#4]
      7346    010001CB2H        04669H    mov      r1,sp
      7348    010001CB4H    0F7FFFFD2H    bl.w     RuntimeErrors.getHalfWord
      7352    010001CB8H        0E000H    b        0 -> 7356
      7354    010001CBAH        0009DH    ; LineNo: 157
    RETURN (BFX(instr, 15, 7) = 08FH) & (BFX(instr, 2, 0) = 0)
      7356    010001CBCH        09800H    ldr      r0,[sp]
      7358    010001CBEH        00400H    lsls     r0,r0,#16
      7360    010001CC0H        00DC0H    lsrs     r0,r0,#23
      7362    010001CC2H        0288FH    cmp      r0,#143
      7364    010001CC4H        0D001H    beq.n    2 -> 7370
      7366    010001CC6H        0E005H    b        10 -> 7380
      7368    010001CC8H        046C0H    nop
      7370    010001CCAH        09800H    ldr      r0,[sp]
      7372    010001CCCH        00740H    lsls     r0,r0,#29
      7374    010001CCEH        00F40H    lsrs     r0,r0,#29
      7376    010001CD0H        02800H    cmp      r0,#0
  END isBLX;
      7378    010001CD2H        0D001H    beq.n    2 -> 7384
      7380    010001CD4H        02000H    movs     r0,#0
      7382    010001CD6H        0E000H    b        0 -> 7386
      7384    010001CD8H        02001H    movs     r0,#1
      7386    010001CDAH        0B002H    add      sp,#8
      7388    010001CDCH        0BD00H    pop      { pc }
      7390    010001CDEH        046C0H    nop

  PROCEDURE RuntimeErrors.getNextLR(stackAddr: INTEGER; VAR lr, res: INTEGER);
    VAR nextInstr: INTEGER;
  BEGIN
      7392    010001CE0H        0B507H    push     { r0, r1, r2, lr }
      7394    010001CE2H        0B081H    sub      sp,#4
    res := StackTraceNotLR;
      7396    010001CE4H        02000H    movs     r0,#0
      7398    010001CE6H        09903H    ldr      r1,[sp,#12]
      7400    010001CE8H        06008H    str      r0,[r1]
    SYSTEM.GET(stackAddr, lr);
      7402    010001CEAH        09801H    ldr      r0,[sp,#4]
      7404    010001CECH        06801H    ldr      r1,[r0]
      7406    010001CEEH        09A02H    ldr      r2,[sp,#8]
      7408    010001CF0H        06011H    str      r1,[r2]
    IF ODD(lr) THEN
      7410    010001CF2H        09802H    ldr      r0,[sp,#8]
      7412    010001CF4H        06800H    ldr      r0,[r0]
      7414    010001CF6H        02101H    movs     r1,#1
      7416    010001CF8H        04208H    tst      r0,r1
      7418    010001CFAH        0D101H    bne.n    2 -> 7424
      7420    010001CFCH        0E042H    b        132 -> 7556
      7422    010001CFEH        046C0H    nop
      DEC(lr);
      7424    010001D00H        09802H    ldr      r0,[sp,#8]
      7426    010001D02H        06801H    ldr      r1,[r0]
      7428    010001D04H        03901H    subs     r1,#1
      7430    010001D06H        06001H    str      r1,[r0]
      IF (lr >= Config.CodeStart) & (lr < Config.CodeEnd) THEN
      7432    010001D08H        09802H    ldr      r0,[sp,#8]
      7434    010001D0AH        06800H    ldr      r0,[r0]
      7436    010001D0CH        0491EH    ldr      r1,[pc,#120] -> 7560 ; Global 02002FFC0H
      7438    010001D0EH        06809H    ldr      r1,[r1]
      7440    010001D10H        04288H    cmp      r0,r1
      7442    010001D12H        0DA01H    bge.n    2 -> 7448
      7444    010001D14H        0E036H    b        108 -> 7556
      7446    010001D16H        046C0H    nop
      7448    010001D18H        09802H    ldr      r0,[sp,#8]
      7450    010001D1AH        06800H    ldr      r0,[r0]
      7452    010001D1CH        0491BH    ldr      r1,[pc,#108] -> 7564 ; Global 02002FFBCH
      7454    010001D1EH        06809H    ldr      r1,[r1]
      7456    010001D20H        04288H    cmp      r0,r1
      7458    010001D22H        0DB01H    blt.n    2 -> 7464
      7460    010001D24H        0E02EH    b        92 -> 7556
      7462    010001D26H        046C0H    nop
        IF isBL(lr - 4) OR isBLX(lr - 2) THEN
      7464    010001D28H        09802H    ldr      r0,[sp,#8]
      7466    010001D2AH        06800H    ldr      r0,[r0]
      7468    010001D2CH        03804H    subs     r0,#4
      7470    010001D2EH    0F7FFFFABH    bl.w     RuntimeErrors.isBL
      7474    010001D32H        0E000H    b        0 -> 7478
      7476    010001D34H        000AEH    ; LineNo: 174
      7478    010001D36H        02101H    movs     r1,#1
      7480    010001D38H        04208H    tst      r0,r1
      7482    010001D3AH        0D001H    beq.n    2 -> 7488
      7484    010001D3CH        0E00CH    b        24 -> 7512
      7486    010001D3EH        046C0H    nop
      7488    010001D40H        09802H    ldr      r0,[sp,#8]
      7490    010001D42H        06800H    ldr      r0,[r0]
      7492    010001D44H        03802H    subs     r0,#2
      7494    010001D46H    0F7FFFFB1H    bl.w     RuntimeErrors.isBLX
      7498    010001D4AH        0E000H    b        0 -> 7502
      7500    010001D4CH        000AEH    ; LineNo: 174
      7502    010001D4EH        02101H    movs     r1,#1
      7504    010001D50H        04208H    tst      r0,r1
      7506    010001D52H        0D101H    bne.n    2 -> 7512
      7508    010001D54H        0E016H    b        44 -> 7556
      7510    010001D56H        046C0H    nop
          getHalfWord(lr, nextInstr);
      7512    010001D58H        09802H    ldr      r0,[sp,#8]
      7514    010001D5AH        06800H    ldr      r0,[r0]
      7516    010001D5CH        04669H    mov      r1,sp
      7518    010001D5EH    0F7FFFF7DH    bl.w     RuntimeErrors.getHalfWord
      7522    010001D62H        0E000H    b        0 -> 7526
      7524    010001D64H        000AFH    ; LineNo: 175
          IF nextInstr = 0E000H THEN
      7526    010001D66H        09800H    ldr      r0,[sp]
      7528    010001D68H        02107H    movs     r1,#7
      7530    010001D6AH        00349H    lsls     r1,r1,#13
      7532    010001D6CH        04288H    cmp      r0,r1
      7534    010001D6EH        0D001H    beq.n    2 -> 7540
      7536    010001D70H        0E005H    b        10 -> 7550
      7538    010001D72H        046C0H    nop
            res := StackTraceLineNo
          ELSE
      7540    010001D74H        02001H    movs     r0,#1
      7542    010001D76H        09903H    ldr      r1,[sp,#12]
      7544    010001D78H        06008H    str      r0,[r1]
            res := StackTraceNoLineNo
      7546    010001D7AH        0E003H    b        6 -> 7556
      7548    010001D7CH        046C0H    nop
          END
      7550    010001D7EH        02002H    movs     r0,#2
      7552    010001D80H        09903H    ldr      r1,[sp,#12]
      7554    010001D82H        06008H    str      r0,[r1]
        END
      END
    END
  END getNextLR;
      7556    010001D84H        0B004H    add      sp,#16
      7558    010001D86H        0BD00H    pop      { pc }
      7560    010001D88H    02002FFC0H    ; Global 02002FFC0H
      7564    010001D8CH    02002FFBCH    ; Global 02002FFBCH

  PROCEDURE RuntimeErrors.Stacktrace*(stackAddr: INTEGER; VAR trace: Trace);
    VAR
      lr, x, res: INTEGER;
      tp: TracePoint;
  BEGIN
      7568    010001D90H        0B507H    push     { r0, r1, r2, lr }
      7570    010001D92H        0B085H    sub      sp,#20
    SYSTEM.GET(stackAddr, x);
      7572    010001D94H        09805H    ldr      r0,[sp,#20]
      7574    010001D96H        06801H    ldr      r1,[r0]
      7576    010001D98H        09101H    str      r1,[sp,#4]
    WHILE (stackAddr # x) & (trace.count < TraceDepth) DO
      7578    010001D9AH        09805H    ldr      r0,[sp,#20]
      7580    010001D9CH        09901H    ldr      r1,[sp,#4]
      7582    010001D9EH        04288H    cmp      r0,r1
      7584    010001DA0H        0D101H    bne.n    2 -> 7590
      7586    010001DA2H        0E041H    b        130 -> 7720
      7588    010001DA4H        046C0H    nop
      7590    010001DA6H        09806H    ldr      r0,[sp,#24]
      7592    010001DA8H        06C00H    ldr      r0,[r0,#64]
      7594    010001DAAH        02807H    cmp      r0,#7
      7596    010001DACH        0DB01H    blt.n    2 -> 7602
      7598    010001DAEH        0E03BH    b        118 -> 7720
      7600    010001DB0H        046C0H    nop
      getNextLR(stackAddr, lr, res);
      7602    010001DB2H        09805H    ldr      r0,[sp,#20]
      7604    010001DB4H        04669H    mov      r1,sp
      7606    010001DB6H        0AA02H    add      r2,sp,#8
      7608    010001DB8H    0F7FFFF92H    bl.w     RuntimeErrors.getNextLR
      7612    010001DBCH        0E000H    b        0 -> 7616
      7614    010001DBEH        000C6H    ; LineNo: 198
      IF res > StackTraceNotLR THEN
      7616    010001DC0H        09802H    ldr      r0,[sp,#8]
      7618    010001DC2H        02800H    cmp      r0,#0
      7620    010001DC4H        0DC01H    bgt.n    2 -> 7626
      7622    010001DC6H        0E028H    b        80 -> 7706
      7624    010001DC8H        046C0H    nop
        tp.address := lr - 4;
      7626    010001DCAH        09800H    ldr      r0,[sp]
      7628    010001DCCH        03804H    subs     r0,#4
      7630    010001DCEH        09003H    str      r0,[sp,#12]
        IF res = StackTraceLineNo THEN
      7632    010001DD0H        09802H    ldr      r0,[sp,#8]
      7634    010001DD2H        02801H    cmp      r0,#1
      7636    010001DD4H        0D001H    beq.n    2 -> 7642
      7638    010001DD6H        0E009H    b        18 -> 7660
      7640    010001DD8H        046C0H    nop
          getHalfWord(lr + 2, tp.lineNo)
      7642    010001DDAH        09800H    ldr      r0,[sp]
      7644    010001DDCH        03002H    adds     r0,#2
      7646    010001DDEH        0A904H    add      r1,sp,#16
        ELSE
      7648    010001DE0H    0F7FFFF3CH    bl.w     RuntimeErrors.getHalfWord
      7652    010001DE4H        0E000H    b        0 -> 7656
      7654    010001DE6H        000CAH    ; LineNo: 202
          tp.lineNo := 0
      7656    010001DE8H        0E002H    b        4 -> 7664
      7658    010001DEAH        046C0H    nop
        END;
      7660    010001DECH        02000H    movs     r0,#0
      7662    010001DEEH        09004H    str      r0,[sp,#16]
        trace.tp[trace.count] := tp;
      7664    010001DF0H        09806H    ldr      r0,[sp,#24]
      7666    010001DF2H        06C00H    ldr      r0,[r0,#64]
      7668    010001DF4H        02808H    cmp      r0,#8
      7670    010001DF6H        0D301H    bcc.n    2 -> 7676
      7672    010001DF8H        0DF01H    svc      1
      7674    010001DFAH        000CEH    ; LineNo: 206
      7676    010001DFCH        09906H    ldr      r1,[sp,#24]
      7678    010001DFEH        000C0H    lsls     r0,r0,#3
      7680    010001E00H        01808H    adds     r0,r1,r0
      7682    010001E02H        02102H    movs     r1,#2
      7684    010001E04H        0AA03H    add      r2,sp,#12
      7686    010001E06H        06813H    ldr      r3,[r2]
      7688    010001E08H        03204H    adds     r2,#4
      7690    010001E0AH        06003H    str      r3,[r0]
      7692    010001E0CH        03004H    adds     r0,#4
      7694    010001E0EH        03901H    subs     r1,#1
      7696    010001E10H        0D1F9H    bne.n    -14 -> 7686
        INC(trace.count)
      END;
      7698    010001E12H        09806H    ldr      r0,[sp,#24]
      7700    010001E14H        06C01H    ldr      r1,[r0,#64]
      7702    010001E16H        03101H    adds     r1,#1
      7704    010001E18H        06401H    str      r1,[r0,#64]
      INC(stackAddr, 4);
      7706    010001E1AH        09805H    ldr      r0,[sp,#20]
      7708    010001E1CH        03004H    adds     r0,#4
      7710    010001E1EH        09005H    str      r0,[sp,#20]
      SYSTEM.GET(stackAddr, x)
    END;
      7712    010001E20H        09805H    ldr      r0,[sp,#20]
      7714    010001E22H        06801H    ldr      r1,[r0]
      7716    010001E24H        09101H    str      r1,[sp,#4]
      7718    010001E26H        0E7B8H    b        -144 -> 7578
    IF trace.count = TraceDepth THEN
      7720    010001E28H        09806H    ldr      r0,[sp,#24]
      7722    010001E2AH        06C00H    ldr      r0,[r0,#64]
      7724    010001E2CH        02807H    cmp      r0,#7
      7726    010001E2EH        0D001H    beq.n    2 -> 7732
      7728    010001E30H        0E003H    b        6 -> 7738
      7730    010001E32H        046C0H    nop
      trace.tp[TraceDepth].address := MoreTracePoints
    END
      7732    010001E34H        04802H    ldr      r0,[pc,#8] -> 7744 ; Const 0FFFFFFFFH -1
      7734    010001E36H        09906H    ldr      r1,[sp,#24]
      7736    010001E38H        06388H    str      r0,[r1,#56]
  END Stacktrace;
      7738    010001E3AH        0B008H    add      sp,#32
      7740    010001E3CH        0BD00H    pop      { pc }
      7742    010001E3EH        046C0H    nop
      7744    010001E40H    0FFFFFFFFH    ; Const 0FFFFFFFFH -1

  PROCEDURE RuntimeErrors.extractError(stackFrameBase: INTEGER; VAR errorRec: ErrorRec);
    VAR tp: TracePoint; addr: INTEGER;
  BEGIN
      7748    010001E44H        0B507H    push     { r0, r1, r2, lr }
      7750    010001E46H        0B083H    sub      sp,#12
    SYSTEM.GET(stackFrameBase + PCoffset, addr);  
      7752    010001E48H        09803H    ldr      r0,[sp,#12]
      7754    010001E4AH        03018H    adds     r0,#24
      7756    010001E4CH        06801H    ldr      r1,[r0]
      7758    010001E4EH        09102H    str      r1,[sp,#8]
    getHalfWord(addr, tp.lineNo);  
      7760    010001E50H        09802H    ldr      r0,[sp,#8]
      7762    010001E52H        0A901H    add      r1,sp,#4
      7764    010001E54H    0F7FFFF02H    bl.w     RuntimeErrors.getHalfWord
      7768    010001E58H        0E000H    b        0 -> 7772
      7770    010001E5AH        000DFH    ; LineNo: 223
    DEC(addr, 2);  
      7772    010001E5CH        09802H    ldr      r0,[sp,#8]
      7774    010001E5EH        03802H    subs     r0,#2
      7776    010001E60H        09002H    str      r0,[sp,#8]
    tp.address := addr;  
      7778    010001E62H        09802H    ldr      r0,[sp,#8]
      7780    010001E64H        09000H    str      r0,[sp]
    getHalfWord(addr, errorRec.code);  
      7782    010001E66H        09802H    ldr      r0,[sp,#8]
      7784    010001E68H        09904H    ldr      r1,[sp,#16]
      7786    010001E6AH    0F7FFFEF7H    bl.w     RuntimeErrors.getHalfWord
      7790    010001E6EH        0E000H    b        0 -> 7794
      7792    010001E70H        000E2H    ; LineNo: 226
    errorRec.code := BFX(errorRec.code, 7, 0);  
      7794    010001E72H        09804H    ldr      r0,[sp,#16]
      7796    010001E74H        06800H    ldr      r0,[r0]
      7798    010001E76H        0B2C0H    uxtb     r0,r0
      7800    010001E78H        09904H    ldr      r1,[sp,#16]
      7802    010001E7AH        06008H    str      r0,[r1]
    errorRec.trace.tp[0] := tp;
      7804    010001E7CH        02002H    movs     r0,#2
      7806    010001E7EH        09904H    ldr      r1,[sp,#16]
      7808    010001E80H        03108H    adds     r1,#8
      7810    010001E82H        0466AH    mov      r2,sp
      7812    010001E84H        06813H    ldr      r3,[r2]
      7814    010001E86H        03204H    adds     r2,#4
      7816    010001E88H        0600BH    str      r3,[r1]
      7818    010001E8AH        03104H    adds     r1,#4
      7820    010001E8CH        03801H    subs     r0,#1
      7822    010001E8EH        0D1F9H    bne.n    -14 -> 7812
    errorRec.trace.count := 1
  END extractError;
      7824    010001E90H        02001H    movs     r0,#1
      7826    010001E92H        09904H    ldr      r1,[sp,#16]
      7828    010001E94H        06488H    str      r0,[r1,#72]
      7830    010001E96H        0B006H    add      sp,#24
      7832    010001E98H        0BD00H    pop      { pc }
      7834    010001E9AH        046C0H    nop

  PROCEDURE RuntimeErrors.extractFault(stackFrameBase: INTEGER; VAR faultRec: FaultRec);
  BEGIN
      7836    010001E9CH        0B507H    push     { r0, r1, r2, lr }
    SYSTEM.GET(stackFrameBase + PCoffset, faultRec.address);
      7838    010001E9EH        09800H    ldr      r0,[sp]
      7840    010001EA0H        03018H    adds     r0,#24
      7842    010001EA2H        06801H    ldr      r1,[r0]
      7844    010001EA4H        09A01H    ldr      r2,[sp,#4]
      7846    010001EA6H        06091H    str      r1,[r2,#8]
    SYSTEM.EMIT(MCU.MRS_R11_IPSR);
      7848    010001EA8H    0F3EF8B05H    .word 0x8B05F3EF /* EMIT */
    faultRec.code := SYSTEM.REG(11);
      7852    010001EACH        04658H    mov      r0,r11
      7854    010001EAEH        09901H    ldr      r1,[sp,#4]
      7856    010001EB0H        06008H    str      r0,[r1]
  END extractFault;
      7858    010001EB2H        0B003H    add      sp,#12
      7860    010001EB4H        0BD00H    pop      { pc }
      7862    010001EB6H        046C0H    nop

  PROCEDURE RuntimeErrors.readRegs(stackFrameBase: INTEGER; VAR stackedRegs: StackedRegisters);
  BEGIN
      7864    010001EB8H        0B507H    push     { r0, r1, r2, lr }
    SYSTEM.GET(stackFrameBase, stackedRegs.r0);
      7866    010001EBAH        09800H    ldr      r0,[sp]
      7868    010001EBCH        06801H    ldr      r1,[r0]
      7870    010001EBEH        09A01H    ldr      r2,[sp,#4]
      7872    010001EC0H        06011H    str      r1,[r2]
    SYSTEM.GET(stackFrameBase + 4, stackedRegs.r1);
      7874    010001EC2H        09800H    ldr      r0,[sp]
      7876    010001EC4H        03004H    adds     r0,#4
      7878    010001EC6H        06801H    ldr      r1,[r0]
      7880    010001EC8H        09A01H    ldr      r2,[sp,#4]
      7882    010001ECAH        06051H    str      r1,[r2,#4]
    SYSTEM.GET(stackFrameBase + 8, stackedRegs.r2);
      7884    010001ECCH        09800H    ldr      r0,[sp]
      7886    010001ECEH        03008H    adds     r0,#8
      7888    010001ED0H        06801H    ldr      r1,[r0]
      7890    010001ED2H        09A01H    ldr      r2,[sp,#4]
      7892    010001ED4H        06091H    str      r1,[r2,#8]
    SYSTEM.GET(stackFrameBase + 12, stackedRegs.r3);
      7894    010001ED6H        09800H    ldr      r0,[sp]
      7896    010001ED8H        0300CH    adds     r0,#12
      7898    010001EDAH        06801H    ldr      r1,[r0]
      7900    010001EDCH        09A01H    ldr      r2,[sp,#4]
      7902    010001EDEH        060D1H    str      r1,[r2,#12]
    SYSTEM.GET(stackFrameBase + 16, stackedRegs.r12);
      7904    010001EE0H        09800H    ldr      r0,[sp]
      7906    010001EE2H        03010H    adds     r0,#16
      7908    010001EE4H        06801H    ldr      r1,[r0]
      7910    010001EE6H        09A01H    ldr      r2,[sp,#4]
      7912    010001EE8H        06111H    str      r1,[r2,#16]
    SYSTEM.GET(stackFrameBase + 20, stackedRegs.lr);
      7914    010001EEAH        09800H    ldr      r0,[sp]
      7916    010001EECH        03014H    adds     r0,#20
      7918    010001EEEH        06801H    ldr      r1,[r0]
      7920    010001EF0H        09A01H    ldr      r2,[sp,#4]
      7922    010001EF2H        06151H    str      r1,[r2,#20]
    SYSTEM.GET(stackFrameBase + 24, stackedRegs.pc);
      7924    010001EF4H        09800H    ldr      r0,[sp]
      7926    010001EF6H        03018H    adds     r0,#24
      7928    010001EF8H        06801H    ldr      r1,[r0]
      7930    010001EFAH        09A01H    ldr      r2,[sp,#4]
      7932    010001EFCH        06191H    str      r1,[r2,#24]
    SYSTEM.GET(stackFrameBase + 28, stackedRegs.xpsr);
      7934    010001EFEH        09800H    ldr      r0,[sp]
      7936    010001F00H        0301CH    adds     r0,#28
      7938    010001F02H        06801H    ldr      r1,[r0]
      7940    010001F04H        09A01H    ldr      r2,[sp,#4]
      7942    010001F06H        061D1H    str      r1,[r2,#28]
    stackedRegs.sp := stackFrameBase
  END readRegs;
      7944    010001F08H        09800H    ldr      r0,[sp]
      7946    010001F0AH        09901H    ldr      r1,[sp,#4]
      7948    010001F0CH        06208H    str      r0,[r1,#32]
      7950    010001F0EH        0B003H    add      sp,#12
      7952    010001F10H        0BD00H    pop      { pc }
      7954    010001F12H        046C0H    nop

  PROCEDURE RuntimeErrors.traceStart(stackFrameBase: INTEGER): INTEGER;
    CONST StackAlignBit = 9;  
    VAR addr: INTEGER;
  BEGIN
      7956    010001F14H        0B501H    push     { r0, lr }
      7958    010001F16H        0B081H    sub      sp,#4
    addr := stackFrameBase + StartStacktraceOffset;
      7960    010001F18H        09801H    ldr      r0,[sp,#4]
      7962    010001F1AH        03020H    adds     r0,#32
      7964    010001F1CH        09000H    str      r0,[sp]
    IF SYSTEM.BIT(stackFrameBase + PSRoffset, StackAlignBit) THEN
      7966    010001F1EH        09801H    ldr      r0,[sp,#4]
      7968    010001F20H        0301CH    adds     r0,#28
      7970    010001F22H        06801H    ldr      r1,[r0]
      7972    010001F24H        00589H    lsls     r1,r1,#22
      7974    010001F26H        0D401H    bmi.n    2 -> 7980
      7976    010001F28H        0E003H    b        6 -> 7986
      7978    010001F2AH        046C0H    nop
      INC(addr, 4)
    END
      7980    010001F2CH        09800H    ldr      r0,[sp]
      7982    010001F2EH        03004H    adds     r0,#4
      7984    010001F30H        09000H    str      r0,[sp]
    RETURN addr
  END traceStart;
      7986    010001F32H        09800H    ldr      r0,[sp]
      7988    010001F34H        0B002H    add      sp,#8
      7990    010001F36H        0BD00H    pop      { pc }

  PROCEDURE RuntimeErrors.stackFrameBase(stackAddr, EXC_RETURN: INTEGER): INTEGER;
    VAR addr: INTEGER;
  BEGIN
      7992    010001F38H        0B503H    push     { r0, r1, lr }
      7994    010001F3AH        0B081H    sub      sp,#4
    IF 2 IN BITS(EXC_RETURN) THEN  
      7996    010001F3CH        09802H    ldr      r0,[sp,#8]
      7998    010001F3EH        02104H    movs     r1,#4
      8000    010001F40H        04208H    tst      r0,r1
      8002    010001F42H        0D101H    bne.n    2 -> 8008
      8004    010001F44H        0E006H    b        12 -> 8020
      8006    010001F46H        046C0H    nop
      SYSTEM.EMIT(MCU.MRS_R11_PSP);
      8008    010001F48H    0F3EF8B09H    .word 0x8B09F3EF /* EMIT */
      addr := SYSTEM.REG(11)
    ELSE  
      8012    010001F4CH        04658H    mov      r0,r11
      8014    010001F4EH        09000H    str      r0,[sp]
      addr := stackAddr
      8016    010001F50H        0E002H    b        4 -> 8024
      8018    010001F52H        046C0H    nop
    END
      8020    010001F54H        09801H    ldr      r0,[sp,#4]
      8022    010001F56H        09000H    str      r0,[sp]
    RETURN addr
  END stackFrameBase;
      8024    010001F58H        09800H    ldr      r0,[sp]
      8026    010001F5AH        0B003H    add      sp,#12
      8028    010001F5CH        0BD00H    pop      { pc }
      8030    010001F5EH        046C0H    nop

  PROCEDURE RuntimeErrors.errorHandler;
    VAR stackFrameAddr, cid: INTEGER;
  BEGIN
      8032    010001F60H        0B500H    push     { lr }
      8034    010001F62H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      8036    010001F64H        0486DH    ldr      r0,[pc,#436] -> 8476 ; Const 0D0000000H -805306368
      8038    010001F66H        06801H    ldr      r1,[r0]
      8040    010001F68H        09101H    str      r1,[sp,#4]
    IF exc[cid].currentRegsOn THEN
      8042    010001F6AH        09801H    ldr      r0,[sp,#4]
      8044    010001F6CH        02802H    cmp      r0,#2
      8046    010001F6EH        0D301H    bcc.n    2 -> 8052
      8048    010001F70H        0DF01H    svc      1
      8050    010001F72H        0011EH    ; LineNo: 286
      8052    010001F74H        0496EH    ldr      r1,[pc,#440] -> 8496 ; Global 02002FCD0H
      8054    010001F76H        022C8H    movs     r2,#200
      8056    010001F78H        04350H    muls     r0,r2
      8058    010001F7AH        01808H    adds     r0,r1,r0
      8060    010001F7CH        021C7H    movs     r1,#199
      8062    010001F7EH        05C40H    ldrb     r0,[r0,r1]
      8064    010001F80H        02101H    movs     r1,#1
      8066    010001F82H        04208H    tst      r0,r1
      8068    010001F84H        0D101H    bne.n    2 -> 8074
      8070    010001F86H        0E032H    b        100 -> 8174
      8072    010001F88H        046C0H    nop
      exc[cid].errorRec.currentRegs.pc := SYSTEM.REG(PC);  
      8074    010001F8AH        09801H    ldr      r0,[sp,#4]
      8076    010001F8CH        02802H    cmp      r0,#2
      8078    010001F8EH        0D301H    bcc.n    2 -> 8084
      8080    010001F90H        0DF01H    svc      1
      8082    010001F92H        0011FH    ; LineNo: 287
      8084    010001F94H        04966H    ldr      r1,[pc,#408] -> 8496 ; Global 02002FCD0H
      8086    010001F96H        022C8H    movs     r2,#200
      8088    010001F98H        04350H    muls     r0,r2
      8090    010001F9AH        01808H    adds     r0,r1,r0
      8092    010001F9CH        04679H    mov      r1,pc
      8094    010001F9EH        022B8H    movs     r2,#184
      8096    010001FA0H        05081H    str      r1,[r0,r2]
      exc[cid].errorRec.currentRegs.sp := SYSTEM.REG(SP);
      8098    010001FA2H        09801H    ldr      r0,[sp,#4]
      8100    010001FA4H        02802H    cmp      r0,#2
      8102    010001FA6H        0D301H    bcc.n    2 -> 8108
      8104    010001FA8H        0DF01H    svc      1
      8106    010001FAAH        00120H    ; LineNo: 288
      8108    010001FACH        04960H    ldr      r1,[pc,#384] -> 8496 ; Global 02002FCD0H
      8110    010001FAEH        022C8H    movs     r2,#200
      8112    010001FB0H        04350H    muls     r0,r2
      8114    010001FB2H        01808H    adds     r0,r1,r0
      8116    010001FB4H        04669H    mov      r1,sp
      8118    010001FB6H        022B0H    movs     r2,#176
      8120    010001FB8H        05081H    str      r1,[r0,r2]
      exc[cid].errorRec.currentRegs.lr := SYSTEM.REG(LR);
      8122    010001FBAH        09801H    ldr      r0,[sp,#4]
      8124    010001FBCH        02802H    cmp      r0,#2
      8126    010001FBEH        0D301H    bcc.n    2 -> 8132
      8128    010001FC0H        0DF01H    svc      1
      8130    010001FC2H        00121H    ; LineNo: 289
      8132    010001FC4H        0495AH    ldr      r1,[pc,#360] -> 8496 ; Global 02002FCD0H
      8134    010001FC6H        022C8H    movs     r2,#200
      8136    010001FC8H        04350H    muls     r0,r2
      8138    010001FCAH        01808H    adds     r0,r1,r0
      8140    010001FCCH        04671H    mov      r1,lr
      8142    010001FCEH        022B4H    movs     r2,#180
      8144    010001FD0H        05081H    str      r1,[r0,r2]
      SYSTEM.EMIT(MCU.MRS_R11_XPSR);
      8146    010001FD2H    0F3EF8B03H    .word 0x8B03F3EF /* EMIT */
      exc[cid].errorRec.currentRegs.xpsr := SYSTEM.REG(11);
      8150    010001FD6H        09801H    ldr      r0,[sp,#4]
      8152    010001FD8H        02802H    cmp      r0,#2
      8154    010001FDAH        0D301H    bcc.n    2 -> 8160
      8156    010001FDCH        0DF01H    svc      1
      8158    010001FDEH        00123H    ; LineNo: 291
      8160    010001FE0H        04953H    ldr      r1,[pc,#332] -> 8496 ; Global 02002FCD0H
      8162    010001FE2H        022C8H    movs     r2,#200
      8164    010001FE4H        04350H    muls     r0,r2
      8166    010001FE6H        01808H    adds     r0,r1,r0
      8168    010001FE8H        04659H    mov      r1,r11
      8170    010001FEAH        022BCH    movs     r2,#188
      8172    010001FECH        05081H    str      r1,[r0,r2]
    END;
    exc[cid].errorRec.core := cid;
      8174    010001FEEH        09801H    ldr      r0,[sp,#4]
      8176    010001FF0H        02802H    cmp      r0,#2
      8178    010001FF2H        0D301H    bcc.n    2 -> 8184
      8180    010001FF4H        0DF01H    svc      1
      8182    010001FF6H        00125H    ; LineNo: 293
      8184    010001FF8H        0494DH    ldr      r1,[pc,#308] -> 8496 ; Global 02002FCD0H
      8186    010001FFAH        022C8H    movs     r2,#200
      8188    010001FFCH        04350H    muls     r0,r2
      8190    010001FFEH        01808H    adds     r0,r1,r0
      8192    010002000H        09901H    ldr      r1,[sp,#4]
      8194    010002002H        06441H    str      r1,[r0,#68]
    stackFrameAddr := stackFrameBase(SYSTEM.REG(SP) + 12, SYSTEM.REG(LR));  
      8196    010002004H        04668H    mov      r0,sp
      8198    010002006H        0300CH    adds     r0,#12
      8200    010002008H        04671H    mov      r1,lr
      8202    01000200AH    0F7FFFF95H    bl.w     RuntimeErrors.stackFrameBase
      8206    01000200EH        0E000H    b        0 -> 8210
      8208    010002010H        00126H    ; LineNo: 294
      8210    010002012H        09000H    str      r0,[sp]
    IF exc[cid].stackedRegsOn THEN
      8212    010002014H        09801H    ldr      r0,[sp,#4]
      8214    010002016H        02802H    cmp      r0,#2
      8216    010002018H        0D301H    bcc.n    2 -> 8222
      8218    01000201AH        0DF01H    svc      1
      8220    01000201CH        00127H    ; LineNo: 295
      8222    01000201EH        04944H    ldr      r1,[pc,#272] -> 8496 ; Global 02002FCD0H
      8224    010002020H        022C8H    movs     r2,#200
      8226    010002022H        04350H    muls     r0,r2
      8228    010002024H        01808H    adds     r0,r1,r0
      8230    010002026H        021C6H    movs     r1,#198
      8232    010002028H        05C40H    ldrb     r0,[r0,r1]
      8234    01000202AH        02101H    movs     r1,#1
      8236    01000202CH        04208H    tst      r0,r1
      8238    01000202EH        0D101H    bne.n    2 -> 8244
      8240    010002030H        0E012H    b        36 -> 8280
      8242    010002032H        046C0H    nop
      readRegs(stackFrameAddr, exc[cid].errorRec.stackedRegs)
      8244    010002034H        09800H    ldr      r0,[sp]
      8246    010002036H        09901H    ldr      r1,[sp,#4]
      8248    010002038H        02902H    cmp      r1,#2
      8250    01000203AH        0D301H    bcc.n    2 -> 8256
      8252    01000203CH        0DF01H    svc      1
      8254    01000203EH        00128H    ; LineNo: 296
      8256    010002040H        04A3BH    ldr      r2,[pc,#236] -> 8496 ; Global 02002FCD0H
      8258    010002042H        023C8H    movs     r3,#200
      8260    010002044H        04359H    muls     r1,r3
      8262    010002046H        01851H    adds     r1,r2,r1
      8264    010002048H        0318CH    adds     r1,#140
      8266    01000204AH        04A35H    ldr      r2,[pc,#212] -> 8480 ; Const 0FFFFFB6CH -1172
      8268    01000204CH        0467BH    mov      r3,pc
      8270    01000204EH        018D2H    adds     r2,r2,r3
    END;
      8272    010002050H    0F7FFFF32H    bl.w     RuntimeErrors.readRegs
      8276    010002054H        0E000H    b        0 -> 8280
      8278    010002056H        00128H    ; LineNo: 296
    extractError(stackFrameAddr, exc[cid].errorRec);
      8280    010002058H        09800H    ldr      r0,[sp]
      8282    01000205AH        09901H    ldr      r1,[sp,#4]
      8284    01000205CH        02902H    cmp      r1,#2
      8286    01000205EH        0D301H    bcc.n    2 -> 8292
      8288    010002060H        0DF01H    svc      1
      8290    010002062H        0012AH    ; LineNo: 298
      8292    010002064H        04A32H    ldr      r2,[pc,#200] -> 8496 ; Global 02002FCD0H
      8294    010002066H        023C8H    movs     r3,#200
      8296    010002068H        04359H    muls     r1,r3
      8298    01000206AH        01851H    adds     r1,r2,r1
      8300    01000206CH        03140H    adds     r1,#64
      8302    01000206EH        04A2DH    ldr      r2,[pc,#180] -> 8484 ; Const 0FFFFFB98H -1128
      8304    010002070H        0467BH    mov      r3,pc
      8306    010002072H        018D2H    adds     r2,r2,r3
      8308    010002074H    0F7FFFEE6H    bl.w     RuntimeErrors.extractError
      8312    010002078H        0E000H    b        0 -> 8316
      8314    01000207AH        0012AH    ; LineNo: 298
    IF exc[cid].stackTraceOn THEN
      8316    01000207CH        09801H    ldr      r0,[sp,#4]
      8318    01000207EH        02802H    cmp      r0,#2
      8320    010002080H        0D301H    bcc.n    2 -> 8326
      8322    010002082H        0DF01H    svc      1
      8324    010002084H        0012BH    ; LineNo: 299
      8326    010002086H        0492AH    ldr      r1,[pc,#168] -> 8496 ; Global 02002FCD0H
      8328    010002088H        022C8H    movs     r2,#200
      8330    01000208AH        04350H    muls     r0,r2
      8332    01000208CH        01808H    adds     r0,r1,r0
      8334    01000208EH        021C5H    movs     r1,#197
      8336    010002090H        05C40H    ldrb     r0,[r0,r1]
      8338    010002092H        02101H    movs     r1,#1
      8340    010002094H        04208H    tst      r0,r1
      8342    010002096H        0D101H    bne.n    2 -> 8348
      8344    010002098H        0E016H    b        44 -> 8392
      8346    01000209AH        046C0H    nop
      Stacktrace(traceStart(stackFrameAddr), exc[cid].errorRec.trace)
      8348    01000209CH        09800H    ldr      r0,[sp]
      8350    01000209EH    0F7FFFF39H    bl.w     RuntimeErrors.traceStart
      8354    0100020A2H        0E000H    b        0 -> 8358
      8356    0100020A4H        0012CH    ; LineNo: 300
      8358    0100020A6H        09901H    ldr      r1,[sp,#4]
      8360    0100020A8H        02902H    cmp      r1,#2
      8362    0100020AAH        0D301H    bcc.n    2 -> 8368
      8364    0100020ACH        0DF01H    svc      1
      8366    0100020AEH        0012CH    ; LineNo: 300
      8368    0100020B0H        04A1FH    ldr      r2,[pc,#124] -> 8496 ; Global 02002FCD0H
      8370    0100020B2H        023C8H    movs     r3,#200
      8372    0100020B4H        04359H    muls     r1,r3
      8374    0100020B6H        01851H    adds     r1,r2,r1
      8376    0100020B8H        03148H    adds     r1,#72
      8378    0100020BAH        04A1BH    ldr      r2,[pc,#108] -> 8488 ; Const 0FFFFFAE8H -1304
      8380    0100020BCH        0467BH    mov      r3,pc
      8382    0100020BEH        018D2H    adds     r2,r2,r3
    END;
      8384    0100020C0H    0F7FFFE66H    bl.w     RuntimeErrors.Stacktrace
      8388    0100020C4H        0E000H    b        0 -> 8392
      8390    0100020C6H        0012CH    ; LineNo: 300
    exc[cid].handleException(cid, exc[cid].errorRec);
      8392    0100020C8H        09801H    ldr      r0,[sp,#4]
      8394    0100020CAH        02802H    cmp      r0,#2
      8396    0100020CCH        0D301H    bcc.n    2 -> 8402
      8398    0100020CEH        0DF01H    svc      1
      8400    0100020D0H        0012EH    ; LineNo: 302
      8402    0100020D2H        04917H    ldr      r1,[pc,#92] -> 8496 ; Global 02002FCD0H
      8404    0100020D4H        022C8H    movs     r2,#200
      8406    0100020D6H        04350H    muls     r0,r2
      8408    0100020D8H        01808H    adds     r0,r1,r0
      8410    0100020DAH        021C0H    movs     r1,#192
      8412    0100020DCH        05840H    ldr      r0,[r0,r1]
      8414    0100020DEH        0B401H    push     { r0 }
      8416    0100020E0H        09802H    ldr      r0,[sp,#8]
      8418    0100020E2H        09902H    ldr      r1,[sp,#8]
      8420    0100020E4H        02902H    cmp      r1,#2
      8422    0100020E6H        0D301H    bcc.n    2 -> 8428
      8424    0100020E8H        0DF01H    svc      1
      8426    0100020EAH        0012EH    ; LineNo: 302
      8428    0100020ECH        04A10H    ldr      r2,[pc,#64] -> 8496 ; Global 02002FCD0H
      8430    0100020EEH        023C8H    movs     r3,#200
      8432    0100020F0H        04359H    muls     r1,r3
      8434    0100020F2H        01851H    adds     r1,r2,r1
      8436    0100020F4H        03140H    adds     r1,#64
      8438    0100020F6H        04A0DH    ldr      r2,[pc,#52] -> 8492 ; Const 0FFFFFB10H -1264
      8440    0100020F8H        0467BH    mov      r3,pc
      8442    0100020FAH        018D2H    adds     r2,r2,r3
      8444    0100020FCH        0BC08H    pop      { r3 }
      8446    0100020FEH        02B00H    cmp      r3,#0
      8448    010002100H        0D101H    bne.n    2 -> 8454
      8450    010002102H        0DF05H    svc      5
      8452    010002104H        0012EH    ; LineNo: 302
      8454    010002106H        03301H    adds     r3,#1
      8456    010002108H        04798H    blx      r3
      8458    01000210AH        0E000H    b        0 -> 8462
      8460    01000210CH        0012DH    ; LineNo: 301
    HALT(cid)
      8462    01000210EH        09801H    ldr      r0,[sp,#4]
  END errorHandler;
      8464    010002110H    0F7FFFD90H    bl.w     RuntimeErrors.HALT
      8468    010002114H        0E000H    b        0 -> 8472
      8470    010002116H        00130H    ; LineNo: 304
      8472    010002118H        0B002H    add      sp,#8
      8474    01000211AH        0BD00H    pop      { pc }
      8476    01000211CH    0D0000000H    ; Const 0D0000000H -805306368
      8480    010002120H    0FFFFFB6CH    ; Const 0FFFFFB6CH -1172
      8484    010002124H    0FFFFFB98H    ; Const 0FFFFFB98H -1128
      8488    010002128H    0FFFFFAE8H    ; Const 0FFFFFAE8H -1304
      8492    01000212CH    0FFFFFB10H    ; Const 0FFFFFB10H -1264
      8496    010002130H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE RuntimeErrors.faultHandler;
    VAR stackFrameAddr, cid: INTEGER;
  BEGIN
      8500    010002134H        0B500H    push     { lr }
      8502    010002136H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
      8504    010002138H        04857H    ldr      r0,[pc,#348] -> 8856 ; Const 0D0000000H -805306368
      8506    01000213AH        06801H    ldr      r1,[r0]
      8508    01000213CH        09101H    str      r1,[sp,#4]
    IF exc[cid].currentRegsOn THEN
      8510    01000213EH        09801H    ldr      r0,[sp,#4]
      8512    010002140H        02802H    cmp      r0,#2
      8514    010002142H        0D301H    bcc.n    2 -> 8520
      8516    010002144H        0DF01H    svc      1
      8518    010002146H        0013AH    ; LineNo: 314
      8520    010002148H        04957H    ldr      r1,[pc,#348] -> 8872 ; Global 02002FCD0H
      8522    01000214AH        022C8H    movs     r2,#200
      8524    01000214CH        04350H    muls     r0,r2
      8526    01000214EH        01808H    adds     r0,r1,r0
      8528    010002150H        021C7H    movs     r1,#199
      8530    010002152H        05C40H    ldrb     r0,[r0,r1]
      8532    010002154H        02101H    movs     r1,#1
      8534    010002156H        04208H    tst      r0,r1
      8536    010002158H        0D101H    bne.n    2 -> 8542
      8538    01000215AH        0E02EH    b        92 -> 8634
      8540    01000215CH        046C0H    nop
      exc[cid].faultRec.currentRegs.pc := SYSTEM.REG(PC);
      8542    01000215EH        09801H    ldr      r0,[sp,#4]
      8544    010002160H        02802H    cmp      r0,#2
      8546    010002162H        0D301H    bcc.n    2 -> 8552
      8548    010002164H        0DF01H    svc      1
      8550    010002166H        0013BH    ; LineNo: 315
      8552    010002168H        0494FH    ldr      r1,[pc,#316] -> 8872 ; Global 02002FCD0H
      8554    01000216AH        022C8H    movs     r2,#200
      8556    01000216CH        04350H    muls     r0,r2
      8558    01000216EH        01808H    adds     r0,r1,r0
      8560    010002170H        04679H    mov      r1,pc
      8562    010002172H        06381H    str      r1,[r0,#56]
      exc[cid].faultRec.currentRegs.sp := SYSTEM.REG(SP);
      8564    010002174H        09801H    ldr      r0,[sp,#4]
      8566    010002176H        02802H    cmp      r0,#2
      8568    010002178H        0D301H    bcc.n    2 -> 8574
      8570    01000217AH        0DF01H    svc      1
      8572    01000217CH        0013CH    ; LineNo: 316
      8574    01000217EH        0494AH    ldr      r1,[pc,#296] -> 8872 ; Global 02002FCD0H
      8576    010002180H        022C8H    movs     r2,#200
      8578    010002182H        04350H    muls     r0,r2
      8580    010002184H        01808H    adds     r0,r1,r0
      8582    010002186H        04669H    mov      r1,sp
      8584    010002188H        06301H    str      r1,[r0,#48]
      exc[cid].faultRec.currentRegs.lr := SYSTEM.REG(LR);
      8586    01000218AH        09801H    ldr      r0,[sp,#4]
      8588    01000218CH        02802H    cmp      r0,#2
      8590    01000218EH        0D301H    bcc.n    2 -> 8596
      8592    010002190H        0DF01H    svc      1
      8594    010002192H        0013DH    ; LineNo: 317
      8596    010002194H        04944H    ldr      r1,[pc,#272] -> 8872 ; Global 02002FCD0H
      8598    010002196H        022C8H    movs     r2,#200
      8600    010002198H        04350H    muls     r0,r2
      8602    01000219AH        01808H    adds     r0,r1,r0
      8604    01000219CH        04671H    mov      r1,lr
      8606    01000219EH        06341H    str      r1,[r0,#52]
      SYSTEM.EMIT(MCU.MRS_R11_XPSR);
      8608    0100021A0H    0F3EF8B03H    .word 0x8B03F3EF /* EMIT */
      exc[cid].faultRec.currentRegs.xpsr := SYSTEM.REG(11)
      8612    0100021A4H        09801H    ldr      r0,[sp,#4]
      8614    0100021A6H        02802H    cmp      r0,#2
      8616    0100021A8H        0D301H    bcc.n    2 -> 8622
      8618    0100021AAH        0DF01H    svc      1
      8620    0100021ACH        0013FH    ; LineNo: 319
      8622    0100021AEH        0493EH    ldr      r1,[pc,#248] -> 8872 ; Global 02002FCD0H
      8624    0100021B0H        022C8H    movs     r2,#200
      8626    0100021B2H        04350H    muls     r0,r2
      8628    0100021B4H        01808H    adds     r0,r1,r0
    END;
      8630    0100021B6H        04659H    mov      r1,r11
      8632    0100021B8H        063C1H    str      r1,[r0,#60]
    exc[cid].faultRec.core := cid;
      8634    0100021BAH        09801H    ldr      r0,[sp,#4]
      8636    0100021BCH        02802H    cmp      r0,#2
      8638    0100021BEH        0D301H    bcc.n    2 -> 8644
      8640    0100021C0H        0DF01H    svc      1
      8642    0100021C2H        00141H    ; LineNo: 321
      8644    0100021C4H        04938H    ldr      r1,[pc,#224] -> 8872 ; Global 02002FCD0H
      8646    0100021C6H        022C8H    movs     r2,#200
      8648    0100021C8H        04350H    muls     r0,r2
      8650    0100021CAH        01808H    adds     r0,r1,r0
      8652    0100021CCH        09901H    ldr      r1,[sp,#4]
      8654    0100021CEH        06041H    str      r1,[r0,#4]
    stackFrameAddr := stackFrameBase(SYSTEM.REG(SP) + 12, SYSTEM.REG(LR));  
      8656    0100021D0H        04668H    mov      r0,sp
      8658    0100021D2H        0300CH    adds     r0,#12
      8660    0100021D4H        04671H    mov      r1,lr
      8662    0100021D6H    0F7FFFEAFH    bl.w     RuntimeErrors.stackFrameBase
      8666    0100021DAH        0E000H    b        0 -> 8670
      8668    0100021DCH        00142H    ; LineNo: 322
      8670    0100021DEH        09000H    str      r0,[sp]
    IF exc[cid].stackedRegsOn THEN
      8672    0100021E0H        09801H    ldr      r0,[sp,#4]
      8674    0100021E2H        02802H    cmp      r0,#2
      8676    0100021E4H        0D301H    bcc.n    2 -> 8682
      8678    0100021E6H        0DF01H    svc      1
      8680    0100021E8H        00143H    ; LineNo: 323
      8682    0100021EAH        0492FH    ldr      r1,[pc,#188] -> 8872 ; Global 02002FCD0H
      8684    0100021ECH        022C8H    movs     r2,#200
      8686    0100021EEH        04350H    muls     r0,r2
      8688    0100021F0H        01808H    adds     r0,r1,r0
      8690    0100021F2H        021C6H    movs     r1,#198
      8692    0100021F4H        05C40H    ldrb     r0,[r0,r1]
      8694    0100021F6H        02101H    movs     r1,#1
      8696    0100021F8H        04208H    tst      r0,r1
      8698    0100021FAH        0D101H    bne.n    2 -> 8704
      8700    0100021FCH        0E012H    b        36 -> 8740
      8702    0100021FEH        046C0H    nop
      readRegs(stackFrameAddr, exc[cid].faultRec.stackedRegs)
      8704    010002200H        09800H    ldr      r0,[sp]
      8706    010002202H        09901H    ldr      r1,[sp,#4]
      8708    010002204H        02902H    cmp      r1,#2
      8710    010002206H        0D301H    bcc.n    2 -> 8716
      8712    010002208H        0DF01H    svc      1
      8714    01000220AH        00144H    ; LineNo: 324
      8716    01000220CH        04A26H    ldr      r2,[pc,#152] -> 8872 ; Global 02002FCD0H
      8718    01000220EH        023C8H    movs     r3,#200
      8720    010002210H        04359H    muls     r1,r3
      8722    010002212H        01851H    adds     r1,r2,r1
      8724    010002214H        0310CH    adds     r1,#12
      8726    010002216H        04A21H    ldr      r2,[pc,#132] -> 8860 ; Const 0FFFFF9A0H -1632
      8728    010002218H        0467BH    mov      r3,pc
      8730    01000221AH        018D2H    adds     r2,r2,r3
    END;
      8732    01000221CH    0F7FFFE4CH    bl.w     RuntimeErrors.readRegs
      8736    010002220H        0E000H    b        0 -> 8740
      8738    010002222H        00144H    ; LineNo: 324
    extractFault(stackFrameAddr, exc[cid].faultRec);
      8740    010002224H        09800H    ldr      r0,[sp]
      8742    010002226H        09901H    ldr      r1,[sp,#4]
      8744    010002228H        02902H    cmp      r1,#2
      8746    01000222AH        0D301H    bcc.n    2 -> 8752
      8748    01000222CH        0DF01H    svc      1
      8750    01000222EH        00146H    ; LineNo: 326
      8752    010002230H        04A1DH    ldr      r2,[pc,#116] -> 8872 ; Global 02002FCD0H
      8754    010002232H        023C8H    movs     r3,#200
      8756    010002234H        04359H    muls     r1,r3
      8758    010002236H        01851H    adds     r1,r2,r1
      8760    010002238H        04A19H    ldr      r2,[pc,#100] -> 8864 ; Const 0FFFFF9BAH -1606
      8762    01000223AH        0467BH    mov      r3,pc
      8764    01000223CH        018D2H    adds     r2,r2,r3
      8766    01000223EH    0F7FFFE2DH    bl.w     RuntimeErrors.extractFault
      8770    010002242H        0E000H    b        0 -> 8774
      8772    010002244H        00146H    ; LineNo: 326
    exc[cid].handleException(cid, exc[cid].faultRec);
      8774    010002246H        09801H    ldr      r0,[sp,#4]
      8776    010002248H        02802H    cmp      r0,#2
      8778    01000224AH        0D301H    bcc.n    2 -> 8784
      8780    01000224CH        0DF01H    svc      1
      8782    01000224EH        00147H    ; LineNo: 327
      8784    010002250H        04915H    ldr      r1,[pc,#84] -> 8872 ; Global 02002FCD0H
      8786    010002252H        022C8H    movs     r2,#200
      8788    010002254H        04350H    muls     r0,r2
      8790    010002256H        01808H    adds     r0,r1,r0
      8792    010002258H        021C0H    movs     r1,#192
      8794    01000225AH        05840H    ldr      r0,[r0,r1]
      8796    01000225CH        0B401H    push     { r0 }
      8798    01000225EH        09802H    ldr      r0,[sp,#8]
      8800    010002260H        09902H    ldr      r1,[sp,#8]
      8802    010002262H        02902H    cmp      r1,#2
      8804    010002264H        0D301H    bcc.n    2 -> 8810
      8806    010002266H        0DF01H    svc      1
      8808    010002268H        00147H    ; LineNo: 327
      8810    01000226AH        04A0FH    ldr      r2,[pc,#60] -> 8872 ; Global 02002FCD0H
      8812    01000226CH        023C8H    movs     r3,#200
      8814    01000226EH        04359H    muls     r1,r3
      8816    010002270H        01851H    adds     r1,r2,r1
      8818    010002272H        04A0CH    ldr      r2,[pc,#48] -> 8868 ; Const 0FFFFF980H -1664
      8820    010002274H        0467BH    mov      r3,pc
      8822    010002276H        018D2H    adds     r2,r2,r3
      8824    010002278H        0BC08H    pop      { r3 }
      8826    01000227AH        02B00H    cmp      r3,#0
      8828    01000227CH        0D101H    bne.n    2 -> 8834
      8830    01000227EH        0DF05H    svc      5
      8832    010002280H        00147H    ; LineNo: 327
      8834    010002282H        03301H    adds     r3,#1
      8836    010002284H        04798H    blx      r3
      8838    010002286H        0E000H    b        0 -> 8842
      8840    010002288H        00146H    ; LineNo: 326
    HALT(cid)
      8842    01000228AH        09801H    ldr      r0,[sp,#4]
  END faultHandler;
      8844    01000228CH    0F7FFFCD2H    bl.w     RuntimeErrors.HALT
      8848    010002290H        0E000H    b        0 -> 8852
      8850    010002292H        00148H    ; LineNo: 328
      8852    010002294H        0B002H    add      sp,#8
      8854    010002296H        0BD00H    pop      { pc }
      8856    010002298H    0D0000000H    ; Const 0D0000000H -805306368
      8860    01000229CH    0FFFFF9A0H    ; Const 0FFFFF9A0H -1632
      8864    0100022A0H    0FFFFF9BAH    ; Const 0FFFFF9BAH -1606
      8868    0100022A4H    0FFFFF980H    ; Const 0FFFFF980H -1664
      8872    0100022A8H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE* RuntimeErrors.SetHandler*(cpuId: INTEGER; eh: PROCEDURE(cpuId: INTEGER; er: ExceptionRec));
  BEGIN
      8876    0100022ACH        0B503H    push     { r0, r1, lr }
    exc[cpuId].handleException := eh
      8878    0100022AEH        09800H    ldr      r0,[sp]
      8880    0100022B0H        04904H    ldr      r1,[pc,#16] -> 8900 ; Global 02002FCD0H
      8882    0100022B2H        022C8H    movs     r2,#200
      8884    0100022B4H        04350H    muls     r0,r2
      8886    0100022B6H        01808H    adds     r0,r1,r0
  END SetHandler;
      8888    0100022B8H        09901H    ldr      r1,[sp,#4]
      8890    0100022BAH        022C0H    movs     r2,#192
      8892    0100022BCH        05081H    str      r1,[r0,r2]
      8894    0100022BEH        0B002H    add      sp,#8
      8896    0100022C0H        0BD00H    pop      { pc }
      8898    0100022C2H        046C0H    nop
      8900    0100022C4H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE* RuntimeErrors.SetHalt*(cpuId: INTEGER; on: BOOLEAN);
  BEGIN
      8904    0100022C8H        0B503H    push     { r0, r1, lr }
    exc[cpuId].haltOn := on
      8906    0100022CAH        09800H    ldr      r0,[sp]
      8908    0100022CCH        04904H    ldr      r1,[pc,#16] -> 8928 ; Global 02002FCD0H
      8910    0100022CEH        022C8H    movs     r2,#200
      8912    0100022D0H        04350H    muls     r0,r2
      8914    0100022D2H        01808H    adds     r0,r1,r0
  END SetHalt;
      8916    0100022D4H        0A901H    add      r1,sp,#4
      8918    0100022D6H        07809H    ldrb     r1,[r1]
      8920    0100022D8H        022C4H    movs     r2,#196
      8922    0100022DAH        05481H    strb     r1,[r0,r2]
      8924    0100022DCH        0B002H    add      sp,#8
      8926    0100022DEH        0BD00H    pop      { pc }
      8928    0100022E0H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE RuntimeErrors.SetStacktraceOn*(cpuId: INTEGER; on: BOOLEAN);
  BEGIN
      8932    0100022E4H        0B503H    push     { r0, r1, lr }
    exc[cpuId].stackTraceOn := on
      8934    0100022E6H        09800H    ldr      r0,[sp]
      8936    0100022E8H        02802H    cmp      r0,#2
      8938    0100022EAH        0D301H    bcc.n    2 -> 8944
      8940    0100022ECH        0DF01H    svc      1
      8942    0100022EEH        00158H    ; LineNo: 344
      8944    0100022F0H        04904H    ldr      r1,[pc,#16] -> 8964 ; Global 02002FCD0H
      8946    0100022F2H        022C8H    movs     r2,#200
      8948    0100022F4H        04350H    muls     r0,r2
      8950    0100022F6H        01808H    adds     r0,r1,r0
  END SetStacktraceOn;
      8952    0100022F8H        0A901H    add      r1,sp,#4
      8954    0100022FAH        07809H    ldrb     r1,[r1]
      8956    0100022FCH        022C5H    movs     r2,#197
      8958    0100022FEH        05481H    strb     r1,[r0,r2]
      8960    010002300H        0B002H    add      sp,#8
      8962    010002302H        0BD00H    pop      { pc }
      8964    010002304H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE RuntimeErrors.SetStackedRegsOn*(cpuId: INTEGER; on: BOOLEAN);
  BEGIN
      8968    010002308H        0B503H    push     { r0, r1, lr }
    exc[cpuId].stackedRegsOn := on
      8970    01000230AH        09800H    ldr      r0,[sp]
      8972    01000230CH        02802H    cmp      r0,#2
      8974    01000230EH        0D301H    bcc.n    2 -> 8980
      8976    010002310H        0DF01H    svc      1
      8978    010002312H        0015DH    ; LineNo: 349
      8980    010002314H        04904H    ldr      r1,[pc,#16] -> 9000 ; Global 02002FCD0H
      8982    010002316H        022C8H    movs     r2,#200
      8984    010002318H        04350H    muls     r0,r2
      8986    01000231AH        01808H    adds     r0,r1,r0
  END SetStackedRegsOn;
      8988    01000231CH        0A901H    add      r1,sp,#4
      8990    01000231EH        07809H    ldrb     r1,[r1]
      8992    010002320H        022C6H    movs     r2,#198
      8994    010002322H        05481H    strb     r1,[r0,r2]
      8996    010002324H        0B002H    add      sp,#8
      8998    010002326H        0BD00H    pop      { pc }
      9000    010002328H    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE RuntimeErrors.SetCurrentRegsOn*(cpuId: INTEGER; on: BOOLEAN);
  BEGIN
      9004    01000232CH        0B503H    push     { r0, r1, lr }
    exc[cpuId].currentRegsOn := on
      9006    01000232EH        09800H    ldr      r0,[sp]
      9008    010002330H        02802H    cmp      r0,#2
      9010    010002332H        0D301H    bcc.n    2 -> 9016
      9012    010002334H        0DF01H    svc      1
      9014    010002336H        00162H    ; LineNo: 354
      9016    010002338H        04904H    ldr      r1,[pc,#16] -> 9036 ; Global 02002FCD0H
      9018    01000233AH        022C8H    movs     r2,#200
      9020    01000233CH        04350H    muls     r0,r2
      9022    01000233EH        01808H    adds     r0,r1,r0
  END SetCurrentRegsOn;
      9024    010002340H        0A901H    add      r1,sp,#4
      9026    010002342H        07809H    ldrb     r1,[r1]
      9028    010002344H        022C7H    movs     r2,#199
      9030    010002346H        05481H    strb     r1,[r0,r2]
      9032    010002348H        0B002H    add      sp,#8
      9034    01000234AH        0BD00H    pop      { pc }
      9036    01000234CH    02002FCD0H    ; Global 02002FCD0H

  PROCEDURE* RuntimeErrors.install(vectAddr: INTEGER; p: PROCEDURE);
  BEGIN
      9040    010002350H        0B503H    push     { r0, r1, lr }
    INCL(SYSTEM.VAL(SET, p), 0);  
      9042    010002352H        09801H    ldr      r0,[sp,#4]
      9044    010002354H        02101H    movs     r1,#1
      9046    010002356H        04308H    orrs     r0,r1
      9048    010002358H        09001H    str      r0,[sp,#4]
    SYSTEM.PUT(vectAddr, p)
  END install;
      9050    01000235AH        09800H    ldr      r0,[sp]
      9052    01000235CH        09901H    ldr      r1,[sp,#4]
      9054    01000235EH        06001H    str      r1,[r0]
      9056    010002360H        0B002H    add      sp,#8
      9058    010002362H        0BD00H    pop      { pc }

  PROCEDURE RuntimeErrors.ledOnAndHalt(cid: INTEGER; er: ExceptionRec);
  BEGIN
      9060    010002364H        0B507H    push     { r0, r1, r2, lr }
    SYSTEM.PUT(LED.SET, ErrorLed);
      9062    010002366H        04803H    ldr      r0,[pc,#12] -> 9076 ; Const 0D0000014H -805306348
      9064    010002368H        02119H    movs     r1,#25
      9066    01000236AH        06001H    str      r1,[r0]
    REPEAT UNTIL FALSE  
  END ledOnAndHalt;
      9068    01000236CH        04280H    cmp      r0,r0
      9070    01000236EH        0D0FDH    beq.n    -6 -> 9068
      9072    010002370H        0B003H    add      sp,#12
      9074    010002372H        0BD00H    pop      { pc }
      9076    010002374H    0D0000014H    ; Const 0D0000014H -805306348

  PROCEDURE RuntimeErrors.init;
    VAR i, addr, vectorTableBase, vectorTableTop: INTEGER;
  BEGIN
      9080    010002378H        0B500H    push     { lr }
      9082    01000237AH        0B084H    sub      sp,#16
    i := 0;
      9084    01000237CH        02000H    movs     r0,#0
      9086    01000237EH        09000H    str      r0,[sp]
    WHILE i < NumCores DO
      9088    010002380H        09800H    ldr      r0,[sp]
      9090    010002382H        02802H    cmp      r0,#2
      9092    010002384H        0DB01H    blt.n    2 -> 9098
      9094    010002386H        0E059H    b        178 -> 9276
      9096    010002388H        046C0H    nop
      SYSTEM.PUT(Memory.DataMem[i].stackStart, Memory.DataMem[i].stackStart);
      9098    01000238AH        09800H    ldr      r0,[sp]
      9100    01000238CH        02802H    cmp      r0,#2
      9102    01000238EH        0D301H    bcc.n    2 -> 9108
      9104    010002390H        0DF01H    svc      1
      9106    010002392H        0017BH    ; LineNo: 379
      9108    010002394H        04954H    ldr      r1,[pc,#336] -> 9448 ; Global 02002FF98H
      9110    010002396H        000C0H    lsls     r0,r0,#3
      9112    010002398H        01808H    adds     r0,r1,r0
      9114    01000239AH        09900H    ldr      r1,[sp]
      9116    01000239CH        02902H    cmp      r1,#2
      9118    01000239EH        0D301H    bcc.n    2 -> 9124
      9120    0100023A0H        0DF01H    svc      1
      9122    0100023A2H        0017BH    ; LineNo: 379
      9124    0100023A4H        04A50H    ldr      r2,[pc,#320] -> 9448 ; Global 02002FF98H
      9126    0100023A6H        000C9H    lsls     r1,r1,#3
      9128    0100023A8H        01851H    adds     r1,r2,r1
      9130    0100023AAH        06800H    ldr      r0,[r0]
      9132    0100023ACH        06809H    ldr      r1,[r1]
      9134    0100023AEH        06001H    str      r1,[r0]
      IF i = 0 THEN
      9136    0100023B0H        09800H    ldr      r0,[sp]
      9138    0100023B2H        02800H    cmp      r0,#0
      9140    0100023B4H        0D001H    beq.n    2 -> 9146
      9142    0100023B6H        0E004H    b        8 -> 9154
      9144    0100023B8H        046C0H    nop
        SYSTEM.PUT(MCU.SCB_VTOR, Memory.DataMem[0].dataStart)
      9146    0100023BAH        0484BH    ldr      r0,[pc,#300] -> 9448 ; Global 02002FF98H
      END;
      9148    0100023BCH        04944H    ldr      r1,[pc,#272] -> 9424 ; Const 0E000ED08H -536810232
      9150    0100023BEH        06840H    ldr      r0,[r0,#4]
      9152    0100023C0H        06008H    str      r0,[r1]
      vectorTableBase := Memory.DataMem[i].dataStart;
      9154    0100023C2H        09800H    ldr      r0,[sp]
      9156    0100023C4H        02802H    cmp      r0,#2
      9158    0100023C6H        0D301H    bcc.n    2 -> 9164
      9160    0100023C8H        0DF01H    svc      1
      9162    0100023CAH        00184H    ; LineNo: 388
      9164    0100023CCH        04946H    ldr      r1,[pc,#280] -> 9448 ; Global 02002FF98H
      9166    0100023CEH        000C0H    lsls     r0,r0,#3
      9168    0100023D0H        01808H    adds     r0,r1,r0
      9170    0100023D2H        06840H    ldr      r0,[r0,#4]
      9172    0100023D4H        09002H    str      r0,[sp,#8]
      vectorTableTop := vectorTableBase + MCU.VectorTableSize;
      9174    0100023D6H        09802H    ldr      r0,[sp,#8]
      9176    0100023D8H        030C0H    adds     r0,#192
      9178    0100023DAH        09003H    str      r0,[sp,#12]
      install(vectorTableBase + MCU.NMIhandlerOffset, faultHandler);
      9180    0100023DCH        09802H    ldr      r0,[sp,#8]
      9182    0100023DEH        03008H    adds     r0,#8
      9184    0100023E0H        0493CH    ldr      r1,[pc,#240] -> 9428 ; Const 0FFFFFD4EH -690
      9186    0100023E2H        04479H    add      r1,pc
      9188    0100023E4H    0F7FFFFB4H    bl.w     RuntimeErrors.install
      9192    0100023E8H        0E000H    b        0 -> 9196
      9194    0100023EAH        00186H    ; LineNo: 390
      install(vectorTableBase + MCU.HardFaultHandlerOffset, faultHandler);
      9196    0100023ECH        09802H    ldr      r0,[sp,#8]
      9198    0100023EEH        0300CH    adds     r0,#12
      9200    0100023F0H        04939H    ldr      r1,[pc,#228] -> 9432 ; Const 0FFFFFD3EH -706
      9202    0100023F2H        04479H    add      r1,pc
      9204    0100023F4H    0F7FFFFACH    bl.w     RuntimeErrors.install
      9208    0100023F8H        0E000H    b        0 -> 9212
      9210    0100023FAH        00187H    ; LineNo: 391
      install(vectorTableBase + MCU.SVChandlerOffset, errorHandler);
      9212    0100023FCH        09802H    ldr      r0,[sp,#8]
      9214    0100023FEH        0302CH    adds     r0,#44
      9216    010002400H        04936H    ldr      r1,[pc,#216] -> 9436 ; Const 0FFFFFB5AH -1190
      9218    010002402H        04479H    add      r1,pc
      9220    010002404H    0F7FFFFA4H    bl.w     RuntimeErrors.install
      9224    010002408H        0E000H    b        0 -> 9228
      9226    01000240AH        00188H    ; LineNo: 392
      addr := vectorTableBase + MCU.MissingHandlerOffset;
      9228    01000240CH        09802H    ldr      r0,[sp,#8]
      9230    01000240EH        03038H    adds     r0,#56
      9232    010002410H        09001H    str      r0,[sp,#4]
      WHILE addr < vectorTableTop DO
      9234    010002412H        09801H    ldr      r0,[sp,#4]
      9236    010002414H        09903H    ldr      r1,[sp,#12]
      9238    010002416H        04288H    cmp      r0,r1
      9240    010002418H        0DB01H    blt.n    2 -> 9246
      9242    01000241AH        0E00BH    b        22 -> 9268
      9244    01000241CH        046C0H    nop
        install(addr, faultHandler); INC(addr, 4)
      9246    01000241EH        09801H    ldr      r0,[sp,#4]
      9248    010002420H        0492FH    ldr      r1,[pc,#188] -> 9440 ; Const 0FFFFFD0EH -754
      9250    010002422H        04479H    add      r1,pc
      9252    010002424H    0F7FFFF94H    bl.w     RuntimeErrors.install
      9256    010002428H        0E000H    b        0 -> 9260
      9258    01000242AH        0018BH    ; LineNo: 395
      END;
      9260    01000242CH        09801H    ldr      r0,[sp,#4]
      9262    01000242EH        03004H    adds     r0,#4
      9264    010002430H        09001H    str      r0,[sp,#4]
      9266    010002432H        0E7EEH    b        -36 -> 9234
      INC(i)
    END;
      9268    010002434H        09800H    ldr      r0,[sp]
      9270    010002436H        03001H    adds     r0,#1
      9272    010002438H        09000H    str      r0,[sp]
      9274    01000243AH        0E7A1H    b        -190 -> 9088
    i := 0;
      9276    01000243CH        02000H    movs     r0,#0
      9278    01000243EH        09000H    str      r0,[sp]
    WHILE i < NumCores DO
      9280    010002440H        09800H    ldr      r0,[sp]
      9282    010002442H        02802H    cmp      r0,#2
      9284    010002444H        0DB01H    blt.n    2 -> 9290
      9286    010002446H        0E041H    b        130 -> 9420
      9288    010002448H        046C0H    nop
      exc[i].handleException := ledOnAndHalt;
      9290    01000244AH        09800H    ldr      r0,[sp]
      9292    01000244CH        02802H    cmp      r0,#2
      9294    01000244EH        0D301H    bcc.n    2 -> 9300
      9296    010002450H        0DF01H    svc      1
      9298    010002452H        00193H    ; LineNo: 403
      9300    010002454H        04925H    ldr      r1,[pc,#148] -> 9452 ; Global 02002FCD0H
      9302    010002456H        022C8H    movs     r2,#200
      9304    010002458H        04350H    muls     r0,r2
      9306    01000245AH        01808H    adds     r0,r1,r0
      9308    01000245CH        04921H    ldr      r1,[pc,#132] -> 9444 ; Const 0FFFFFF02H -254
      9310    01000245EH        04479H    add      r1,pc
      9312    010002460H        022C0H    movs     r2,#192
      9314    010002462H        05081H    str      r1,[r0,r2]
      exc[i].haltOn := TRUE;
      9316    010002464H        09800H    ldr      r0,[sp]
      9318    010002466H        02802H    cmp      r0,#2
      9320    010002468H        0D301H    bcc.n    2 -> 9326
      9322    01000246AH        0DF01H    svc      1
      9324    01000246CH        00194H    ; LineNo: 404
      9326    01000246EH        0491FH    ldr      r1,[pc,#124] -> 9452 ; Global 02002FCD0H
      9328    010002470H        022C8H    movs     r2,#200
      9330    010002472H        04350H    muls     r0,r2
      9332    010002474H        01808H    adds     r0,r1,r0
      9334    010002476H        02101H    movs     r1,#1
      9336    010002478H        022C4H    movs     r2,#196
      9338    01000247AH        05481H    strb     r1,[r0,r2]
      exc[i].stackedRegsOn := TRUE;
      9340    01000247CH        09800H    ldr      r0,[sp]
      9342    01000247EH        02802H    cmp      r0,#2
      9344    010002480H        0D301H    bcc.n    2 -> 9350
      9346    010002482H        0DF01H    svc      1
      9348    010002484H        00195H    ; LineNo: 405
      9350    010002486H        04919H    ldr      r1,[pc,#100] -> 9452 ; Global 02002FCD0H
      9352    010002488H        022C8H    movs     r2,#200
      9354    01000248AH        04350H    muls     r0,r2
      9356    01000248CH        01808H    adds     r0,r1,r0
      9358    01000248EH        02101H    movs     r1,#1
      9360    010002490H        022C6H    movs     r2,#198
      9362    010002492H        05481H    strb     r1,[r0,r2]
      exc[i].currentRegsOn := TRUE;
      9364    010002494H        09800H    ldr      r0,[sp]
      9366    010002496H        02802H    cmp      r0,#2
      9368    010002498H        0D301H    bcc.n    2 -> 9374
      9370    01000249AH        0DF01H    svc      1
      9372    01000249CH        00196H    ; LineNo: 406
      9374    01000249EH        04913H    ldr      r1,[pc,#76] -> 9452 ; Global 02002FCD0H
      9376    0100024A0H        022C8H    movs     r2,#200
      9378    0100024A2H        04350H    muls     r0,r2
      9380    0100024A4H        01808H    adds     r0,r1,r0
      9382    0100024A6H        02101H    movs     r1,#1
      9384    0100024A8H        022C7H    movs     r2,#199
      9386    0100024AAH        05481H    strb     r1,[r0,r2]
      exc[i].stackTraceOn := TRUE;
      9388    0100024ACH        09800H    ldr      r0,[sp]
      9390    0100024AEH        02802H    cmp      r0,#2
      9392    0100024B0H        0D301H    bcc.n    2 -> 9398
      9394    0100024B2H        0DF01H    svc      1
      9396    0100024B4H        00197H    ; LineNo: 407
      9398    0100024B6H        0490DH    ldr      r1,[pc,#52] -> 9452 ; Global 02002FCD0H
      9400    0100024B8H        022C8H    movs     r2,#200
      9402    0100024BAH        04350H    muls     r0,r2
      9404    0100024BCH        01808H    adds     r0,r1,r0
      9406    0100024BEH        02101H    movs     r1,#1
      9408    0100024C0H        022C5H    movs     r2,#197
      9410    0100024C2H        05481H    strb     r1,[r0,r2]
      INC(i)
    END;
      9412    0100024C4H        09800H    ldr      r0,[sp]
      9414    0100024C6H        03001H    adds     r0,#1
      9416    0100024C8H        09000H    str      r0,[sp]
      9418    0100024CAH        0E7B9H    b        -142 -> 9280
  END init;
      9420    0100024CCH        0B004H    add      sp,#16
      9422    0100024CEH        0BD00H    pop      { pc }
      9424    0100024D0H    0E000ED08H    ; Const 0E000ED08H -536810232
      9428    0100024D4H    0FFFFFD4EH    ; Const 0FFFFFD4EH -690
      9432    0100024D8H    0FFFFFD3EH    ; Const 0FFFFFD3EH -706
      9436    0100024DCH    0FFFFFB5AH    ; Const 0FFFFFB5AH -1190
      9440    0100024E0H    0FFFFFD0EH    ; Const 0FFFFFD0EH -754
      9444    0100024E4H    0FFFFFF02H    ; Const 0FFFFFF02H -254
      9448    0100024E8H    02002FF98H    ; Global 02002FF98H
      9452    0100024ECH    02002FCD0H    ; Global 02002FCD0H

PROCEDURE RuntimeErrors..init;
BEGIN
      9456    0100024F0H        0B500H    push     { lr }
  init
END .init;
END RuntimeErrors.
      9458    0100024F2H    0F7FFFF41H    bl.w     RuntimeErrors.init
      9462    0100024F6H        0E000H    b        0 -> 9466
      9464    0100024F8H        0019DH    ; LineNo: 413
      9466    0100024FAH        0BD00H    pop      { pc }

MODULE TextIO;
      9468    0100024FCH        00000H    ; Pad
      9472    010002500H        00000H    ; Type
      9476    010002504H        00000H    ; Type
      9480    010002508H        00000H    ; Type
      9484    01000250CH        00000H    ; Type
      9488    010002510H        00000H    ; Type
      9492    010002514H        0000CH    ; Type (size)
      9496    010002518H        00000H    ; Type
      9500    01000251CH        00000H    ; Type
      9504    010002520H        00000H    ; Type
      9508    010002524H        00000H    ; Type
      9512    010002528H        00008H    ; Type (size)
      9516    01000252CH        00000H    ; Type
      9520    010002530H        00000H    ; Type
      9524    010002534H        00000H    ; Type
      9528    010002538H        00000H    ; Type

  PROCEDURE TextIO.OpenWriter*(w: Writer; dev: Device; psp: PutStringProc);
  BEGIN
      9532    01000253CH        0B507H    push     { r0, r1, r2, lr }
    ASSERT(w # NIL, Errors.PreCond);
      9534    01000253EH        09800H    ldr      r0,[sp]
      9536    010002540H        02800H    cmp      r0,#0
      9538    010002542H        0D101H    bne.n    2 -> 9544
      9540    010002544H        0DF65H    svc      101
      9542    010002546H        00032H    ; LineNo: 50
    w.dev := dev;
      9544    010002548H        09801H    ldr      r0,[sp,#4]
      9546    01000254AH        09900H    ldr      r1,[sp]
      9548    01000254CH        06008H    str      r0,[r1]
    w.putString := psp;
      9550    01000254EH        09802H    ldr      r0,[sp,#8]
      9552    010002550H        09900H    ldr      r1,[sp]
      9554    010002552H        06048H    str      r0,[r1,#4]
    w.flush := NIL
  END OpenWriter;
      9556    010002554H        02000H    movs     r0,#0
      9558    010002556H        09900H    ldr      r1,[sp]
      9560    010002558H        06088H    str      r0,[r1,#8]
      9562    01000255AH        0B003H    add      sp,#12
      9564    01000255CH        0BD00H    pop      { pc }
      9566    01000255EH        046C0H    nop

  PROCEDURE TextIO.InstallFlushOutProc*(w: Writer; fp: FlushOutProc);
  BEGIN
      9568    010002560H        0B503H    push     { r0, r1, lr }
    ASSERT(w # NIL, Errors.PreCond);
      9570    010002562H        09800H    ldr      r0,[sp]
      9572    010002564H        02800H    cmp      r0,#0
      9574    010002566H        0D101H    bne.n    2 -> 9580
      9576    010002568H        0DF65H    svc      101
      9578    01000256AH        0003BH    ; LineNo: 59
    w.flush := fp
  END InstallFlushOutProc;
      9580    01000256CH        09801H    ldr      r0,[sp,#4]
      9582    01000256EH        09900H    ldr      r1,[sp]
      9584    010002570H        06088H    str      r0,[r1,#8]
      9586    010002572H        0B002H    add      sp,#8
      9588    010002574H        0BD00H    pop      { pc }
      9590    010002576H        046C0H    nop

  PROCEDURE TextIO.OpenReader*(r: Reader; dev: Device; gsp: GetStringProc);
  BEGIN
      9592    010002578H        0B507H    push     { r0, r1, r2, lr }
    ASSERT(r # NIL, Errors.PreCond);
      9594    01000257AH        09800H    ldr      r0,[sp]
      9596    01000257CH        02800H    cmp      r0,#0
      9598    01000257EH        0D101H    bne.n    2 -> 9604
      9600    010002580H        0DF65H    svc      101
      9602    010002582H        00042H    ; LineNo: 66
    r.dev := dev;
      9604    010002584H        09801H    ldr      r0,[sp,#4]
      9606    010002586H        09900H    ldr      r1,[sp]
      9608    010002588H        06008H    str      r0,[r1]
    r.getString := gsp
  END OpenReader;
      9610    01000258AH        09802H    ldr      r0,[sp,#8]
      9612    01000258CH        09900H    ldr      r1,[sp]
      9614    01000258EH        06048H    str      r0,[r1,#4]
      9616    010002590H        0B003H    add      sp,#12
      9618    010002592H        0BD00H    pop      { pc }

PROCEDURE TextIO..init;
END .init;
END TextIO;
      9620    010002594H        0B500H    push     { lr }
      9622    010002596H        0BD00H    pop      { pc }

MODULE Texts;
      9624    010002598H        00000H    ; Pad
      9628    01000259CH    020202020H    ; String: "    "
      9632    0100025A0H    020202020H    ; String: "    "
      9636    0100025A4H    020202020H    ; String: "    "
      9640    0100025A8H    020202020H    ; String: "    "
      9644    0100025ACH    020202020H    ; String: "    "
      9648    0100025B0H    020202020H    ; String: "    "
      9652    0100025B4H    020202020H    ; String: "    "
      9656    0100025B8H    020202020H    ; String: "    "
      9660    0100025BCH        00000H    ; String: "...."

  PROCEDURE Texts.IntToString*(int: INTEGER; VAR str: ARRAY OF CHAR; VAR slen: INTEGER);
    VAR spos, dpos: INTEGER; digits: ARRAY 10 OF CHAR;
  BEGIN
      9664    0100025C0H        0B50FH    push     { r0, r1, r2, r3, lr }
      9666    0100025C2H        0B085H    sub      sp,#20
    ASSERT(LEN(str) >= 12, Errors.PreCond);  
      9668    0100025C4H        09807H    ldr      r0,[sp,#28]
      9670    0100025C6H        0280CH    cmp      r0,#12
      9672    0100025C8H        0DA01H    bge.n    2 -> 9678
      9674    0100025CAH        0DF65H    svc      101
      9676    0100025CCH        0002DH    ; LineNo: 45
    IF int = 080000000H THEN
      9678    0100025CEH        09805H    ldr      r0,[sp,#20]
      9680    0100025D0H        0494FH    ldr      r1,[pc,#316] -> 10000 ; Const 080000000H -2147483648
      9682    0100025D2H        042C8H    cmn      r0,r1
      9684    0100025D4H        0D001H    beq.n    2 -> 9690
      9686    0100025D6H        0E025H    b        74 -> 9764
      9688    0100025D8H        046C0H    nop
      str := "-2147483648";
      9690    0100025DAH        0200CH    movs     r0,#12
      9692    0100025DCH        09907H    ldr      r1,[sp,#28]
      9694    0100025DEH        04281H    cmp      r1,r0
      9696    0100025E0H        0DA01H    bge.n    2 -> 9702
      9698    0100025E2H        0DF06H    svc      6
      9700    0100025E4H        0002FH    ; LineNo: 47
      9702    0100025E6H        09806H    ldr      r0,[sp,#24]
      9704    0100025E8H        0A100H    adr      r1,pc,#0 -> 9708
      9706    0100025EAH        0E005H    b        10 -> 9720
      9708    0100025ECH    03431322DH    ; String: "-214"
      9712    0100025F0H    033383437H    ; String: "7483"
      9716    0100025F4H      0383436H    ; String: "648."
      9720    0100025F8H        04B46H    ldr      r3,[pc,#280] -> 10004 ; Const 0FF000000H -16777216
      9722    0100025FAH        0680AH    ldr      r2,[r1]
      9724    0100025FCH        03104H    adds     r1,#4
      9726    0100025FEH        06002H    str      r2,[r0]
      9728    010002600H        03004H    adds     r0,#4
      9730    010002602H        0401AH    ands     r2,r3
      9732    010002604H        0D1F9H    bne.n    -14 -> 9722
      str[11] := 0X;
      9734    010002606H        0200BH    movs     r0,#11
      9736    010002608H        09907H    ldr      r1,[sp,#28]
      9738    01000260AH        04288H    cmp      r0,r1
      9740    01000260CH        0D301H    bcc.n    2 -> 9746
      9742    01000260EH        0DF01H    svc      1
      9744    010002610H        00030H    ; LineNo: 48
      9746    010002612H        09906H    ldr      r1,[sp,#24]
      9748    010002614H        01808H    adds     r0,r1,r0
      9750    010002616H        02100H    movs     r1,#0
      9752    010002618H        07001H    strb     r1,[r0]
      slen := 11
    ELSE
      9754    01000261AH        0200BH    movs     r0,#11
      9756    01000261CH        09908H    ldr      r1,[sp,#32]
      9758    01000261EH        06008H    str      r0,[r1]
      spos := 0;
      9760    010002620H        0E074H    b        232 -> 9996
      9762    010002622H        046C0H    nop
      9764    010002624H        02000H    movs     r0,#0
      9766    010002626H        09000H    str      r0,[sp]
      IF int < 0 THEN
      9768    010002628H        09805H    ldr      r0,[sp,#20]
      9770    01000262AH        02800H    cmp      r0,#0
      9772    01000262CH        0DB01H    blt.n    2 -> 9778
      9774    01000262EH        0E010H    b        32 -> 9810
      9776    010002630H        046C0H    nop
        int := -int;
      9778    010002632H        09805H    ldr      r0,[sp,#20]
      9780    010002634H        04240H    rsbs     r0,r0,#0
      9782    010002636H        09005H    str      r0,[sp,#20]
        str[spos] := "-";
      9784    010002638H        09800H    ldr      r0,[sp]
      9786    01000263AH        09907H    ldr      r1,[sp,#28]
      9788    01000263CH        04288H    cmp      r0,r1
      9790    01000263EH        0D301H    bcc.n    2 -> 9796
      9792    010002640H        0DF01H    svc      1
      9794    010002642H        00036H    ; LineNo: 54
      9796    010002644H        09906H    ldr      r1,[sp,#24]
      9798    010002646H        01808H    adds     r0,r1,r0
      9800    010002648H        0212DH    movs     r1,#45
      9802    01000264AH        07001H    strb     r1,[r0]
        INC(spos)
      END;
      9804    01000264CH        09800H    ldr      r0,[sp]
      9806    01000264EH        03001H    adds     r0,#1
      9808    010002650H        09000H    str      r0,[sp]
      dpos := 0;
      9810    010002652H        02000H    movs     r0,#0
      9812    010002654H        09001H    str      r0,[sp,#4]
      REPEAT
        digits[dpos] := CHR(int MOD 10 + ORD("0"));
      9814    010002656H        09801H    ldr      r0,[sp,#4]
      9816    010002658H        0280AH    cmp      r0,#10
      9818    01000265AH        0D301H    bcc.n    2 -> 9824
      9820    01000265CH        0DF01H    svc      1
      9822    01000265EH        0003BH    ; LineNo: 59
      9824    010002660H        04669H    mov      r1,sp
      9826    010002662H        01808H    adds     r0,r1,r0
      9828    010002664H        09905H    ldr      r1,[sp,#20]
      9830    010002666H        0220AH    movs     r2,#10
      9832    010002668H        02501H    movs     r5,#1
      9834    01000266AH        007EDH    lsls     r5,r5,#31
      9836    01000266CH        02300H    movs     r3,#0
      9838    01000266EH        02400H    movs     r4,#0
      9840    010002670H        00049H    lsls     r1,r1,#1
      9842    010002672H        04164H    adcs     r4,r4
      9844    010002674H        04294H    cmp      r4,r2
      9846    010002676H        0D301H    bcc.n    2 -> 9852
      9848    010002678H        0195BH    adds     r3,r3,r5
      9850    01000267AH        01AA4H    subs     r4,r4,r2
      9852    01000267CH        0086DH    lsrs     r5,r5,#1
      9854    01000267EH        0D1F7H    bne.n    -18 -> 9840
      9856    010002680H        04621H    mov      r1,r4
      9858    010002682H        03130H    adds     r1,#48
      9860    010002684H        07201H    strb     r1,[r0,#8]
        int := int DIV 10;
      9862    010002686H        09805H    ldr      r0,[sp,#20]
      9864    010002688H        0210AH    movs     r1,#10
      9866    01000268AH        02401H    movs     r4,#1
      9868    01000268CH        007E4H    lsls     r4,r4,#31
      9870    01000268EH        02200H    movs     r2,#0
      9872    010002690H        02300H    movs     r3,#0
      9874    010002692H        00040H    lsls     r0,r0,#1
      9876    010002694H        0415BH    adcs     r3,r3
      9878    010002696H        0428BH    cmp      r3,r1
      9880    010002698H        0D301H    bcc.n    2 -> 9886
      9882    01000269AH        01912H    adds     r2,r2,r4
      9884    01000269CH        01A5BH    subs     r3,r3,r1
      9886    01000269EH        00864H    lsrs     r4,r4,#1
      9888    0100026A0H        0D1F7H    bne.n    -18 -> 9874
      9890    0100026A2H        04610H    mov      r0,r2
      9892    0100026A4H        09005H    str      r0,[sp,#20]
        INC(dpos)
      UNTIL int = 0;
      9894    0100026A6H        09801H    ldr      r0,[sp,#4]
      9896    0100026A8H        03001H    adds     r0,#1
      9898    0100026AAH        09001H    str      r0,[sp,#4]
      9900    0100026ACH        09805H    ldr      r0,[sp,#20]
      9902    0100026AEH        02800H    cmp      r0,#0
      9904    0100026B0H        0D1D1H    bne.n    -94 -> 9814
      DEC(dpos);
      9906    0100026B2H        09801H    ldr      r0,[sp,#4]
      9908    0100026B4H        03801H    subs     r0,#1
      9910    0100026B6H        09001H    str      r0,[sp,#4]
      WHILE dpos >= 0 DO
      9912    0100026B8H        09801H    ldr      r0,[sp,#4]
      9914    0100026BAH        02800H    cmp      r0,#0
      9916    0100026BCH        0DA01H    bge.n    2 -> 9922
      9918    0100026BEH        0E018H    b        48 -> 9970
      9920    0100026C0H        046C0H    nop
        str[spos] := digits[dpos];
      9922    0100026C2H        09800H    ldr      r0,[sp]
      9924    0100026C4H        09907H    ldr      r1,[sp,#28]
      9926    0100026C6H        04288H    cmp      r0,r1
      9928    0100026C8H        0D301H    bcc.n    2 -> 9934
      9930    0100026CAH        0DF01H    svc      1
      9932    0100026CCH        00041H    ; LineNo: 65
      9934    0100026CEH        09906H    ldr      r1,[sp,#24]
      9936    0100026D0H        01808H    adds     r0,r1,r0
      9938    0100026D2H        09901H    ldr      r1,[sp,#4]
      9940    0100026D4H        0290AH    cmp      r1,#10
      9942    0100026D6H        0D301H    bcc.n    2 -> 9948
      9944    0100026D8H        0DF01H    svc      1
      9946    0100026DAH        00041H    ; LineNo: 65
      9948    0100026DCH        0466AH    mov      r2,sp
      9950    0100026DEH        01851H    adds     r1,r2,r1
      9952    0100026E0H        07A09H    ldrb     r1,[r1,#8]
      9954    0100026E2H        07001H    strb     r1,[r0]
        DEC(dpos); INC(spos)
      9956    0100026E4H        09801H    ldr      r0,[sp,#4]
      9958    0100026E6H        03801H    subs     r0,#1
      9960    0100026E8H        09001H    str      r0,[sp,#4]
      END;
      9962    0100026EAH        09800H    ldr      r0,[sp]
      9964    0100026ECH        03001H    adds     r0,#1
      9966    0100026EEH        09000H    str      r0,[sp]
      9968    0100026F0H        0E7E2H    b        -60 -> 9912
      str[spos] := 0X;
      9970    0100026F2H        09800H    ldr      r0,[sp]
      9972    0100026F4H        09907H    ldr      r1,[sp,#28]
      9974    0100026F6H        04288H    cmp      r0,r1
      9976    0100026F8H        0D301H    bcc.n    2 -> 9982
      9978    0100026FAH        0DF01H    svc      1
      9980    0100026FCH        00044H    ; LineNo: 68
      9982    0100026FEH        09906H    ldr      r1,[sp,#24]
      9984    010002700H        01808H    adds     r0,r1,r0
      9986    010002702H        02100H    movs     r1,#0
      9988    010002704H        07001H    strb     r1,[r0]
      slen := spos
    END
      9990    010002706H        09800H    ldr      r0,[sp]
      9992    010002708H        09908H    ldr      r1,[sp,#32]
      9994    01000270AH        06008H    str      r0,[r1]
  END IntToString;
      9996    01000270CH        0B009H    add      sp,#36
      9998    01000270EH        0BD00H    pop      { pc }
     10000    010002710H    080000000H    ; Const 080000000H -2147483648
     10004    010002714H    0FF000000H    ; Const 0FF000000H -16777216

  PROCEDURE Texts.IntToHexString*(int: INTEGER; VAR str: ARRAY OF CHAR; VAR slen: INTEGER);
    VAR dpos, spos, d: INTEGER; digits: ARRAY 10 OF CHAR;
  BEGIN
     10008    010002718H        0B50FH    push     { r0, r1, r2, r3, lr }
     10010    01000271AH        0B086H    sub      sp,#24
    ASSERT(LEN(str) >= 10, Errors.PreCond);
     10012    01000271CH        09808H    ldr      r0,[sp,#32]
     10014    01000271EH        0280AH    cmp      r0,#10
     10016    010002720H        0DA01H    bge.n    2 -> 10022
     10018    010002722H        0DF65H    svc      101
     10020    010002724H        0004DH    ; LineNo: 77
    dpos := 0;
     10022    010002726H        02000H    movs     r0,#0
     10024    010002728H        09000H    str      r0,[sp]
    REPEAT
      d := int MOD 010H;
     10026    01000272AH        09806H    ldr      r0,[sp,#24]
     10028    01000272CH        00700H    lsls     r0,r0,#28
     10030    01000272EH        00F00H    lsrs     r0,r0,#28
     10032    010002730H        09002H    str      r0,[sp,#8]
      IF d < 10 THEN
     10034    010002732H        09802H    ldr      r0,[sp,#8]
     10036    010002734H        0280AH    cmp      r0,#10
     10038    010002736H        0DB01H    blt.n    2 -> 10044
     10040    010002738H        0E00CH    b        24 -> 10068
     10042    01000273AH        046C0H    nop
        digits[dpos] := CHR(d + ORD("0"))
     10044    01000273CH        09800H    ldr      r0,[sp]
     10046    01000273EH        0280AH    cmp      r0,#10
     10048    010002740H        0D301H    bcc.n    2 -> 10054
     10050    010002742H        0DF01H    svc      1
     10052    010002744H        00052H    ; LineNo: 82
     10054    010002746H        04669H    mov      r1,sp
     10056    010002748H        01808H    adds     r0,r1,r0
     10058    01000274AH        09902H    ldr      r1,[sp,#8]
     10060    01000274CH        03130H    adds     r1,#48
      ELSE
     10062    01000274EH        07301H    strb     r1,[r0,#12]
        digits[dpos] := CHR(d - 10 + ORD("A"))
     10064    010002750H        0E00BH    b        22 -> 10090
     10066    010002752H        046C0H    nop
     10068    010002754H        09800H    ldr      r0,[sp]
     10070    010002756H        0280AH    cmp      r0,#10
     10072    010002758H        0D301H    bcc.n    2 -> 10078
     10074    01000275AH        0DF01H    svc      1
     10076    01000275CH        00054H    ; LineNo: 84
     10078    01000275EH        04669H    mov      r1,sp
     10080    010002760H        01808H    adds     r0,r1,r0
     10082    010002762H        09902H    ldr      r1,[sp,#8]
     10084    010002764H        0390AH    subs     r1,#10
     10086    010002766H        03141H    adds     r1,#65
      END;
     10088    010002768H        07301H    strb     r1,[r0,#12]
      int := int DIV 010H;
     10090    01000276AH        09806H    ldr      r0,[sp,#24]
     10092    01000276CH        01100H    asrs     r0,r0,#4
     10094    01000276EH        09006H    str      r0,[sp,#24]
      INC(dpos)
    UNTIL dpos = 8;
     10096    010002770H        09800H    ldr      r0,[sp]
     10098    010002772H        03001H    adds     r0,#1
     10100    010002774H        09000H    str      r0,[sp]
     10102    010002776H        09800H    ldr      r0,[sp]
     10104    010002778H        02808H    cmp      r0,#8
     10106    01000277AH        0D1D6H    bne.n    -84 -> 10026
    DEC(dpos); spos := 0;
     10108    01000277CH        09800H    ldr      r0,[sp]
     10110    01000277EH        03801H    subs     r0,#1
     10112    010002780H        09000H    str      r0,[sp]
     10114    010002782H        02000H    movs     r0,#0
     10116    010002784H        09001H    str      r0,[sp,#4]
    WHILE dpos >= 0 DO
     10118    010002786H        09800H    ldr      r0,[sp]
     10120    010002788H        02800H    cmp      r0,#0
     10122    01000278AH        0DA01H    bge.n    2 -> 10128
     10124    01000278CH        0E018H    b        48 -> 10176
     10126    01000278EH        046C0H    nop
      str[spos] := digits[dpos];
     10128    010002790H        09801H    ldr      r0,[sp,#4]
     10130    010002792H        09908H    ldr      r1,[sp,#32]
     10132    010002794H        04288H    cmp      r0,r1
     10134    010002796H        0D301H    bcc.n    2 -> 10140
     10136    010002798H        0DF01H    svc      1
     10138    01000279AH        0005BH    ; LineNo: 91
     10140    01000279CH        09907H    ldr      r1,[sp,#28]
     10142    01000279EH        01808H    adds     r0,r1,r0
     10144    0100027A0H        09900H    ldr      r1,[sp]
     10146    0100027A2H        0290AH    cmp      r1,#10
     10148    0100027A4H        0D301H    bcc.n    2 -> 10154
     10150    0100027A6H        0DF01H    svc      1
     10152    0100027A8H        0005BH    ; LineNo: 91
     10154    0100027AAH        0466AH    mov      r2,sp
     10156    0100027ACH        01851H    adds     r1,r2,r1
     10158    0100027AEH        07B09H    ldrb     r1,[r1,#12]
     10160    0100027B0H        07001H    strb     r1,[r0]
      DEC(dpos); INC(spos)
     10162    0100027B2H        09800H    ldr      r0,[sp]
     10164    0100027B4H        03801H    subs     r0,#1
     10166    0100027B6H        09000H    str      r0,[sp]
    END;
     10168    0100027B8H        09801H    ldr      r0,[sp,#4]
     10170    0100027BAH        03001H    adds     r0,#1
     10172    0100027BCH        09001H    str      r0,[sp,#4]
     10174    0100027BEH        0E7E2H    b        -60 -> 10118
    str[8] := "H";
     10176    0100027C0H        02008H    movs     r0,#8
     10178    0100027C2H        09908H    ldr      r1,[sp,#32]
     10180    0100027C4H        04288H    cmp      r0,r1
     10182    0100027C6H        0D301H    bcc.n    2 -> 10188
     10184    0100027C8H        0DF01H    svc      1
     10186    0100027CAH        0005EH    ; LineNo: 94
     10188    0100027CCH        09907H    ldr      r1,[sp,#28]
     10190    0100027CEH        01808H    adds     r0,r1,r0
     10192    0100027D0H        02148H    movs     r1,#72
     10194    0100027D2H        07001H    strb     r1,[r0]
    str[9] := 0X;
     10196    0100027D4H        02009H    movs     r0,#9
     10198    0100027D6H        09908H    ldr      r1,[sp,#32]
     10200    0100027D8H        04288H    cmp      r0,r1
     10202    0100027DAH        0D301H    bcc.n    2 -> 10208
     10204    0100027DCH        0DF01H    svc      1
     10206    0100027DEH        0005FH    ; LineNo: 95
     10208    0100027E0H        09907H    ldr      r1,[sp,#28]
     10210    0100027E2H        01808H    adds     r0,r1,r0
     10212    0100027E4H        02100H    movs     r1,#0
     10214    0100027E6H        07001H    strb     r1,[r0]
    slen := 9
  END IntToHexString;
     10216    0100027E8H        02009H    movs     r0,#9
     10218    0100027EAH        09909H    ldr      r1,[sp,#36]
     10220    0100027ECH        06008H    str      r0,[r1]
     10222    0100027EEH        0B00AH    add      sp,#40
     10224    0100027F0H        0BD00H    pop      { pc }
     10226    0100027F2H        046C0H    nop

  PROCEDURE Texts.IntToBinString*(int: INTEGER; VAR str: ARRAY OF CHAR; VAR slen: INTEGER);
    VAR
      i, j, k: INTEGER;
      bits: SET;
  BEGIN
     10228    0100027F4H        0B50FH    push     { r0, r1, r2, r3, lr }
     10230    0100027F6H        0B084H    sub      sp,#16
    ASSERT(LEN(str) >= 36, Errors.PreCond);
     10232    0100027F8H        09806H    ldr      r0,[sp,#24]
     10234    0100027FAH        02824H    cmp      r0,#36
     10236    0100027FCH        0DA01H    bge.n    2 -> 10242
     10238    0100027FEH        0DF65H    svc      101
     10240    010002800H        00069H    ; LineNo: 105
    k := 0;
     10242    010002802H        02000H    movs     r0,#0
     10244    010002804H        09002H    str      r0,[sp,#8]
    FOR i := 0 TO 3 DO
     10246    010002806H        02000H    movs     r0,#0
     10248    010002808H        09000H    str      r0,[sp]
      bits := BITS(BFX(int, 31, 24));
     10250    01000280AH        09800H    ldr      r0,[sp]
     10252    01000280CH        02803H    cmp      r0,#3
     10254    01000280EH        0DD01H    ble.n    2 -> 10260
     10256    010002810H        0E043H    b        134 -> 10394
     10258    010002812H        046C0H    nop
     10260    010002814H        09804H    ldr      r0,[sp,#16]
     10262    010002816H        00E00H    lsrs     r0,r0,#24
     10264    010002818H        09003H    str      r0,[sp,#12]
      int := LSL(int, 8);
     10266    01000281AH        09804H    ldr      r0,[sp,#16]
     10268    01000281CH        00200H    lsls     r0,r0,#8
     10270    01000281EH        09004H    str      r0,[sp,#16]
      FOR j := 7 TO 0 BY -1 DO
     10272    010002820H        02007H    movs     r0,#7
     10274    010002822H        09001H    str      r0,[sp,#4]
        IF j IN bits THEN str[k] := "1" ELSE str[k] := "0" END;
     10276    010002824H        09801H    ldr      r0,[sp,#4]
     10278    010002826H        02800H    cmp      r0,#0
     10280    010002828H        0DA01H    bge.n    2 -> 10286
     10282    01000282AH        0E025H    b        74 -> 10360
     10284    01000282CH        046C0H    nop
     10286    01000282EH        09803H    ldr      r0,[sp,#12]
     10288    010002830H        09901H    ldr      r1,[sp,#4]
     10290    010002832H        02201H    movs     r2,#1
     10292    010002834H        0408AH    lsls     r2,r1
     10294    010002836H        04210H    tst      r0,r2
     10296    010002838H        0D101H    bne.n    2 -> 10302
     10298    01000283AH        0E00CH    b        24 -> 10326
     10300    01000283CH        046C0H    nop
     10302    01000283EH        09802H    ldr      r0,[sp,#8]
     10304    010002840H        09906H    ldr      r1,[sp,#24]
     10306    010002842H        04288H    cmp      r0,r1
     10308    010002844H        0D301H    bcc.n    2 -> 10314
     10310    010002846H        0DF01H    svc      1
     10312    010002848H        0006FH    ; LineNo: 111
     10314    01000284AH        09905H    ldr      r1,[sp,#20]
     10316    01000284CH        01808H    adds     r0,r1,r0
     10318    01000284EH        02131H    movs     r1,#49
     10320    010002850H        07001H    strb     r1,[r0]
     10322    010002852H        0E00AH    b        20 -> 10346
     10324    010002854H        046C0H    nop
     10326    010002856H        09802H    ldr      r0,[sp,#8]
     10328    010002858H        09906H    ldr      r1,[sp,#24]
     10330    01000285AH        04288H    cmp      r0,r1
     10332    01000285CH        0D301H    bcc.n    2 -> 10338
     10334    01000285EH        0DF01H    svc      1
     10336    010002860H        0006FH    ; LineNo: 111
     10338    010002862H        09905H    ldr      r1,[sp,#20]
     10340    010002864H        01808H    adds     r0,r1,r0
     10342    010002866H        02130H    movs     r1,#48
     10344    010002868H        07001H    strb     r1,[r0]
        INC(k)
      END;
     10346    01000286AH        09802H    ldr      r0,[sp,#8]
     10348    01000286CH        03001H    adds     r0,#1
     10350    01000286EH        09002H    str      r0,[sp,#8]
     10352    010002870H        09801H    ldr      r0,[sp,#4]
     10354    010002872H        03801H    subs     r0,#1
     10356    010002874H        09001H    str      r0,[sp,#4]
     10358    010002876H        0E7D5H    b        -86 -> 10276
      str[k] := " ";
     10360    010002878H        09802H    ldr      r0,[sp,#8]
     10362    01000287AH        09906H    ldr      r1,[sp,#24]
     10364    01000287CH        04288H    cmp      r0,r1
     10366    01000287EH        0D301H    bcc.n    2 -> 10372
     10368    010002880H        0DF01H    svc      1
     10370    010002882H        00072H    ; LineNo: 114
     10372    010002884H        09905H    ldr      r1,[sp,#20]
     10374    010002886H        01808H    adds     r0,r1,r0
     10376    010002888H        02120H    movs     r1,#32
     10378    01000288AH        07001H    strb     r1,[r0]
      INC(k)
    END;
     10380    01000288CH        09802H    ldr      r0,[sp,#8]
     10382    01000288EH        03001H    adds     r0,#1
     10384    010002890H        09002H    str      r0,[sp,#8]
     10386    010002892H        09800H    ldr      r0,[sp]
     10388    010002894H        03001H    adds     r0,#1
     10390    010002896H        09000H    str      r0,[sp]
     10392    010002898H        0E7B7H    b        -146 -> 10250
    str[35] := 0X;
     10394    01000289AH        02023H    movs     r0,#35
     10396    01000289CH        09906H    ldr      r1,[sp,#24]
     10398    01000289EH        04288H    cmp      r0,r1
     10400    0100028A0H        0D301H    bcc.n    2 -> 10406
     10402    0100028A2H        0DF01H    svc      1
     10404    0100028A4H        00075H    ; LineNo: 117
     10406    0100028A6H        09905H    ldr      r1,[sp,#20]
     10408    0100028A8H        01808H    adds     r0,r1,r0
     10410    0100028AAH        02100H    movs     r1,#0
     10412    0100028ACH        07001H    strb     r1,[r0]
    slen := 35
  END IntToBinString;
     10414    0100028AEH        02023H    movs     r0,#35
     10416    0100028B0H        09907H    ldr      r1,[sp,#28]
     10418    0100028B2H        06008H    str      r0,[r1]
     10420    0100028B4H        0B008H    add      sp,#32
     10422    0100028B6H        0BD00H    pop      { pc }

  PROCEDURE Texts.Write*(W: TextIO.Writer; ch: CHAR);
    VAR s: ARRAY 1 OF CHAR;
  BEGIN
     10424    0100028B8H        0B503H    push     { r0, r1, lr }
     10426    0100028BAH        0B081H    sub      sp,#4
    s[0] := ch;
     10428    0100028BCH        0A802H    add      r0,sp,#8
     10430    0100028BEH        07800H    ldrb     r0,[r0]
     10432    0100028C0H        0A900H    add      r1,sp,#0
     10434    0100028C2H        07008H    strb     r0,[r1]
    W.putString(W.dev, s, 1)
     10436    0100028C4H        09801H    ldr      r0,[sp,#4]
     10438    0100028C6H        06800H    ldr      r0,[r0]
     10440    0100028C8H        04669H    mov      r1,sp
     10442    0100028CAH        02201H    movs     r2,#1
     10444    0100028CCH        02301H    movs     r3,#1
  END Write;
     10446    0100028CEH        09C01H    ldr      r4,[sp,#4]
     10448    0100028D0H        06864H    ldr      r4,[r4,#4]
     10450    0100028D2H        02C00H    cmp      r4,#0
     10452    0100028D4H        0D101H    bne.n    2 -> 10458
     10454    0100028D6H        0DF05H    svc      5
     10456    0100028D8H        0007FH    ; LineNo: 127
     10458    0100028DAH        03401H    adds     r4,#1
     10460    0100028DCH        047A0H    blx      r4
     10462    0100028DEH        0E000H    b        0 -> 10466
     10464    0100028E0H        0007FH    ; LineNo: 127
     10466    0100028E2H        0B003H    add      sp,#12
     10468    0100028E4H        0BD00H    pop      { pc }
     10470    0100028E6H        046C0H    nop

  PROCEDURE Texts.WriteString*(W: TextIO.Writer; str: ARRAY OF CHAR);
    VAR i: INTEGER;
  BEGIN
     10472    0100028E8H        0B507H    push     { r0, r1, r2, lr }
     10474    0100028EAH        0B081H    sub      sp,#4
    i := 0;
     10476    0100028ECH        02000H    movs     r0,#0
     10478    0100028EEH        09000H    str      r0,[sp]
    WHILE (i < LEN(str)) & (str[i] # 0X) DO INC(i) END;
     10480    0100028F0H        09800H    ldr      r0,[sp]
     10482    0100028F2H        09903H    ldr      r1,[sp,#12]
     10484    0100028F4H        04288H    cmp      r0,r1
     10486    0100028F6H        0DB01H    blt.n    2 -> 10492
     10488    0100028F8H        0E011H    b        34 -> 10526
     10490    0100028FAH        046C0H    nop
     10492    0100028FCH        09800H    ldr      r0,[sp]
     10494    0100028FEH        09903H    ldr      r1,[sp,#12]
     10496    010002900H        04288H    cmp      r0,r1
     10498    010002902H        0D301H    bcc.n    2 -> 10504
     10500    010002904H        0DF01H    svc      1
     10502    010002906H        00087H    ; LineNo: 135
     10504    010002908H        09902H    ldr      r1,[sp,#8]
     10506    01000290AH        01808H    adds     r0,r1,r0
     10508    01000290CH        07800H    ldrb     r0,[r0]
     10510    01000290EH        02800H    cmp      r0,#0
     10512    010002910H        0D101H    bne.n    2 -> 10518
     10514    010002912H        0E004H    b        8 -> 10526
     10516    010002914H        046C0H    nop
     10518    010002916H        09800H    ldr      r0,[sp]
     10520    010002918H        03001H    adds     r0,#1
     10522    01000291AH        09000H    str      r0,[sp]
     10524    01000291CH        0E7E8H    b        -48 -> 10480
    W.putString(W.dev, str, i)
     10526    01000291EH        09801H    ldr      r0,[sp,#4]
     10528    010002920H        06800H    ldr      r0,[r0]
     10530    010002922H        09902H    ldr      r1,[sp,#8]
     10532    010002924H        09A03H    ldr      r2,[sp,#12]
     10534    010002926H        09B00H    ldr      r3,[sp]
  END WriteString;
     10536    010002928H        09C01H    ldr      r4,[sp,#4]
     10538    01000292AH        06864H    ldr      r4,[r4,#4]
     10540    01000292CH        02C00H    cmp      r4,#0
     10542    01000292EH        0D101H    bne.n    2 -> 10548
     10544    010002930H        0DF05H    svc      5
     10546    010002932H        00088H    ; LineNo: 136
     10548    010002934H        03401H    adds     r4,#1
     10550    010002936H        047A0H    blx      r4
     10552    010002938H        0E000H    b        0 -> 10556
     10554    01000293AH        00088H    ; LineNo: 136
     10556    01000293CH        0B004H    add      sp,#16
     10558    01000293EH        0BD00H    pop      { pc }

  PROCEDURE Texts.WriteLn*(W: TextIO.Writer);
  BEGIN
     10560    010002940H        0B501H    push     { r0, lr }
    W.putString(W.dev, eol, 2)
     10562    010002942H        09800H    ldr      r0,[sp]
     10564    010002944H        06800H    ldr      r0,[r0]
     10566    010002946H        04907H    ldr      r1,[pc,#28] -> 10596 ; Global 02002FCCCH
     10568    010002948H        02202H    movs     r2,#2
     10570    01000294AH        02302H    movs     r3,#2
  END WriteLn;
     10572    01000294CH        09C00H    ldr      r4,[sp]
     10574    01000294EH        06864H    ldr      r4,[r4,#4]
     10576    010002950H        02C00H    cmp      r4,#0
     10578    010002952H        0D101H    bne.n    2 -> 10584
     10580    010002954H        0DF05H    svc      5
     10582    010002956H        0008EH    ; LineNo: 142
     10584    010002958H        03401H    adds     r4,#1
     10586    01000295AH        047A0H    blx      r4
     10588    01000295CH        0E000H    b        0 -> 10592
     10590    01000295EH        0008EH    ; LineNo: 142
     10592    010002960H        0B001H    add      sp,#4
     10594    010002962H        0BD00H    pop      { pc }
     10596    010002964H    02002FCCCH    ; Global 02002FCCCH

  PROCEDURE Texts.writeNumString(W: TextIO.Writer; str: ARRAY OF CHAR; numChars, leftPadding: INTEGER);
  BEGIN
     10600    010002968H        0B51FH    push     { r0, r1, r2, r3, r4, lr }
    IF leftPadding > MaxBlanks THEN leftPadding := MaxBlanks END;
     10602    01000296AH        09804H    ldr      r0,[sp,#16]
     10604    01000296CH        02820H    cmp      r0,#32
     10606    01000296EH        0DC01H    bgt.n    2 -> 10612
     10608    010002970H        0E002H    b        4 -> 10616
     10610    010002972H        046C0H    nop
     10612    010002974H        02020H    movs     r0,#32
     10614    010002976H        09004H    str      r0,[sp,#16]
    IF leftPadding > 0 THEN
     10616    010002978H        09804H    ldr      r0,[sp,#16]
     10618    01000297AH        02800H    cmp      r0,#0
     10620    01000297CH        0DC01H    bgt.n    2 -> 10626
     10622    01000297EH        0E012H    b        36 -> 10662
     10624    010002980H        046C0H    nop
      W.putString(W.dev, Blanks, leftPadding)
     10626    010002982H        09800H    ldr      r0,[sp]
     10628    010002984H        06800H    ldr      r0,[r0]
     10630    010002986H        046C0H    nop
     10632    010002988H        0490FH    ldr      r1,[pc,#60] -> 10696 ; Const 0FFFFFC0EH -1010
     10634    01000298AH        0467AH    mov      r2,pc
     10636    01000298CH        01889H    adds     r1,r1,r2
     10638    01000298EH        02221H    movs     r2,#33
     10640    010002990H        09B04H    ldr      r3,[sp,#16]
    END;
     10642    010002992H        09C00H    ldr      r4,[sp]
     10644    010002994H        06864H    ldr      r4,[r4,#4]
     10646    010002996H        02C00H    cmp      r4,#0
     10648    010002998H        0D101H    bne.n    2 -> 10654
     10650    01000299AH        0DF05H    svc      5
     10652    01000299CH        00096H    ; LineNo: 150
     10654    01000299EH        03401H    adds     r4,#1
     10656    0100029A0H        047A0H    blx      r4
     10658    0100029A2H        0E000H    b        0 -> 10662
     10660    0100029A4H        00096H    ; LineNo: 150
    W.putString(W.dev, str, numChars)
     10662    0100029A6H        09800H    ldr      r0,[sp]
     10664    0100029A8H        06800H    ldr      r0,[r0]
     10666    0100029AAH        09901H    ldr      r1,[sp,#4]
     10668    0100029ACH        09A02H    ldr      r2,[sp,#8]
     10670    0100029AEH        09B03H    ldr      r3,[sp,#12]
  END writeNumString;
     10672    0100029B0H        09C00H    ldr      r4,[sp]
     10674    0100029B2H        06864H    ldr      r4,[r4,#4]
     10676    0100029B4H        02C00H    cmp      r4,#0
     10678    0100029B6H        0D101H    bne.n    2 -> 10684
     10680    0100029B8H        0DF05H    svc      5
     10682    0100029BAH        00098H    ; LineNo: 152
     10684    0100029BCH        03401H    adds     r4,#1
     10686    0100029BEH        047A0H    blx      r4
     10688    0100029C0H        0E000H    b        0 -> 10692
     10690    0100029C2H        00098H    ; LineNo: 152
     10692    0100029C4H        0B005H    add      sp,#20
     10694    0100029C6H        0BD00H    pop      { pc }
     10696    0100029C8H    0FFFFFC0EH    ; Const 0FFFFFC0EH -1010

  PROCEDURE Texts.WriteInt*(W: TextIO.Writer; int, width: INTEGER);
    VAR buffer: ARRAY 12 OF CHAR; strLen: INTEGER;
  BEGIN
     10700    0100029CCH        0B507H    push     { r0, r1, r2, lr }
     10702    0100029CEH        0B084H    sub      sp,#16
    IntToString(int, buffer, strLen);
     10704    0100029D0H        09805H    ldr      r0,[sp,#20]
     10706    0100029D2H        04669H    mov      r1,sp
     10708    0100029D4H        0220CH    movs     r2,#12
     10710    0100029D6H        0AB03H    add      r3,sp,#12
     10712    0100029D8H    0F7FFFDF2H    bl.w     Texts.IntToString
     10716    0100029DCH        0E000H    b        0 -> 10720
     10718    0100029DEH        000A2H    ; LineNo: 162
    writeNumString(W, buffer, strLen, width - strLen)
     10720    0100029E0H        09804H    ldr      r0,[sp,#16]
     10722    0100029E2H        04669H    mov      r1,sp
     10724    0100029E4H        0220CH    movs     r2,#12
     10726    0100029E6H        09B03H    ldr      r3,[sp,#12]
     10728    0100029E8H        09C06H    ldr      r4,[sp,#24]
     10730    0100029EAH        09D03H    ldr      r5,[sp,#12]
     10732    0100029ECH        01B64H    subs     r4,r4,r5
  END WriteInt;
     10734    0100029EEH    0F7FFFFBBH    bl.w     Texts.writeNumString
     10738    0100029F2H        0E000H    b        0 -> 10742
     10740    0100029F4H        000A3H    ; LineNo: 163
     10742    0100029F6H        0B007H    add      sp,#28
     10744    0100029F8H        0BD00H    pop      { pc }
     10746    0100029FAH        046C0H    nop

  PROCEDURE Texts.WriteHex*(W: TextIO.Writer; int, width: INTEGER);
    VAR buffer: ARRAY 12 OF CHAR; strLen: INTEGER;
  BEGIN
     10748    0100029FCH        0B507H    push     { r0, r1, r2, lr }
     10750    0100029FEH        0B084H    sub      sp,#16
    IntToHexString(int, buffer, strLen);
     10752    010002A00H        09805H    ldr      r0,[sp,#20]
     10754    010002A02H        04669H    mov      r1,sp
     10756    010002A04H        0220CH    movs     r2,#12
     10758    010002A06H        0AB03H    add      r3,sp,#12
     10760    010002A08H    0F7FFFE86H    bl.w     Texts.IntToHexString
     10764    010002A0CH        0E000H    b        0 -> 10768
     10766    010002A0EH        000AAH    ; LineNo: 170
    writeNumString(W, buffer, strLen, width - strLen)
     10768    010002A10H        09804H    ldr      r0,[sp,#16]
     10770    010002A12H        04669H    mov      r1,sp
     10772    010002A14H        0220CH    movs     r2,#12
     10774    010002A16H        09B03H    ldr      r3,[sp,#12]
     10776    010002A18H        09C06H    ldr      r4,[sp,#24]
     10778    010002A1AH        09D03H    ldr      r5,[sp,#12]
     10780    010002A1CH        01B64H    subs     r4,r4,r5
  END WriteHex;
     10782    010002A1EH    0F7FFFFA3H    bl.w     Texts.writeNumString
     10786    010002A22H        0E000H    b        0 -> 10790
     10788    010002A24H        000ABH    ; LineNo: 171
     10790    010002A26H        0B007H    add      sp,#28
     10792    010002A28H        0BD00H    pop      { pc }
     10794    010002A2AH        046C0H    nop

  PROCEDURE Texts.WriteBin*(W: TextIO.Writer; int, width: INTEGER);
    VAR buffer: ARRAY 36 OF CHAR; strLen: INTEGER;
  BEGIN
     10796    010002A2CH        0B507H    push     { r0, r1, r2, lr }
     10798    010002A2EH        0B08AH    sub      sp,#40
    IntToBinString(int, buffer, strLen);
     10800    010002A30H        0980BH    ldr      r0,[sp,#44]
     10802    010002A32H        04669H    mov      r1,sp
     10804    010002A34H        02224H    movs     r2,#36
     10806    010002A36H        0AB09H    add      r3,sp,#36
     10808    010002A38H    0F7FFFEDCH    bl.w     Texts.IntToBinString
     10812    010002A3CH        0E000H    b        0 -> 10816
     10814    010002A3EH        000B2H    ; LineNo: 178
    writeNumString(W, buffer, strLen, width - strLen)
     10816    010002A40H        0980AH    ldr      r0,[sp,#40]
     10818    010002A42H        04669H    mov      r1,sp
     10820    010002A44H        02224H    movs     r2,#36
     10822    010002A46H        09B09H    ldr      r3,[sp,#36]
     10824    010002A48H        09C0CH    ldr      r4,[sp,#48]
     10826    010002A4AH        09D09H    ldr      r5,[sp,#36]
     10828    010002A4CH        01B64H    subs     r4,r4,r5
  END WriteBin;
     10830    010002A4EH    0F7FFFF8BH    bl.w     Texts.writeNumString
     10834    010002A52H        0E000H    b        0 -> 10838
     10836    010002A54H        000B3H    ; LineNo: 179
     10838    010002A56H        0B00DH    add      sp,#52
     10840    010002A58H        0BD00H    pop      { pc }
     10842    010002A5AH        046C0H    nop

  PROCEDURE Texts.cleanLeft(str: ARRAY OF CHAR; VAR first: INTEGER; VAR neg: BOOLEAN);
    VAR ch: CHAR;
  BEGIN
     10844    010002A5CH        0B50FH    push     { r0, r1, r2, r3, lr }
     10846    010002A5EH        0B081H    sub      sp,#4
    first := 0;
     10848    010002A60H        02000H    movs     r0,#0
     10850    010002A62H        09903H    ldr      r1,[sp,#12]
     10852    010002A64H        06008H    str      r0,[r1]
    WHILE str[first] = " " DO INC(first) END;
     10854    010002A66H        09803H    ldr      r0,[sp,#12]
     10856    010002A68H        06800H    ldr      r0,[r0]
     10858    010002A6AH        09902H    ldr      r1,[sp,#8]
     10860    010002A6CH        04288H    cmp      r0,r1
     10862    010002A6EH        0D301H    bcc.n    2 -> 10868
     10864    010002A70H        0DF01H    svc      1
     10866    010002A72H        000BCH    ; LineNo: 188
     10868    010002A74H        09901H    ldr      r1,[sp,#4]
     10870    010002A76H        01808H    adds     r0,r1,r0
     10872    010002A78H        07800H    ldrb     r0,[r0]
     10874    010002A7AH        02820H    cmp      r0,#32
     10876    010002A7CH        0D001H    beq.n    2 -> 10882
     10878    010002A7EH        0E005H    b        10 -> 10892
     10880    010002A80H        046C0H    nop
     10882    010002A82H        09803H    ldr      r0,[sp,#12]
     10884    010002A84H        06801H    ldr      r1,[r0]
     10886    010002A86H        03101H    adds     r1,#1
     10888    010002A88H        06001H    str      r1,[r0]
     10890    010002A8AH        0E7ECH    b        -40 -> 10854
    ch := str[first];
     10892    010002A8CH        09803H    ldr      r0,[sp,#12]
     10894    010002A8EH        06800H    ldr      r0,[r0]
     10896    010002A90H        09902H    ldr      r1,[sp,#8]
     10898    010002A92H        04288H    cmp      r0,r1
     10900    010002A94H        0D301H    bcc.n    2 -> 10906
     10902    010002A96H        0DF01H    svc      1
     10904    010002A98H        000BDH    ; LineNo: 189
     10906    010002A9AH        09901H    ldr      r1,[sp,#4]
     10908    010002A9CH        01808H    adds     r0,r1,r0
     10910    010002A9EH        07800H    ldrb     r0,[r0]
     10912    010002AA0H        0A900H    add      r1,sp,#0
     10914    010002AA2H        07008H    strb     r0,[r1]
    neg := ch = "-";
     10916    010002AA4H        0A800H    add      r0,sp,#0
     10918    010002AA6H        07800H    ldrb     r0,[r0]
     10920    010002AA8H        0282DH    cmp      r0,#45
     10922    010002AAAH        0D001H    beq.n    2 -> 10928
     10924    010002AACH        02000H    movs     r0,#0
     10926    010002AAEH        0E000H    b        0 -> 10930
     10928    010002AB0H        02001H    movs     r0,#1
     10930    010002AB2H        09904H    ldr      r1,[sp,#16]
     10932    010002AB4H        07008H    strb     r0,[r1]
    IF (ch = "-") OR (ch = "+") THEN INC(first) END;
     10934    010002AB6H        0A800H    add      r0,sp,#0
     10936    010002AB8H        07800H    ldrb     r0,[r0]
     10938    010002ABAH        0282DH    cmp      r0,#45
     10940    010002ABCH        0D101H    bne.n    2 -> 10946
     10942    010002ABEH        0E006H    b        12 -> 10958
     10944    010002AC0H        046C0H    nop
     10946    010002AC2H        0A800H    add      r0,sp,#0
     10948    010002AC4H        07800H    ldrb     r0,[r0]
     10950    010002AC6H        0282BH    cmp      r0,#43
     10952    010002AC8H        0D001H    beq.n    2 -> 10958
     10954    010002ACAH        0E004H    b        8 -> 10966
     10956    010002ACCH        046C0H    nop
     10958    010002ACEH        09803H    ldr      r0,[sp,#12]
     10960    010002AD0H        06801H    ldr      r1,[r0]
     10962    010002AD2H        03101H    adds     r1,#1
     10964    010002AD4H        06001H    str      r1,[r0]
    WHILE str[first] = " " DO INC(first) END;
     10966    010002AD6H        09803H    ldr      r0,[sp,#12]
     10968    010002AD8H        06800H    ldr      r0,[r0]
     10970    010002ADAH        09902H    ldr      r1,[sp,#8]
     10972    010002ADCH        04288H    cmp      r0,r1
     10974    010002ADEH        0D301H    bcc.n    2 -> 10980
     10976    010002AE0H        0DF01H    svc      1
     10978    010002AE2H        000C0H    ; LineNo: 192
     10980    010002AE4H        09901H    ldr      r1,[sp,#4]
     10982    010002AE6H        01808H    adds     r0,r1,r0
     10984    010002AE8H        07800H    ldrb     r0,[r0]
     10986    010002AEAH        02820H    cmp      r0,#32
     10988    010002AECH        0D001H    beq.n    2 -> 10994
     10990    010002AEEH        0E005H    b        10 -> 11004
     10992    010002AF0H        046C0H    nop
     10994    010002AF2H        09803H    ldr      r0,[sp,#12]
     10996    010002AF4H        06801H    ldr      r1,[r0]
     10998    010002AF6H        03101H    adds     r1,#1
     11000    010002AF8H        06001H    str      r1,[r0]
     11002    010002AFAH        0E7ECH    b        -40 -> 10966
    WHILE str[first] = "0" DO INC(first) END;
     11004    010002AFCH        09803H    ldr      r0,[sp,#12]
     11006    010002AFEH        06800H    ldr      r0,[r0]
     11008    010002B00H        09902H    ldr      r1,[sp,#8]
     11010    010002B02H        04288H    cmp      r0,r1
     11012    010002B04H        0D301H    bcc.n    2 -> 11018
     11014    010002B06H        0DF01H    svc      1
     11016    010002B08H        000C1H    ; LineNo: 193
     11018    010002B0AH        09901H    ldr      r1,[sp,#4]
     11020    010002B0CH        01808H    adds     r0,r1,r0
     11022    010002B0EH        07800H    ldrb     r0,[r0]
     11024    010002B10H        02830H    cmp      r0,#48
     11026    010002B12H        0D001H    beq.n    2 -> 11032
     11028    010002B14H        0E005H    b        10 -> 11042
     11030    010002B16H        046C0H    nop
     11032    010002B18H        09803H    ldr      r0,[sp,#12]
     11034    010002B1AH        06801H    ldr      r1,[r0]
     11036    010002B1CH        03101H    adds     r1,#1
     11038    010002B1EH        06001H    str      r1,[r0]
     11040    010002B20H        0E7ECH    b        -40 -> 11004
  END cleanLeft;
     11042    010002B22H        0B005H    add      sp,#20
     11044    010002B24H        0BD00H    pop      { pc }
     11046    010002B26H        046C0H    nop

  PROCEDURE Texts.cleanRight(str: ARRAY OF CHAR; numCh: INTEGER; VAR last: INTEGER);
  BEGIN
     11048    010002B28H        0B50FH    push     { r0, r1, r2, r3, lr }
    last := numCh - 1;
     11050    010002B2AH        09802H    ldr      r0,[sp,#8]
     11052    010002B2CH        03801H    subs     r0,#1
     11054    010002B2EH        09903H    ldr      r1,[sp,#12]
     11056    010002B30H        06008H    str      r0,[r1]
    WHILE str[last] = " " DO
     11058    010002B32H        09803H    ldr      r0,[sp,#12]
     11060    010002B34H        06800H    ldr      r0,[r0]
     11062    010002B36H        09901H    ldr      r1,[sp,#4]
     11064    010002B38H        04288H    cmp      r0,r1
     11066    010002B3AH        0D301H    bcc.n    2 -> 11072
     11068    010002B3CH        0DF01H    svc      1
     11070    010002B3EH        000C7H    ; LineNo: 199
     11072    010002B40H        09900H    ldr      r1,[sp]
     11074    010002B42H        01808H    adds     r0,r1,r0
     11076    010002B44H        07800H    ldrb     r0,[r0]
     11078    010002B46H        02820H    cmp      r0,#32
     11080    010002B48H        0D001H    beq.n    2 -> 11086
     11082    010002B4AH        0E005H    b        10 -> 11096
     11084    010002B4CH        046C0H    nop
      DEC(last)
    END
     11086    010002B4EH        09803H    ldr      r0,[sp,#12]
     11088    010002B50H        06801H    ldr      r1,[r0]
     11090    010002B52H        03901H    subs     r1,#1
     11092    010002B54H        06001H    str      r1,[r0]
     11094    010002B56H        0E7ECH    b        -40 -> 11058
  END cleanRight;
     11096    010002B58H        0B004H    add      sp,#16
     11098    010002B5AH        0BD00H    pop      { pc }

  PROCEDURE Texts.StrToInt*(str: ARRAY OF CHAR; numCh: INTEGER; VAR int: INTEGER; VAR res: INTEGER);
    VAR first, last, digit: INTEGER; neg: BOOLEAN; ch: CHAR;
  BEGIN
     11100    010002B5CH        0B51FH    push     { r0, r1, r2, r3, r4, lr }
     11102    010002B5EH        0B084H    sub      sp,#16
    res := NoError;
     11104    010002B60H        02000H    movs     r0,#0
     11106    010002B62H        09908H    ldr      r1,[sp,#32]
     11108    010002B64H        06008H    str      r0,[r1]
    cleanLeft(str, first, neg);
     11110    010002B66H        09804H    ldr      r0,[sp,#16]
     11112    010002B68H        09905H    ldr      r1,[sp,#20]
     11114    010002B6AH        0466AH    mov      r2,sp
     11116    010002B6CH        0AB03H    add      r3,sp,#12
     11118    010002B6EH    0F7FFFF75H    bl.w     Texts.cleanLeft
     11122    010002B72H        0E000H    b        0 -> 11126
     11124    010002B74H        000D2H    ; LineNo: 210
    IF numCh - first > MaxIntDigits THEN
     11126    010002B76H        09806H    ldr      r0,[sp,#24]
     11128    010002B78H        09900H    ldr      r1,[sp]
     11130    010002B7AH        01A40H    subs     r0,r0,r1
     11132    010002B7CH        0280AH    cmp      r0,#10
     11134    010002B7EH        0DC01H    bgt.n    2 -> 11140
     11136    010002B80H        0E003H    b        6 -> 11146
     11138    010002B82H        046C0H    nop
      res := OutOfLimits;
     11140    010002B84H        02003H    movs     r0,#3
     11142    010002B86H        09908H    ldr      r1,[sp,#32]
     11144    010002B88H        06008H    str      r0,[r1]
    END;
    IF res = NoError THEN
     11146    010002B8AH        09808H    ldr      r0,[sp,#32]
     11148    010002B8CH        06800H    ldr      r0,[r0]
     11150    010002B8EH        02800H    cmp      r0,#0
     11152    010002B90H        0D001H    beq.n    2 -> 11158
     11154    010002B92H        0E061H    b        194 -> 11352
     11156    010002B94H        046C0H    nop
      cleanRight(str, numCh, last);
     11158    010002B96H        09804H    ldr      r0,[sp,#16]
     11160    010002B98H        09905H    ldr      r1,[sp,#20]
     11162    010002B9AH        09A06H    ldr      r2,[sp,#24]
     11164    010002B9CH        0AB01H    add      r3,sp,#4
     11166    010002B9EH    0F7FFFFC3H    bl.w     Texts.cleanRight
     11170    010002BA2H        0E000H    b        0 -> 11174
     11172    010002BA4H        000D7H    ; LineNo: 215
      int := 0;
     11174    010002BA6H        02000H    movs     r0,#0
     11176    010002BA8H        09907H    ldr      r1,[sp,#28]
     11178    010002BAAH        06008H    str      r0,[r1]
      WHILE (first <= last) & (res = NoError) DO
     11180    010002BACH        09800H    ldr      r0,[sp]
     11182    010002BAEH        09901H    ldr      r1,[sp,#4]
     11184    010002BB0H        04288H    cmp      r0,r1
     11186    010002BB2H        0DD01H    ble.n    2 -> 11192
     11188    010002BB4H        0E050H    b        160 -> 11352
     11190    010002BB6H        046C0H    nop
     11192    010002BB8H        09808H    ldr      r0,[sp,#32]
     11194    010002BBAH        06800H    ldr      r0,[r0]
     11196    010002BBCH        02800H    cmp      r0,#0
     11198    010002BBEH        0D001H    beq.n    2 -> 11204
     11200    010002BC0H        0E04AH    b        148 -> 11352
     11202    010002BC2H        046C0H    nop
        ch := str[first];
     11204    010002BC4H        09800H    ldr      r0,[sp]
     11206    010002BC6H        09905H    ldr      r1,[sp,#20]
     11208    010002BC8H        04288H    cmp      r0,r1
     11210    010002BCAH        0D301H    bcc.n    2 -> 11216
     11212    010002BCCH        0DF01H    svc      1
     11214    010002BCEH        000DAH    ; LineNo: 218
     11216    010002BD0H        09904H    ldr      r1,[sp,#16]
     11218    010002BD2H        01808H    adds     r0,r1,r0
     11220    010002BD4H        07800H    ldrb     r0,[r0]
     11222    010002BD6H        0A903H    add      r1,sp,#12
     11224    010002BD8H        07048H    strb     r0,[r1,#1]
        IF (ch < "0") OR (ch > "9") THEN
     11226    010002BDAH        0A803H    add      r0,sp,#12
     11228    010002BDCH        07840H    ldrb     r0,[r0,#1]
     11230    010002BDEH        02830H    cmp      r0,#48
     11232    010002BE0H        0DA01H    bge.n    2 -> 11238
     11234    010002BE2H        0E006H    b        12 -> 11250
     11236    010002BE4H        046C0H    nop
     11238    010002BE6H        0A803H    add      r0,sp,#12
     11240    010002BE8H        07840H    ldrb     r0,[r0,#1]
     11242    010002BEAH        02839H    cmp      r0,#57
     11244    010002BECH        0DC01H    bgt.n    2 -> 11250
     11246    010002BEEH        0E005H    b        10 -> 11260
     11248    010002BF0H        046C0H    nop
          res := SyntaxError;
     11250    010002BF2H        02002H    movs     r0,#2
     11252    010002BF4H        09908H    ldr      r1,[sp,#32]
     11254    010002BF6H        06008H    str      r0,[r1]
        ELSE
          digit := ORD(ch) - ORD("0");
     11256    010002BF8H        0E02DH    b        90 -> 11350
     11258    010002BFAH        046C0H    nop
     11260    010002BFCH        0A803H    add      r0,sp,#12
     11262    010002BFEH        07840H    ldrb     r0,[r0,#1]
     11264    010002C00H        03830H    subs     r0,#48
     11266    010002C02H        09002H    str      r0,[sp,#8]
          int := (int * 10) + digit;
     11268    010002C04H        09807H    ldr      r0,[sp,#28]
     11270    010002C06H        06800H    ldr      r0,[r0]
     11272    010002C08H        0210AH    movs     r1,#10
     11274    010002C0AH        04348H    muls     r0,r1
     11276    010002C0CH        09902H    ldr      r1,[sp,#8]
     11278    010002C0EH        01840H    adds     r0,r0,r1
     11280    010002C10H        09907H    ldr      r1,[sp,#28]
     11282    010002C12H        06008H    str      r0,[r1]
          IF MaxInt - int < 0 THEN   
     11284    010002C14H        09807H    ldr      r0,[sp,#28]
     11286    010002C16H        06800H    ldr      r0,[r0]
     11288    010002C18H        04919H    ldr      r1,[pc,#100] -> 11392 ; Const 07FFFFFFFH 2147483647
     11290    010002C1AH        01A08H    subs     r0,r1,r0
     11292    010002C1CH        02800H    cmp      r0,#0
     11294    010002C1EH        0DB01H    blt.n    2 -> 11300
     11296    010002C20H        0E016H    b        44 -> 11344
     11298    010002C22H        046C0H    nop
            IF neg & (int = MinInt) THEN
     11300    010002C24H        0A803H    add      r0,sp,#12
     11302    010002C26H        07800H    ldrb     r0,[r0]
     11304    010002C28H        02101H    movs     r1,#1
     11306    010002C2AH        04208H    tst      r0,r1
     11308    010002C2CH        0D101H    bne.n    2 -> 11314
     11310    010002C2EH        0E00CH    b        24 -> 11338
     11312    010002C30H        046C0H    nop
     11314    010002C32H        09807H    ldr      r0,[sp,#28]
     11316    010002C34H        06800H    ldr      r0,[r0]
     11318    010002C36H        04913H    ldr      r1,[pc,#76] -> 11396 ; Const 080000000H -2147483648
     11320    010002C38H        042C8H    cmn      r0,r1
     11322    010002C3AH        0D001H    beq.n    2 -> 11328
     11324    010002C3CH        0E005H    b        10 -> 11338
     11326    010002C3EH        046C0H    nop
              neg := FALSE
            ELSE
     11328    010002C40H        02000H    movs     r0,#0
     11330    010002C42H        0A903H    add      r1,sp,#12
     11332    010002C44H        07008H    strb     r0,[r1]
              res := OutOfLimits
     11334    010002C46H        0E003H    b        6 -> 11344
     11336    010002C48H        046C0H    nop
            END
     11338    010002C4AH        02003H    movs     r0,#3
     11340    010002C4CH        09908H    ldr      r1,[sp,#32]
     11342    010002C4EH        06008H    str      r0,[r1]
          END;
          INC(first)
        END
     11344    010002C50H        09800H    ldr      r0,[sp]
     11346    010002C52H        03001H    adds     r0,#1
     11348    010002C54H        09000H    str      r0,[sp]
      END
     11350    010002C56H        0E7A9H    b        -174 -> 11180
    END;
    IF res = NoError THEN
     11352    010002C58H        09808H    ldr      r0,[sp,#32]
     11354    010002C5AH        06800H    ldr      r0,[r0]
     11356    010002C5CH        02800H    cmp      r0,#0
     11358    010002C5EH        0D001H    beq.n    2 -> 11364
     11360    010002C60H        0E00CH    b        24 -> 11388
     11362    010002C62H        046C0H    nop
      IF neg THEN int := -int END
     11364    010002C64H        0A803H    add      r0,sp,#12
     11366    010002C66H        07800H    ldrb     r0,[r0]
     11368    010002C68H        02101H    movs     r1,#1
     11370    010002C6AH        04208H    tst      r0,r1
     11372    010002C6CH        0D101H    bne.n    2 -> 11378
     11374    010002C6EH        0E005H    b        10 -> 11388
     11376    010002C70H        046C0H    nop
     11378    010002C72H        09807H    ldr      r0,[sp,#28]
     11380    010002C74H        06800H    ldr      r0,[r0]
     11382    010002C76H        04240H    rsbs     r0,r0,#0
     11384    010002C78H        09907H    ldr      r1,[sp,#28]
     11386    010002C7AH        06008H    str      r0,[r1]
    END
  END StrToInt;
     11388    010002C7CH        0B009H    add      sp,#36
     11390    010002C7EH        0BD00H    pop      { pc }
     11392    010002C80H    07FFFFFFFH    ; Const 07FFFFFFFH 2147483647
     11396    010002C84H    080000000H    ; Const 080000000H -2147483648

  PROCEDURE Texts.ReadString*(R: TextIO.Reader; VAR s: ARRAY OF CHAR; VAR res: INTEGER);
    VAR numCh: INTEGER;
  BEGIN
     11400    010002C88H        0B50FH    push     { r0, r1, r2, r3, lr }
     11402    010002C8AH        0B081H    sub      sp,#4
    R.getString(R.dev, s, numCh, res);
     11404    010002C8CH        09801H    ldr      r0,[sp,#4]
     11406    010002C8EH        06800H    ldr      r0,[r0]
     11408    010002C90H        09902H    ldr      r1,[sp,#8]
     11410    010002C92H        09A03H    ldr      r2,[sp,#12]
     11412    010002C94H        0466BH    mov      r3,sp
     11414    010002C96H        09C04H    ldr      r4,[sp,#16]
     11416    010002C98H        09D01H    ldr      r5,[sp,#4]
     11418    010002C9AH        0686DH    ldr      r5,[r5,#4]
     11420    010002C9CH        02D00H    cmp      r5,#0
     11422    010002C9EH        0D101H    bne.n    2 -> 11428
     11424    010002CA0H        0DF05H    svc      5
     11426    010002CA2H        000FAH    ; LineNo: 250
     11428    010002CA4H        03501H    adds     r5,#1
     11430    010002CA6H        047A8H    blx      r5
     11432    010002CA8H        0E000H    b        0 -> 11436
     11434    010002CAAH        000F9H    ; LineNo: 249
    IF res = NoError THEN
     11436    010002CACH        09804H    ldr      r0,[sp,#16]
     11438    010002CAEH        06800H    ldr      r0,[r0]
     11440    010002CB0H        02800H    cmp      r0,#0
     11442    010002CB2H        0D001H    beq.n    2 -> 11448
     11444    010002CB4H        0E008H    b        16 -> 11464
     11446    010002CB6H        046C0H    nop
      IF numCh = 0 THEN
     11448    010002CB8H        09800H    ldr      r0,[sp]
     11450    010002CBAH        02800H    cmp      r0,#0
     11452    010002CBCH        0D001H    beq.n    2 -> 11458
     11454    010002CBEH        0E003H    b        6 -> 11464
     11456    010002CC0H        046C0H    nop
        res := NoInput
      END
     11458    010002CC2H        02004H    movs     r0,#4
     11460    010002CC4H        09904H    ldr      r1,[sp,#16]
     11462    010002CC6H        06008H    str      r0,[r1]
    END
  END ReadString;
     11464    010002CC8H        0B005H    add      sp,#20
     11466    010002CCAH        0BD00H    pop      { pc }

  PROCEDURE Texts.ReadInt*(R: TextIO.Reader; VAR int, res: INTEGER);
    VAR numCh: INTEGER; buf: ARRAY 32 OF CHAR;
  BEGIN
     11468    010002CCCH        0B507H    push     { r0, r1, r2, lr }
     11470    010002CCEH        0B089H    sub      sp,#36
    R.getString(R.dev, buf, numCh, res);
     11472    010002CD0H        09809H    ldr      r0,[sp,#36]
     11474    010002CD2H        06800H    ldr      r0,[r0]
     11476    010002CD4H        0A901H    add      r1,sp,#4
     11478    010002CD6H        02220H    movs     r2,#32
     11480    010002CD8H        0466BH    mov      r3,sp
     11482    010002CDAH        09C0BH    ldr      r4,[sp,#44]
     11484    010002CDCH        09D09H    ldr      r5,[sp,#36]
     11486    010002CDEH        0686DH    ldr      r5,[r5,#4]
     11488    010002CE0H        02D00H    cmp      r5,#0
     11490    010002CE2H        0D101H    bne.n    2 -> 11496
     11492    010002CE4H        0DF05H    svc      5
     11494    010002CE6H        0010DH    ; LineNo: 269
     11496    010002CE8H        03501H    adds     r5,#1
     11498    010002CEAH        047A8H    blx      r5
     11500    010002CECH        0E000H    b        0 -> 11504
     11502    010002CEEH        0010CH    ; LineNo: 268
    IF res = NoError THEN
     11504    010002CF0H        0980BH    ldr      r0,[sp,#44]
     11506    010002CF2H        06800H    ldr      r0,[r0]
     11508    010002CF4H        02800H    cmp      r0,#0
     11510    010002CF6H        0D001H    beq.n    2 -> 11516
     11512    010002CF8H        0E013H    b        38 -> 11554
     11514    010002CFAH        046C0H    nop
      IF numCh > 0 THEN
     11516    010002CFCH        09800H    ldr      r0,[sp]
     11518    010002CFEH        02800H    cmp      r0,#0
     11520    010002D00H        0DC01H    bgt.n    2 -> 11526
     11522    010002D02H        0E00BH    b        22 -> 11548
     11524    010002D04H        046C0H    nop
        StrToInt(buf, numCh, int, res)
     11526    010002D06H        0A801H    add      r0,sp,#4
     11528    010002D08H        02120H    movs     r1,#32
     11530    010002D0AH        09A00H    ldr      r2,[sp]
     11532    010002D0CH        09B0AH    ldr      r3,[sp,#40]
     11534    010002D0EH        09C0BH    ldr      r4,[sp,#44]
      ELSE
     11536    010002D10H    0F7FFFF24H    bl.w     Texts.StrToInt
     11540    010002D14H        0E000H    b        0 -> 11544
     11542    010002D16H        00110H    ; LineNo: 272
        res := NoInput
     11544    010002D18H        0E003H    b        6 -> 11554
     11546    010002D1AH        046C0H    nop
      END
     11548    010002D1CH        02004H    movs     r0,#4
     11550    010002D1EH        0990BH    ldr      r1,[sp,#44]
     11552    010002D20H        06008H    str      r0,[r1]
    END
  END ReadInt;
     11554    010002D22H        0B00CH    add      sp,#48
     11556    010002D24H        0BD00H    pop      { pc }
     11558    010002D26H        046C0H    nop

  PROCEDURE Texts.FlushOut*(W: TextIO.Writer);
  BEGIN
     11560    010002D28H        0B501H    push     { r0, lr }
    IF W.flush # NIL THEN
     11562    010002D2AH        09800H    ldr      r0,[sp]
     11564    010002D2CH        06880H    ldr      r0,[r0,#8]
     11566    010002D2EH        02800H    cmp      r0,#0
     11568    010002D30H        0D101H    bne.n    2 -> 11574
     11570    010002D32H        0E00CH    b        24 -> 11598
     11572    010002D34H        046C0H    nop
      W.flush(W.dev)
     11574    010002D36H        09800H    ldr      r0,[sp]
     11576    010002D38H        06800H    ldr      r0,[r0]
    END
     11578    010002D3AH        09900H    ldr      r1,[sp]
     11580    010002D3CH        06889H    ldr      r1,[r1,#8]
     11582    010002D3EH        02900H    cmp      r1,#0
     11584    010002D40H        0D101H    bne.n    2 -> 11590
     11586    010002D42H        0DF05H    svc      5
     11588    010002D44H        0011FH    ; LineNo: 287
     11590    010002D46H        03101H    adds     r1,#1
     11592    010002D48H        04788H    blx      r1
     11594    010002D4AH        0E000H    b        0 -> 11598
     11596    010002D4CH        0011FH    ; LineNo: 287
  END FlushOut;
     11598    010002D4EH        0B001H    add      sp,#4
     11600    010002D50H        0BD00H    pop      { pc }
     11602    010002D52H        046C0H    nop

PROCEDURE Texts..init;
BEGIN
     11604    010002D54H        0B500H    push     { lr }
  eol[0] := CR; eol[1] := LF
     11606    010002D56H        04803H    ldr      r0,[pc,#12] -> 11620 ; Global 02002FCCCH
     11608    010002D58H        0210DH    movs     r1,#13
     11610    010002D5AH        07001H    strb     r1,[r0]
     11612    010002D5CH        04801H    ldr      r0,[pc,#4] -> 11620 ; Global 02002FCCCH
END .init;
END Texts.
     11614    010002D5EH        0210AH    movs     r1,#10
     11616    010002D60H        07041H    strb     r1,[r0,#1]
     11618    010002D62H        0BD00H    pop      { pc }
     11620    010002D64H    02002FCCCH    ; Global 02002FCCCH

MODULE ResData;
     11624    010002D68H        00000H    ; Pad
     11628    010002D6CH        0000CH    ; Type (size)
     11632    010002D70H        00000H    ; Type
     11636    010002D74H        00000H    ; Type
     11640    010002D78H        00000H    ; Type
     11644    010002D7CH        00000H    ; Type
     11648    010002D80H        00010H    ; Type (size)
     11652    010002D84H        00000H    ; Type
     11656    010002D88H        00000H    ; Type
     11660    010002D8CH        00000H    ; Type
     11664    010002D90H        00000H    ; Type

  PROCEDURE* ResData.Size*(r: Resource): INTEGER;
    RETURN r.nBytes
     11668    010002D94H        0B503H    push     { r0, r1, lr }
  END Size;
     11670    010002D96H        09800H    ldr      r0,[sp]
     11672    010002D98H        06840H    ldr      r0,[r0,#4]
     11674    010002D9AH        0B002H    add      sp,#8
     11676    010002D9CH        0BD00H    pop      { pc }
     11678    010002D9EH        046C0H    nop

  PROCEDURE* ResData.GetInt*(r: Resource; index: INTEGER; VAR data: INTEGER);
  BEGIN
     11680    010002DA0H        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(index <= r.nItems, Error.index);
     11682    010002DA2H        09802H    ldr      r0,[sp,#8]
     11684    010002DA4H        09900H    ldr      r1,[sp]
     11686    010002DA6H        06889H    ldr      r1,[r1,#8]
     11688    010002DA8H        04288H    cmp      r0,r1
     11690    010002DAAH        0DD01H    ble.n    2 -> 11696
     11692    010002DACH        0DF16H    svc      22
     11694    010002DAEH        0002CH    ; LineNo: 44
    SYSTEM.GET(r.dataStart + (index * 4), data)
     11696    010002DB0H        09802H    ldr      r0,[sp,#8]
     11698    010002DB2H        00080H    lsls     r0,r0,#2
     11700    010002DB4H        09900H    ldr      r1,[sp]
     11702    010002DB6H        06809H    ldr      r1,[r1]
     11704    010002DB8H        01808H    adds     r0,r1,r0
  END GetInt;
     11706    010002DBAH        06801H    ldr      r1,[r0]
     11708    010002DBCH        09A03H    ldr      r2,[sp,#12]
     11710    010002DBEH        06011H    str      r1,[r2]
     11712    010002DC0H        0B004H    add      sp,#16
     11714    010002DC2H        0BD00H    pop      { pc }

  PROCEDURE* ResData.GetByte*(r: Resource; index: INTEGER; VAR data: BYTE);
  BEGIN
     11716    010002DC4H        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(index <= r.nBytes, Error.index);
     11718    010002DC6H        09802H    ldr      r0,[sp,#8]
     11720    010002DC8H        09900H    ldr      r1,[sp]
     11722    010002DCAH        06849H    ldr      r1,[r1,#4]
     11724    010002DCCH        04288H    cmp      r0,r1
     11726    010002DCEH        0DD01H    ble.n    2 -> 11732
     11728    010002DD0H        0DF16H    svc      22
     11730    010002DD2H        00033H    ; LineNo: 51
    SYSTEM.GET(r.dataStart + index, data)
     11732    010002DD4H        09800H    ldr      r0,[sp]
     11734    010002DD6H        06800H    ldr      r0,[r0]
     11736    010002DD8H        09902H    ldr      r1,[sp,#8]
     11738    010002DDAH        01840H    adds     r0,r0,r1
  END GetByte;
     11740    010002DDCH        07801H    ldrb     r1,[r0]
     11742    010002DDEH        09A03H    ldr      r2,[sp,#12]
     11744    010002DE0H        07011H    strb     r1,[r2]
     11746    010002DE2H        0B004H    add      sp,#16
     11748    010002DE4H        0BD00H    pop      { pc }
     11750    010002DE6H        046C0H    nop

  PROCEDURE* ResData.GetChar*(r: Resource; index: INTEGER; VAR ch: CHAR);
  BEGIN
     11752    010002DE8H        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(index <= r.nBytes, Error.index);
     11754    010002DEAH        09802H    ldr      r0,[sp,#8]
     11756    010002DECH        09900H    ldr      r1,[sp]
     11758    010002DEEH        06849H    ldr      r1,[r1,#4]
     11760    010002DF0H        04288H    cmp      r0,r1
     11762    010002DF2H        0DD01H    ble.n    2 -> 11768
     11764    010002DF4H        0DF16H    svc      22
     11766    010002DF6H        0003AH    ; LineNo: 58
    SYSTEM.GET(r.dataStart + index, ch)
     11768    010002DF8H        09800H    ldr      r0,[sp]
     11770    010002DFAH        06800H    ldr      r0,[r0]
     11772    010002DFCH        09902H    ldr      r1,[sp,#8]
     11774    010002DFEH        01840H    adds     r0,r0,r1
  END GetChar;
     11776    010002E00H        07801H    ldrb     r1,[r0]
     11778    010002E02H        09A03H    ldr      r2,[sp,#12]
     11780    010002E04H        07011H    strb     r1,[r2]
     11782    010002E06H        0B004H    add      sp,#16
     11784    010002E08H        0BD00H    pop      { pc }
     11786    010002E0AH        046C0H    nop

  PROCEDURE* ResData.GetIntArray*(r: Resource; index: INTEGER; count: INTEGER; VAR items: ARRAY OF INTEGER): INTEGER;
  VAR
    i, p: INTEGER;
  BEGIN
     11788    010002E0CH        0B53FH    push     { r0, r1, r2, r3, r4, r5, lr }
     11790    010002E0EH        0B082H    sub      sp,#8
    ASSERT(index <= r.nItems, Error.index);
     11792    010002E10H        09804H    ldr      r0,[sp,#16]
     11794    010002E12H        09902H    ldr      r1,[sp,#8]
     11796    010002E14H        06889H    ldr      r1,[r1,#8]
     11798    010002E16H        04288H    cmp      r0,r1
     11800    010002E18H        0DD01H    ble.n    2 -> 11806
     11802    010002E1AH        0DF16H    svc      22
     11804    010002E1CH        00043H    ; LineNo: 67
    IF index + count > r.nItems THEN count := r.nItems - index + 1 END;
     11806    010002E1EH        09804H    ldr      r0,[sp,#16]
     11808    010002E20H        09905H    ldr      r1,[sp,#20]
     11810    010002E22H        01840H    adds     r0,r0,r1
     11812    010002E24H        09902H    ldr      r1,[sp,#8]
     11814    010002E26H        06889H    ldr      r1,[r1,#8]
     11816    010002E28H        04288H    cmp      r0,r1
     11818    010002E2AH        0DC01H    bgt.n    2 -> 11824
     11820    010002E2CH        0E006H    b        12 -> 11836
     11822    010002E2EH        046C0H    nop
     11824    010002E30H        09802H    ldr      r0,[sp,#8]
     11826    010002E32H        06880H    ldr      r0,[r0,#8]
     11828    010002E34H        09904H    ldr      r1,[sp,#16]
     11830    010002E36H        01A40H    subs     r0,r0,r1
     11832    010002E38H        03001H    adds     r0,#1
     11834    010002E3AH        09005H    str      r0,[sp,#20]
    ASSERT(count <= LEN(items), Error.index);
     11836    010002E3CH        09805H    ldr      r0,[sp,#20]
     11838    010002E3EH        09907H    ldr      r1,[sp,#28]
     11840    010002E40H        04288H    cmp      r0,r1
     11842    010002E42H        0DD01H    ble.n    2 -> 11848
     11844    010002E44H        0DF16H    svc      22
     11846    010002E46H        00045H    ; LineNo: 69
    p := r.dataStart + (index * 4);
     11848    010002E48H        09804H    ldr      r0,[sp,#16]
     11850    010002E4AH        00080H    lsls     r0,r0,#2
     11852    010002E4CH        09902H    ldr      r1,[sp,#8]
     11854    010002E4EH        06809H    ldr      r1,[r1]
     11856    010002E50H        01808H    adds     r0,r1,r0
     11858    010002E52H        09001H    str      r0,[sp,#4]
    FOR i := 0 TO count - 1 DO
     11860    010002E54H        02000H    movs     r0,#0
     11862    010002E56H        09000H    str      r0,[sp]
     11864    010002E58H        09805H    ldr      r0,[sp,#20]
     11866    010002E5AH        03801H    subs     r0,#1
      SYSTEM.GET(p, items[i]);
     11868    010002E5CH        09900H    ldr      r1,[sp]
     11870    010002E5EH        04281H    cmp      r1,r0
     11872    010002E60H        0DD01H    ble.n    2 -> 11878
     11874    010002E62H        0E00EH    b        28 -> 11906
     11876    010002E64H        046C0H    nop
     11878    010002E66H        09800H    ldr      r0,[sp]
     11880    010002E68H        09906H    ldr      r1,[sp,#24]
     11882    010002E6AH        00080H    lsls     r0,r0,#2
     11884    010002E6CH        01808H    adds     r0,r1,r0
     11886    010002E6EH        09901H    ldr      r1,[sp,#4]
     11888    010002E70H        0680AH    ldr      r2,[r1]
     11890    010002E72H        06002H    str      r2,[r0]
      INC(p, 4)
    END;
     11892    010002E74H        09801H    ldr      r0,[sp,#4]
     11894    010002E76H        03004H    adds     r0,#4
     11896    010002E78H        09001H    str      r0,[sp,#4]
     11898    010002E7AH        09800H    ldr      r0,[sp]
     11900    010002E7CH        03001H    adds     r0,#1
     11902    010002E7EH        09000H    str      r0,[sp]
     11904    010002E80H        0E7EAH    b        -44 -> 11864
    RETURN count
  END GetIntArray;
     11906    010002E82H        09805H    ldr      r0,[sp,#20]
     11908    010002E84H        0B008H    add      sp,#32
     11910    010002E86H        0BD00H    pop      { pc }

  PROCEDURE* ResData.GetReal*(r: Resource; index: INTEGER; VAR data: REAL);
  BEGIN
     11912    010002E88H        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(index < r.nItems, Error.index);
     11914    010002E8AH        09802H    ldr      r0,[sp,#8]
     11916    010002E8CH        09900H    ldr      r1,[sp]
     11918    010002E8EH        06889H    ldr      r1,[r1,#8]
     11920    010002E90H        04288H    cmp      r0,r1
     11922    010002E92H        0DB01H    blt.n    2 -> 11928
     11924    010002E94H        0DF16H    svc      22
     11926    010002E96H        00051H    ; LineNo: 81
    SYSTEM.GET(r.dataStart + (index * 4), data)
     11928    010002E98H        09802H    ldr      r0,[sp,#8]
     11930    010002E9AH        00080H    lsls     r0,r0,#2
     11932    010002E9CH        09900H    ldr      r1,[sp]
     11934    010002E9EH        06809H    ldr      r1,[r1]
     11936    010002EA0H        01808H    adds     r0,r1,r0
  END GetReal;
     11938    010002EA2H        06801H    ldr      r1,[r0]
     11940    010002EA4H        09A03H    ldr      r2,[sp,#12]
     11942    010002EA6H        06011H    str      r1,[r2]
     11944    010002EA8H        0B004H    add      sp,#16
     11946    010002EAAH        0BD00H    pop      { pc }

  PROCEDURE* ResData.GetRealArray*(r: Resource; index: INTEGER; count: INTEGER; VAR items: ARRAY OF REAL): INTEGER;
  VAR
    i, p: INTEGER;
  BEGIN
     11948    010002EACH        0B53FH    push     { r0, r1, r2, r3, r4, r5, lr }
     11950    010002EAEH        0B082H    sub      sp,#8
    ASSERT(index <= r.nItems, Error.index);
     11952    010002EB0H        09804H    ldr      r0,[sp,#16]
     11954    010002EB2H        09902H    ldr      r1,[sp,#8]
     11956    010002EB4H        06889H    ldr      r1,[r1,#8]
     11958    010002EB6H        04288H    cmp      r0,r1
     11960    010002EB8H        0DD01H    ble.n    2 -> 11966
     11962    010002EBAH        0DF16H    svc      22
     11964    010002EBCH        0005AH    ; LineNo: 90
    IF index + count > r.nItems THEN count := r.nItems - index + 1 END;
     11966    010002EBEH        09804H    ldr      r0,[sp,#16]
     11968    010002EC0H        09905H    ldr      r1,[sp,#20]
     11970    010002EC2H        01840H    adds     r0,r0,r1
     11972    010002EC4H        09902H    ldr      r1,[sp,#8]
     11974    010002EC6H        06889H    ldr      r1,[r1,#8]
     11976    010002EC8H        04288H    cmp      r0,r1
     11978    010002ECAH        0DC01H    bgt.n    2 -> 11984
     11980    010002ECCH        0E006H    b        12 -> 11996
     11982    010002ECEH        046C0H    nop
     11984    010002ED0H        09802H    ldr      r0,[sp,#8]
     11986    010002ED2H        06880H    ldr      r0,[r0,#8]
     11988    010002ED4H        09904H    ldr      r1,[sp,#16]
     11990    010002ED6H        01A40H    subs     r0,r0,r1
     11992    010002ED8H        03001H    adds     r0,#1
     11994    010002EDAH        09005H    str      r0,[sp,#20]
    ASSERT(count <= LEN(items), Error.index);
     11996    010002EDCH        09805H    ldr      r0,[sp,#20]
     11998    010002EDEH        09907H    ldr      r1,[sp,#28]
     12000    010002EE0H        04288H    cmp      r0,r1
     12002    010002EE2H        0DD01H    ble.n    2 -> 12008
     12004    010002EE4H        0DF16H    svc      22
     12006    010002EE6H        0005CH    ; LineNo: 92
    p := r.dataStart + (index * 4);
     12008    010002EE8H        09804H    ldr      r0,[sp,#16]
     12010    010002EEAH        00080H    lsls     r0,r0,#2
     12012    010002EECH        09902H    ldr      r1,[sp,#8]
     12014    010002EEEH        06809H    ldr      r1,[r1]
     12016    010002EF0H        01808H    adds     r0,r1,r0
     12018    010002EF2H        09001H    str      r0,[sp,#4]
    FOR i := 0 TO count - 1 DO
     12020    010002EF4H        02000H    movs     r0,#0
     12022    010002EF6H        09000H    str      r0,[sp]
     12024    010002EF8H        09805H    ldr      r0,[sp,#20]
     12026    010002EFAH        03801H    subs     r0,#1
      SYSTEM.GET(p, items[i]);
     12028    010002EFCH        09900H    ldr      r1,[sp]
     12030    010002EFEH        04281H    cmp      r1,r0
     12032    010002F00H        0DD01H    ble.n    2 -> 12038
     12034    010002F02H        0E00EH    b        28 -> 12066
     12036    010002F04H        046C0H    nop
     12038    010002F06H        09800H    ldr      r0,[sp]
     12040    010002F08H        09906H    ldr      r1,[sp,#24]
     12042    010002F0AH        00080H    lsls     r0,r0,#2
     12044    010002F0CH        01808H    adds     r0,r1,r0
     12046    010002F0EH        09901H    ldr      r1,[sp,#4]
     12048    010002F10H        0680AH    ldr      r2,[r1]
     12050    010002F12H        06002H    str      r2,[r0]
      INC(p, 4)
    END;
     12052    010002F14H        09801H    ldr      r0,[sp,#4]
     12054    010002F16H        03004H    adds     r0,#4
     12056    010002F18H        09001H    str      r0,[sp,#4]
     12058    010002F1AH        09800H    ldr      r0,[sp]
     12060    010002F1CH        03001H    adds     r0,#1
     12062    010002F1EH        09000H    str      r0,[sp]
     12064    010002F20H        0E7EAH    b        -44 -> 12024
    RETURN count
  END GetRealArray;
     12066    010002F22H        09805H    ldr      r0,[sp,#20]
     12068    010002F24H        0B008H    add      sp,#32
     12070    010002F26H        0BD00H    pop      { pc }

  PROCEDURE* ResData.GetName(adr: INTEGER; VAR resName: Name);
  VAR
    i: INTEGER;
    s: ARRAY 4 OF CHAR;
  BEGIN
     12072    010002F28H        0B503H    push     { r0, r1, lr }
     12074    010002F2AH        0B082H    sub      sp,#8
    SYSTEM.GET(adr, s);
     12076    010002F2CH        09802H    ldr      r0,[sp,#8]
     12078    010002F2EH        06801H    ldr      r1,[r0]
     12080    010002F30H        09101H    str      r1,[sp,#4]
    FOR i := 0 TO 3 DO resName[i] := s[i] END;
     12082    010002F32H        02000H    movs     r0,#0
     12084    010002F34H        09000H    str      r0,[sp]
     12086    010002F36H        09800H    ldr      r0,[sp]
     12088    010002F38H        02803H    cmp      r0,#3
     12090    010002F3AH        0DD01H    ble.n    2 -> 12096
     12092    010002F3CH        0E00CH    b        24 -> 12120
     12094    010002F3EH        046C0H    nop
     12096    010002F40H        09800H    ldr      r0,[sp]
     12098    010002F42H        09903H    ldr      r1,[sp,#12]
     12100    010002F44H        01808H    adds     r0,r1,r0
     12102    010002F46H        09900H    ldr      r1,[sp]
     12104    010002F48H        0466AH    mov      r2,sp
     12106    010002F4AH        01851H    adds     r1,r2,r1
     12108    010002F4CH        07909H    ldrb     r1,[r1,#4]
     12110    010002F4EH        07001H    strb     r1,[r0]
     12112    010002F50H        09800H    ldr      r0,[sp]
     12114    010002F52H        03001H    adds     r0,#1
     12116    010002F54H        09000H    str      r0,[sp]
     12118    010002F56H        0E7EEH    b        -36 -> 12086
    SYSTEM.GET(adr + 4, s);
     12120    010002F58H        09802H    ldr      r0,[sp,#8]
     12122    010002F5AH        03004H    adds     r0,#4
     12124    010002F5CH        06801H    ldr      r1,[r0]
     12126    010002F5EH        09101H    str      r1,[sp,#4]
    FOR i := 0 TO 3 DO resName[i + 4] := s[i] END;
     12128    010002F60H        02000H    movs     r0,#0
     12130    010002F62H        09000H    str      r0,[sp]
     12132    010002F64H        09800H    ldr      r0,[sp]
     12134    010002F66H        02803H    cmp      r0,#3
     12136    010002F68H        0DD01H    ble.n    2 -> 12142
     12138    010002F6AH        0E00DH    b        26 -> 12168
     12140    010002F6CH        046C0H    nop
     12142    010002F6EH        09800H    ldr      r0,[sp]
     12144    010002F70H        03004H    adds     r0,#4
     12146    010002F72H        09903H    ldr      r1,[sp,#12]
     12148    010002F74H        01808H    adds     r0,r1,r0
     12150    010002F76H        09900H    ldr      r1,[sp]
     12152    010002F78H        0466AH    mov      r2,sp
     12154    010002F7AH        01851H    adds     r1,r2,r1
     12156    010002F7CH        07909H    ldrb     r1,[r1,#4]
     12158    010002F7EH        07001H    strb     r1,[r0]
     12160    010002F80H        09800H    ldr      r0,[sp]
     12162    010002F82H        03001H    adds     r0,#1
     12164    010002F84H        09000H    str      r0,[sp]
     12166    010002F86H        0E7EDH    b        -38 -> 12132
    resName[8] := 0X
  END GetName;
     12168    010002F88H        02000H    movs     r0,#0
     12170    010002F8AH        09903H    ldr      r1,[sp,#12]
     12172    010002F8CH        07208H    strb     r0,[r1,#8]
     12174    010002F8EH        0B004H    add      sp,#16
     12176    010002F90H        0BD00H    pop      { pc }
     12178    010002F92H        046C0H    nop

  PROCEDURE* ResData.Count*(): INTEGER;
  VAR
    i, resSize, resStart: INTEGER;
    id: INTEGER;
  BEGIN
     12180    010002F94H        0B500H    push     { lr }
     12182    010002F96H        0B084H    sub      sp,#16
    resStart := LinkOptions.ResourceStart;
     12184    010002F98H        04811H    ldr      r0,[pc,#68] -> 12256 ; Global 02002FFE8H
     12186    010002F9AH        06800H    ldr      r0,[r0]
     12188    010002F9CH        09002H    str      r0,[sp,#8]
    SYSTEM.GET(resStart, id);
     12190    010002F9EH        09802H    ldr      r0,[sp,#8]
     12192    010002FA0H        06801H    ldr      r1,[r0]
     12194    010002FA2H        09103H    str      r1,[sp,#12]
    i := 0;
     12196    010002FA4H        02000H    movs     r0,#0
     12198    010002FA6H        09000H    str      r0,[sp]
    WHILE (id = OB7R) DO
     12200    010002FA8H        09803H    ldr      r0,[sp,#12]
     12202    010002FAAH        0490CH    ldr      r1,[pc,#48] -> 12252 ; Const 05237424FH 1379353167
     12204    010002FACH        04288H    cmp      r0,r1
     12206    010002FAEH        0D001H    beq.n    2 -> 12212
     12208    010002FB0H        0E010H    b        32 -> 12244
     12210    010002FB2H        046C0H    nop
      SYSTEM.GET(resStart + BytesOffset, resSize);
     12212    010002FB4H        09802H    ldr      r0,[sp,#8]
     12214    010002FB6H        03014H    adds     r0,#20
     12216    010002FB8H        06801H    ldr      r1,[r0]
     12218    010002FBAH        09101H    str      r1,[sp,#4]
      resStart := resStart + DataOffset + resSize;
     12220    010002FBCH        09802H    ldr      r0,[sp,#8]
     12222    010002FBEH        03018H    adds     r0,#24
     12224    010002FC0H        09901H    ldr      r1,[sp,#4]
     12226    010002FC2H        01840H    adds     r0,r0,r1
     12228    010002FC4H        09002H    str      r0,[sp,#8]
      SYSTEM.GET(resStart, id);
     12230    010002FC6H        09802H    ldr      r0,[sp,#8]
     12232    010002FC8H        06801H    ldr      r1,[r0]
     12234    010002FCAH        09103H    str      r1,[sp,#12]
      INC(i)
    END;
     12236    010002FCCH        09800H    ldr      r0,[sp]
     12238    010002FCEH        03001H    adds     r0,#1
     12240    010002FD0H        09000H    str      r0,[sp]
     12242    010002FD2H        0E7E9H    b        -46 -> 12200
    RETURN i
  END Count;
     12244    010002FD4H        09800H    ldr      r0,[sp]
     12246    010002FD6H        0B004H    add      sp,#16
     12248    010002FD8H        0BD00H    pop      { pc }
     12250    010002FDAH        046C0H    nop
     12252    010002FDCH    05237424FH    ; Const 05237424FH 1379353167
     12256    010002FE0H    02002FFE8H    ; Global 02002FFE8H

  PROCEDURE ResData.GetDirectory*(VAR list: ARRAY OF DirEntry);
  VAR
    i, resStart, resSize: INTEGER;
    id: INTEGER;
  BEGIN
     12260    010002FE4H        0B503H    push     { r0, r1, lr }
     12262    010002FE6H        0B084H    sub      sp,#16
    resStart := LinkOptions.ResourceStart;
     12264    010002FE8H        04820H    ldr      r0,[pc,#128] -> 12396 ; Global 02002FFE8H
     12266    010002FEAH        06800H    ldr      r0,[r0]
     12268    010002FECH        09001H    str      r0,[sp,#4]
    SYSTEM.GET(resStart, id);
     12270    010002FEEH        09801H    ldr      r0,[sp,#4]
     12272    010002FF0H        06801H    ldr      r1,[r0]
     12274    010002FF2H        09103H    str      r1,[sp,#12]
    i := 0;
     12276    010002FF4H        02000H    movs     r0,#0
     12278    010002FF6H        09000H    str      r0,[sp]
    WHILE (id = OB7R) & (i < LEN(list)) DO
     12280    010002FF8H        09803H    ldr      r0,[sp,#12]
     12282    010002FFAH        0491BH    ldr      r1,[pc,#108] -> 12392 ; Const 05237424FH 1379353167
     12284    010002FFCH        04288H    cmp      r0,r1
     12286    010002FFEH        0D001H    beq.n    2 -> 12292
     12288    010003000H        0E030H    b        96 -> 12388
     12290    010003002H        046C0H    nop
     12292    010003004H        09800H    ldr      r0,[sp]
     12294    010003006H        09905H    ldr      r1,[sp,#20]
     12296    010003008H        04288H    cmp      r0,r1
     12298    01000300AH        0DB01H    blt.n    2 -> 12304
     12300    01000300CH        0E02AH    b        84 -> 12388
     12302    01000300EH        046C0H    nop
      GetName(resStart + NameOffset, list[i].name);
     12304    010003010H        09801H    ldr      r0,[sp,#4]
     12306    010003012H        03008H    adds     r0,#8
     12308    010003014H        09900H    ldr      r1,[sp]
     12310    010003016H        09A05H    ldr      r2,[sp,#20]
     12312    010003018H        04291H    cmp      r1,r2
     12314    01000301AH        0D301H    bcc.n    2 -> 12320
     12316    01000301CH        0DF01H    svc      1
     12318    01000301EH        0008EH    ; LineNo: 142
     12320    010003020H        09A04H    ldr      r2,[sp,#16]
     12322    010003022H        00109H    lsls     r1,r1,#4
     12324    010003024H        01851H    adds     r1,r2,r1
     12326    010003026H    0F7FFFF7FH    bl.w     ResData.GetName
     12330    01000302AH        0E000H    b        0 -> 12334
     12332    01000302CH        0008EH    ; LineNo: 142
      SYSTEM.GET(resStart + BytesOffset, resSize);
     12334    01000302EH        09801H    ldr      r0,[sp,#4]
     12336    010003030H        03014H    adds     r0,#20
     12338    010003032H        06801H    ldr      r1,[r0]
     12340    010003034H        09102H    str      r1,[sp,#8]
      list[i].size := resSize;
     12342    010003036H        09800H    ldr      r0,[sp]
     12344    010003038H        09905H    ldr      r1,[sp,#20]
     12346    01000303AH        04288H    cmp      r0,r1
     12348    01000303CH        0D301H    bcc.n    2 -> 12354
     12350    01000303EH        0DF01H    svc      1
     12352    010003040H        00090H    ; LineNo: 144
     12354    010003042H        09904H    ldr      r1,[sp,#16]
     12356    010003044H        00100H    lsls     r0,r0,#4
     12358    010003046H        01808H    adds     r0,r1,r0
     12360    010003048H        09902H    ldr      r1,[sp,#8]
     12362    01000304AH        060C1H    str      r1,[r0,#12]
      resStart := resStart + DataOffset + resSize;
     12364    01000304CH        09801H    ldr      r0,[sp,#4]
     12366    01000304EH        03018H    adds     r0,#24
     12368    010003050H        09902H    ldr      r1,[sp,#8]
     12370    010003052H        01840H    adds     r0,r0,r1
     12372    010003054H        09001H    str      r0,[sp,#4]
      SYSTEM.GET(resStart, id);
     12374    010003056H        09801H    ldr      r0,[sp,#4]
     12376    010003058H        06801H    ldr      r1,[r0]
     12378    01000305AH        09103H    str      r1,[sp,#12]
      INC(i)
    END
     12380    01000305CH        09800H    ldr      r0,[sp]
     12382    01000305EH        03001H    adds     r0,#1
     12384    010003060H        09000H    str      r0,[sp]
     12386    010003062H        0E7C9H    b        -110 -> 12280
  END GetDirectory;
     12388    010003064H        0B006H    add      sp,#24
     12390    010003066H        0BD00H    pop      { pc }
     12392    010003068H    05237424FH    ; Const 05237424FH 1379353167
     12396    01000306CH    02002FFE8H    ; Global 02002FFE8H

  PROCEDURE ResData.Open*(VAR r: Resource; name: ARRAY OF CHAR);
  VAR
    version, dataType, resStart, resSize: INTEGER;
    id: INTEGER;
    resName: Name;
  BEGIN
     12400    010003070H        0B50FH    push     { r0, r1, r2, r3, lr }
     12402    010003072H        0B088H    sub      sp,#32
    r.nBytes := 0;
     12404    010003074H        02000H    movs     r0,#0
     12406    010003076H        09908H    ldr      r1,[sp,#32]
     12408    010003078H        06048H    str      r0,[r1,#4]
    r.dataStart := 0;
     12410    01000307AH        02000H    movs     r0,#0
     12412    01000307CH        09908H    ldr      r1,[sp,#32]
     12414    01000307EH        06008H    str      r0,[r1]
    r.nItems := 0;
     12416    010003080H        02000H    movs     r0,#0
     12418    010003082H        09908H    ldr      r1,[sp,#32]
     12420    010003084H        06088H    str      r0,[r1,#8]
    resStart := LinkOptions.ResourceStart;
     12422    010003086H        04828H    ldr      r0,[pc,#160] -> 12584 ; Global 02002FFE8H
     12424    010003088H        06800H    ldr      r0,[r0]
     12426    01000308AH        09002H    str      r0,[sp,#8]
    SYSTEM.GET(resStart, id);
     12428    01000308CH        09802H    ldr      r0,[sp,#8]
     12430    01000308EH        06801H    ldr      r1,[r0]
     12432    010003090H        09104H    str      r1,[sp,#16]
    ASSERT(id = OB7R, Error.data);
     12434    010003092H        09804H    ldr      r0,[sp,#16]
     12436    010003094H        04923H    ldr      r1,[pc,#140] -> 12580 ; Const 05237424FH 1379353167
     12438    010003096H        04288H    cmp      r0,r1
     12440    010003098H        0D001H    beq.n    2 -> 12446
     12442    01000309AH        0DF15H    svc      21
     12444    01000309CH        000A3H    ; LineNo: 163
    WHILE id = OB7R DO
     12446    01000309EH        09804H    ldr      r0,[sp,#16]
     12448    0100030A0H        04920H    ldr      r1,[pc,#128] -> 12580 ; Const 05237424FH 1379353167
     12450    0100030A2H        04288H    cmp      r0,r1
     12452    0100030A4H        0D001H    beq.n    2 -> 12458
     12454    0100030A6H        0E03AH    b        116 -> 12574
     12456    0100030A8H        046C0H    nop
      GetName(resStart + NameOffset, resName);
     12458    0100030AAH        09802H    ldr      r0,[sp,#8]
     12460    0100030ACH        03008H    adds     r0,#8
     12462    0100030AEH        0A905H    add      r1,sp,#20
     12464    0100030B0H    0F7FFFF3AH    bl.w     ResData.GetName
     12468    0100030B4H        0E000H    b        0 -> 12472
     12470    0100030B6H        000A5H    ; LineNo: 165
      SYSTEM.GET(resStart + VersionOffset, version);
     12472    0100030B8H        09802H    ldr      r0,[sp,#8]
     12474    0100030BAH        03004H    adds     r0,#4
     12476    0100030BCH        06801H    ldr      r1,[r0]
     12478    0100030BEH        09100H    str      r1,[sp]
      ASSERT(version = 1, Error.version);
     12480    0100030C0H        09800H    ldr      r0,[sp]
     12482    0100030C2H        02801H    cmp      r0,#1
     12484    0100030C4H        0D001H    beq.n    2 -> 12490
     12486    0100030C6H        0DF17H    svc      23
     12488    0100030C8H        000A7H    ; LineNo: 167
      SYSTEM.GET(resStart + BytesOffset, resSize);
     12490    0100030CAH        09802H    ldr      r0,[sp,#8]
     12492    0100030CCH        03014H    adds     r0,#20
     12494    0100030CEH        06801H    ldr      r1,[r0]
     12496    0100030D0H        09103H    str      r1,[sp,#12]
      IF name = resName THEN
     12498    0100030D2H        02000H    movs     r0,#0
     12500    0100030D4H        0990AH    ldr      r1,[sp,#40]
     12502    0100030D6H        0AA05H    add      r2,sp,#20
     12504    0100030D8H        05C0BH    ldrb     r3,[r1,r0]
     12506    0100030DAH        05C14H    ldrb     r4,[r2,r0]
     12508    0100030DCH        03001H    adds     r0,#1
     12510    0100030DEH        042A3H    cmp      r3,r4
     12512    0100030E0H        0D101H    bne.n    2 -> 12518
     12514    0100030E2H        02B00H    cmp      r3,#0
     12516    0100030E4H        0D1F8H    bne.n    -16 -> 12504
     12518    0100030E6H        0D001H    beq.n    2 -> 12524
     12520    0100030E8H        0E010H    b        32 -> 12556
     12522    0100030EAH        046C0H    nop
        r.nBytes := resSize;
     12524    0100030ECH        09803H    ldr      r0,[sp,#12]
     12526    0100030EEH        09908H    ldr      r1,[sp,#32]
     12528    0100030F0H        06048H    str      r0,[r1,#4]
        SYSTEM.GET(resStart + TypeOffset, dataType);
     12530    0100030F2H        09802H    ldr      r0,[sp,#8]
     12532    0100030F4H        03010H    adds     r0,#16
     12534    0100030F6H        06801H    ldr      r1,[r0]
     12536    0100030F8H        09101H    str      r1,[sp,#4]
        r.dataStart := resStart + DataOffset;
     12538    0100030FAH        09802H    ldr      r0,[sp,#8]
     12540    0100030FCH        03018H    adds     r0,#24
     12542    0100030FEH        09908H    ldr      r1,[sp,#32]
     12544    010003100H        06008H    str      r0,[r1]
        r.nItems := r.nBytes DIV 4
      END;
     12546    010003102H        09808H    ldr      r0,[sp,#32]
     12548    010003104H        06840H    ldr      r0,[r0,#4]
     12550    010003106H        01080H    asrs     r0,r0,#2
     12552    010003108H        09908H    ldr      r1,[sp,#32]
     12554    01000310AH        06088H    str      r0,[r1,#8]
      resStart := resStart + DataOffset + resSize;
     12556    01000310CH        09802H    ldr      r0,[sp,#8]
     12558    01000310EH        03018H    adds     r0,#24
     12560    010003110H        09903H    ldr      r1,[sp,#12]
     12562    010003112H        01840H    adds     r0,r0,r1
     12564    010003114H        09002H    str      r0,[sp,#8]
      SYSTEM.GET(resStart, id)
    END
     12566    010003116H        09802H    ldr      r0,[sp,#8]
     12568    010003118H        06801H    ldr      r1,[r0]
     12570    01000311AH        09104H    str      r1,[sp,#16]
     12572    01000311CH        0E7BFH    b        -130 -> 12446
  END Open;
     12574    01000311EH        0B00CH    add      sp,#48
     12576    010003120H        0BD00H    pop      { pc }
     12578    010003122H        046C0H    nop
     12580    010003124H    05237424FH    ; Const 05237424FH 1379353167
     12584    010003128H    02002FFE8H    ; Global 02002FFE8H

PROCEDURE ResData..init;
END .init;
END ResData;
     12588    01000312CH        0B500H    push     { lr }
     12590    01000312EH        0BD00H    pop      { pc }

MODULE RuntimeErrorsOu;
     12592    010003130H        00000H    ; Pad

  PROCEDURE* RuntimeErrorsOu.intArrayToChars(a: ARRAY OF BYTE; VAR chars: ARRAY OF CHAR);
    VAR i: INTEGER;
  BEGIN
     12596    010003134H        0B50FH    push     { r0, r1, r2, r3, lr }
     12598    010003136H        0B081H    sub      sp,#4
    FOR i := 0 TO LEN(a) - 1 DO
     12600    010003138H        02000H    movs     r0,#0
     12602    01000313AH        09000H    str      r0,[sp]
     12604    01000313CH        09802H    ldr      r0,[sp,#8]
     12606    01000313EH        03801H    subs     r0,#1
      chars[i] := CHR(a[i])
     12608    010003140H        09900H    ldr      r1,[sp]
     12610    010003142H        04281H    cmp      r1,r0
     12612    010003144H        0DD01H    ble.n    2 -> 12618
     12614    010003146H        0E00CH    b        24 -> 12642
     12616    010003148H        046C0H    nop
     12618    01000314AH        09800H    ldr      r0,[sp]
     12620    01000314CH        09903H    ldr      r1,[sp,#12]
     12622    01000314EH        01808H    adds     r0,r1,r0
     12624    010003150H        09900H    ldr      r1,[sp]
     12626    010003152H        09A01H    ldr      r2,[sp,#4]
     12628    010003154H        01851H    adds     r1,r2,r1
    END
     12630    010003156H        07809H    ldrb     r1,[r1]
     12632    010003158H        07001H    strb     r1,[r0]
  END intArrayToChars;
     12634    01000315AH        09800H    ldr      r0,[sp]
     12636    01000315CH        03001H    adds     r0,#1
     12638    01000315EH        09000H    str      r0,[sp]
     12640    010003160H        0E7ECH    b        -40 -> 12604
     12642    010003162H        0B005H    add      sp,#20
     12644    010003164H        0BD00H    pop      { pc }
     12646    010003166H        046C0H    nop

  PROCEDURE RuntimeErrorsOu.GetName*(target: INTEGER; VAR modName, procName: Name);
    CONST ItemSize = 6;
    VAR
      r: ResData.Resource;
      i, index, count, addr, resSize, nItems, recType: INTEGER;
      a: ARRAY 4 OF INTEGER;
      modIdx, foundIdx: INTEGER;
  BEGIN
     12648    010003168H        0B507H    push     { r0, r1, r2, lr }
     12650    01000316AH        0B090H    sub      sp,#64
    ResData.Open(r, ".ref");
     12652    01000316CH        04668H    mov      r0,sp
     12654    01000316EH        04947H    ldr      r1,[pc,#284] -> 12940 ; Global 010002D6CH
     12656    010003170H        0A200H    adr      r2,pc,#0 -> 12660
     12658    010003172H        0E003H    b        6 -> 12668
     12660    010003174H    06665722EH    ; String: ".ref"
     12664    010003178H        00000H    ; String: "...."
     12668    01000317CH        02305H    movs     r3,#5
     12670    01000317EH    0F7FFFF77H    bl.w     ResData.Open
     12674    010003182H        0E000H    b        0 -> 12678
     12676    010003184H        0002EH    ; LineNo: 46
    resSize := ResData.Size(r);
     12678    010003186H        04668H    mov      r0,sp
     12680    010003188H        04940H    ldr      r1,[pc,#256] -> 12940 ; Global 010002D6CH
     12682    01000318AH    0F7FFFE03H    bl.w     ResData.Size
     12686    01000318EH        0E000H    b        0 -> 12690
     12688    010003190H        0002FH    ; LineNo: 47
     12690    010003192H        09007H    str      r0,[sp,#28]
    nItems := resSize DIV (ItemSize * 4);
     12692    010003194H        09807H    ldr      r0,[sp,#28]
     12694    010003196H        02118H    movs     r1,#24
     12696    010003198H        02401H    movs     r4,#1
     12698    01000319AH        007E4H    lsls     r4,r4,#31
     12700    01000319CH        02200H    movs     r2,#0
     12702    01000319EH        02300H    movs     r3,#0
     12704    0100031A0H        00040H    lsls     r0,r0,#1
     12706    0100031A2H        0415BH    adcs     r3,r3
     12708    0100031A4H        0428BH    cmp      r3,r1
     12710    0100031A6H        0D301H    bcc.n    2 -> 12716
     12712    0100031A8H        01912H    adds     r2,r2,r4
     12714    0100031AAH        01A5BH    subs     r3,r3,r1
     12716    0100031ACH        00864H    lsrs     r4,r4,#1
     12718    0100031AEH        0D1F7H    bne.n    -18 -> 12704
     12720    0100031B0H        04610H    mov      r0,r2
     12722    0100031B2H        09008H    str      r0,[sp,#32]
    i := 0;
     12724    0100031B4H        02000H    movs     r0,#0
     12726    0100031B6H        09003H    str      r0,[sp,#12]
    addr := 0;
     12728    0100031B8H        02000H    movs     r0,#0
     12730    0100031BAH        09006H    str      r0,[sp,#24]
    index := 0;
     12732    0100031BCH        02000H    movs     r0,#0
     12734    0100031BEH        09004H    str      r0,[sp,#16]
    modIdx := nItems - 1;
     12736    0100031C0H        09808H    ldr      r0,[sp,#32]
     12738    0100031C2H        03801H    subs     r0,#1
     12740    0100031C4H        0900EH    str      r0,[sp,#56]
    foundIdx := nItems - 1;
     12742    0100031C6H        09808H    ldr      r0,[sp,#32]
     12744    0100031C8H        03801H    subs     r0,#1
     12746    0100031CAH        0900FH    str      r0,[sp,#60]
    WHILE (i < nItems) DO
     12748    0100031CCH        09803H    ldr      r0,[sp,#12]
     12750    0100031CEH        09908H    ldr      r1,[sp,#32]
     12752    0100031D0H        04288H    cmp      r0,r1
     12754    0100031D2H        0DB01H    blt.n    2 -> 12760
     12756    0100031D4H        0E02CH    b        88 -> 12848
     12758    0100031D6H        046C0H    nop
      ResData.GetInt(r, index, recType);
     12760    0100031D8H        04668H    mov      r0,sp
     12762    0100031DAH        0492CH    ldr      r1,[pc,#176] -> 12940 ; Global 010002D6CH
     12764    0100031DCH        09A04H    ldr      r2,[sp,#16]
     12766    0100031DEH        0AB09H    add      r3,sp,#36
     12768    0100031E0H    0F7FFFDDEH    bl.w     ResData.GetInt
     12772    0100031E4H        0E000H    b        0 -> 12776
     12774    0100031E6H        00037H    ; LineNo: 55
      ResData.GetInt(r, index + 5, addr);
     12776    0100031E8H        04668H    mov      r0,sp
     12778    0100031EAH        04928H    ldr      r1,[pc,#160] -> 12940 ; Global 010002D6CH
     12780    0100031ECH        09A04H    ldr      r2,[sp,#16]
     12782    0100031EEH        03205H    adds     r2,#5
     12784    0100031F0H        0AB06H    add      r3,sp,#24
     12786    0100031F2H    0F7FFFDD5H    bl.w     ResData.GetInt
     12790    0100031F6H        0E000H    b        0 -> 12794
     12792    0100031F8H        00038H    ; LineNo: 56
      IF addr > target THEN
     12794    0100031FAH        09806H    ldr      r0,[sp,#24]
     12796    0100031FCH        09910H    ldr      r1,[sp,#64]
     12798    0100031FEH        04288H    cmp      r0,r1
     12800    010003200H        0DC01H    bgt.n    2 -> 12806
     12802    010003202H        0E007H    b        14 -> 12820
     12804    010003204H        046C0H    nop
        foundIdx := i - 1;
     12806    010003206H        09803H    ldr      r0,[sp,#12]
     12808    010003208H        03801H    subs     r0,#1
     12810    01000320AH        0900FH    str      r0,[sp,#60]
        i := nItems
      ELSIF recType = 0 THEN
     12812    01000320CH        09808H    ldr      r0,[sp,#32]
     12814    01000320EH        09003H    str      r0,[sp,#12]
     12816    010003210H        0E007H    b        14 -> 12834
     12818    010003212H        046C0H    nop
     12820    010003214H        09809H    ldr      r0,[sp,#36]
     12822    010003216H        02800H    cmp      r0,#0
     12824    010003218H        0D001H    beq.n    2 -> 12830
     12826    01000321AH        0E002H    b        4 -> 12834
     12828    01000321CH        046C0H    nop
        modIdx := i
      END;
     12830    01000321EH        09803H    ldr      r0,[sp,#12]
     12832    010003220H        0900EH    str      r0,[sp,#56]
      index := index + ItemSize;
     12834    010003222H        09804H    ldr      r0,[sp,#16]
     12836    010003224H        03006H    adds     r0,#6
     12838    010003226H        09004H    str      r0,[sp,#16]
      INC(i)
    END;
     12840    010003228H        09803H    ldr      r0,[sp,#12]
     12842    01000322AH        03001H    adds     r0,#1
     12844    01000322CH        09003H    str      r0,[sp,#12]
     12846    01000322EH        0E7CDH    b        -102 -> 12748
    count := ResData.GetIntArray(r, modIdx * ItemSize + 1, LEN(a), a);
     12848    010003230H        04668H    mov      r0,sp
     12850    010003232H        04916H    ldr      r1,[pc,#88] -> 12940 ; Global 010002D6CH
     12852    010003234H        09A0EH    ldr      r2,[sp,#56]
     12854    010003236H        02306H    movs     r3,#6
     12856    010003238H        0435AH    muls     r2,r3
     12858    01000323AH        03201H    adds     r2,#1
     12860    01000323CH        02304H    movs     r3,#4
     12862    01000323EH        0AC0AH    add      r4,sp,#40
     12864    010003240H        02504H    movs     r5,#4
     12866    010003242H    0F7FFFDE3H    bl.w     ResData.GetIntArray
     12870    010003246H        0E000H    b        0 -> 12874
     12872    010003248H        00042H    ; LineNo: 66
     12874    01000324AH        09005H    str      r0,[sp,#20]
    intArrayToChars(a, modName);
     12876    01000324CH        0A80AH    add      r0,sp,#40
     12878    01000324EH        02110H    movs     r1,#16
     12880    010003250H        09A11H    ldr      r2,[sp,#68]
     12882    010003252H        02310H    movs     r3,#16
     12884    010003254H    0F7FFFF6EH    bl.w     RuntimeErrorsOu.intArrayToChars
     12888    010003258H        0E000H    b        0 -> 12892
     12890    01000325AH        00043H    ; LineNo: 67
    count := ResData.GetIntArray(r, foundIdx * ItemSize + 1, LEN(a), a);
     12892    01000325CH        04668H    mov      r0,sp
     12894    01000325EH        0490BH    ldr      r1,[pc,#44] -> 12940 ; Global 010002D6CH
     12896    010003260H        09A0FH    ldr      r2,[sp,#60]
     12898    010003262H        02306H    movs     r3,#6
     12900    010003264H        0435AH    muls     r2,r3
     12902    010003266H        03201H    adds     r2,#1
     12904    010003268H        02304H    movs     r3,#4
     12906    01000326AH        0AC0AH    add      r4,sp,#40
     12908    01000326CH        02504H    movs     r5,#4
     12910    01000326EH    0F7FFFDCDH    bl.w     ResData.GetIntArray
     12914    010003272H        0E000H    b        0 -> 12918
     12916    010003274H        00044H    ; LineNo: 68
     12918    010003276H        09005H    str      r0,[sp,#20]
    intArrayToChars(a, procName)
     12920    010003278H        0A80AH    add      r0,sp,#40
     12922    01000327AH        02110H    movs     r1,#16
     12924    01000327CH        09A12H    ldr      r2,[sp,#72]
     12926    01000327EH        02310H    movs     r3,#16
  END GetName;
     12928    010003280H    0F7FFFF58H    bl.w     RuntimeErrorsOu.intArrayToChars
     12932    010003284H        0E000H    b        0 -> 12936
     12934    010003286H        00045H    ; LineNo: 69
     12936    010003288H        0B013H    add      sp,#76
     12938    01000328AH        0BD00H    pop      { pc }
     12940    01000328CH    010002D6CH    ; Global 010002D6CH

  PROCEDURE RuntimeErrorsOu.printStackTrace(W: TextIO.Writer; tr: RuntimeErrors.Trace);
    VAR
      i: INTEGER;
      moduleName, procName: Name;
  BEGIN
     12944    010003290H        0B507H    push     { r0, r1, r2, lr }
     12946    010003292H        0B089H    sub      sp,#36
    IF tr.count > 1 THEN
     12948    010003294H        0980AH    ldr      r0,[sp,#40]
     12950    010003296H        06C00H    ldr      r0,[r0,#64]
     12952    010003298H        02801H    cmp      r0,#1
     12954    01000329AH        0DC01H    bgt.n    2 -> 12960
     12956    01000329CH        0E0FCH    b        504 -> 13464
     12958    01000329EH        046C0H    nop
      Texts.WriteString(W, "trace:"); Texts.WriteLn(W);
     12960    0100032A0H        09809H    ldr      r0,[sp,#36]
     12962    0100032A2H        046C0H    nop
     12964    0100032A4H        0A100H    adr      r1,pc,#0 -> 12968
     12966    0100032A6H        0E003H    b        6 -> 12976
     12968    0100032A8H    063617274H    ; String: "trac"
     12972    0100032ACH        03A65H    ; String: "e:.."
     12976    0100032B0H        02207H    movs     r2,#7
     12978    0100032B2H    0F7FFFB19H    bl.w     Texts.WriteString
     12982    0100032B6H        0E000H    b        0 -> 12986
     12984    0100032B8H        00050H    ; LineNo: 80
     12986    0100032BAH        09809H    ldr      r0,[sp,#36]
     12988    0100032BCH    0F7FFFB40H    bl.w     Texts.WriteLn
     12992    0100032C0H        0E000H    b        0 -> 12996
     12994    0100032C2H        00050H    ; LineNo: 80
      i := 0;
     12996    0100032C4H        02000H    movs     r0,#0
     12998    0100032C6H        09000H    str      r0,[sp]
      GetName(tr.tp[i].address, moduleName, procName);
     13000    0100032C8H        09800H    ldr      r0,[sp]
     13002    0100032CAH        02808H    cmp      r0,#8
     13004    0100032CCH        0D301H    bcc.n    2 -> 13010
     13006    0100032CEH        0DF01H    svc      1
     13008    0100032D0H        00052H    ; LineNo: 82
     13010    0100032D2H        0990AH    ldr      r1,[sp,#40]
     13012    0100032D4H        000C0H    lsls     r0,r0,#3
     13014    0100032D6H        01808H    adds     r0,r1,r0
     13016    0100032D8H        06800H    ldr      r0,[r0]
     13018    0100032DAH        0A901H    add      r1,sp,#4
     13020    0100032DCH        0AA05H    add      r2,sp,#20
     13022    0100032DEH    0F7FFFF43H    bl.w     RuntimeErrorsOu.GetName
     13026    0100032E2H        0E000H    b        0 -> 13030
     13028    0100032E4H        00052H    ; LineNo: 82
      WHILE i < tr.count DO
     13030    0100032E6H        09800H    ldr      r0,[sp]
     13032    0100032E8H        0990AH    ldr      r1,[sp,#40]
     13034    0100032EAH        06C09H    ldr      r1,[r1,#64]
     13036    0100032ECH        04288H    cmp      r0,r1
     13038    0100032EEH        0DB01H    blt.n    2 -> 13044
     13040    0100032F0H        0E0A6H    b        332 -> 13376
     13042    0100032F2H        046C0H    nop
        Texts.WriteString(W, "  "); Texts.WriteString(W, moduleName); Texts.WriteString(W, "."); Texts.WriteString(W, procName);
     13044    0100032F4H        09809H    ldr      r0,[sp,#36]
     13046    0100032F6H        046C0H    nop
     13048    0100032F8H        0A100H    adr      r1,pc,#0 -> 13052
     13050    0100032FAH        0E001H    b        2 -> 13056
     13052    0100032FCH        02020H    ; String: "  .."
     13056    010003300H        02203H    movs     r2,#3
     13058    010003302H    0F7FFFAF1H    bl.w     Texts.WriteString
     13062    010003306H        0E000H    b        0 -> 13066
     13064    010003308H        00054H    ; LineNo: 84
     13066    01000330AH        09809H    ldr      r0,[sp,#36]
     13068    01000330CH        0A901H    add      r1,sp,#4
     13070    01000330EH        02210H    movs     r2,#16
     13072    010003310H    0F7FFFAEAH    bl.w     Texts.WriteString
     13076    010003314H        0E000H    b        0 -> 13080
     13078    010003316H        00054H    ; LineNo: 84
     13080    010003318H        09809H    ldr      r0,[sp,#36]
     13082    01000331AH        046C0H    nop
     13084    01000331CH        0A100H    adr      r1,pc,#0 -> 13088
     13086    01000331EH        0E001H    b        2 -> 13092
     13088    010003320H        0002EH    ; String: "...."
     13092    010003324H        02202H    movs     r2,#2
     13094    010003326H    0F7FFFADFH    bl.w     Texts.WriteString
     13098    01000332AH        0E000H    b        0 -> 13102
     13100    01000332CH        00054H    ; LineNo: 84
     13102    01000332EH        09809H    ldr      r0,[sp,#36]
     13104    010003330H        0A905H    add      r1,sp,#20
     13106    010003332H        02210H    movs     r2,#16
     13108    010003334H    0F7FFFAD8H    bl.w     Texts.WriteString
     13112    010003338H        0E000H    b        0 -> 13116
     13114    01000333AH        00054H    ; LineNo: 84
        Texts.WriteString(W, "  "); Texts.WriteHex(W, tr.tp[i].address, 0);
     13116    01000333CH        09809H    ldr      r0,[sp,#36]
     13118    01000333EH        046C0H    nop
     13120    010003340H        0A100H    adr      r1,pc,#0 -> 13124
     13122    010003342H        0E001H    b        2 -> 13128
     13124    010003344H        02020H    ; String: "  .."
     13128    010003348H        02203H    movs     r2,#3
     13130    01000334AH    0F7FFFACDH    bl.w     Texts.WriteString
     13134    01000334EH        0E000H    b        0 -> 13138
     13136    010003350H        00055H    ; LineNo: 85
     13138    010003352H        09809H    ldr      r0,[sp,#36]
     13140    010003354H        09900H    ldr      r1,[sp]
     13142    010003356H        02908H    cmp      r1,#8
     13144    010003358H        0D301H    bcc.n    2 -> 13150
     13146    01000335AH        0DF01H    svc      1
     13148    01000335CH        00055H    ; LineNo: 85
     13150    01000335EH        09A0AH    ldr      r2,[sp,#40]
     13152    010003360H        000C9H    lsls     r1,r1,#3
     13154    010003362H        01851H    adds     r1,r2,r1
     13156    010003364H        06809H    ldr      r1,[r1]
     13158    010003366H        02200H    movs     r2,#0
     13160    010003368H    0F7FFFB48H    bl.w     Texts.WriteHex
     13164    01000336CH        0E000H    b        0 -> 13168
     13166    01000336EH        00055H    ; LineNo: 85
        IF tr.tp[i].lineNo > 0 THEN
     13168    010003370H        09800H    ldr      r0,[sp]
     13170    010003372H        02808H    cmp      r0,#8
     13172    010003374H        0D301H    bcc.n    2 -> 13178
     13174    010003376H        0DF01H    svc      1
     13176    010003378H        00056H    ; LineNo: 86
     13178    01000337AH        0990AH    ldr      r1,[sp,#40]
     13180    01000337CH        000C0H    lsls     r0,r0,#3
     13182    01000337EH        01808H    adds     r0,r1,r0
     13184    010003380H        06840H    ldr      r0,[r0,#4]
     13186    010003382H        02800H    cmp      r0,#0
     13188    010003384H        0DC01H    bgt.n    2 -> 13194
     13190    010003386H        0E019H    b        50 -> 13244
     13192    010003388H        046C0H    nop
          Texts.WriteString(W, "  "); Texts.WriteInt(W, tr.tp[i].lineNo, 4);
     13194    01000338AH        09809H    ldr      r0,[sp,#36]
     13196    01000338CH        0A100H    adr      r1,pc,#0 -> 13200
     13198    01000338EH        0E001H    b        2 -> 13204
     13200    010003390H        02020H    ; String: "  .."
     13204    010003394H        02203H    movs     r2,#3
     13206    010003396H    0F7FFFAA7H    bl.w     Texts.WriteString
     13210    01000339AH        0E000H    b        0 -> 13214
     13212    01000339CH        00057H    ; LineNo: 87
     13214    01000339EH        09809H    ldr      r0,[sp,#36]
     13216    0100033A0H        09900H    ldr      r1,[sp]
     13218    0100033A2H        02908H    cmp      r1,#8
     13220    0100033A4H        0D301H    bcc.n    2 -> 13226
     13222    0100033A6H        0DF01H    svc      1
     13224    0100033A8H        00057H    ; LineNo: 87
     13226    0100033AAH        09A0AH    ldr      r2,[sp,#40]
     13228    0100033ACH        000C9H    lsls     r1,r1,#3
     13230    0100033AEH        01851H    adds     r1,r2,r1
     13232    0100033B0H        06849H    ldr      r1,[r1,#4]
     13234    0100033B2H        02204H    movs     r2,#4
     13236    0100033B4H    0F7FFFB0AH    bl.w     Texts.WriteInt
     13240    0100033B8H        0E000H    b        0 -> 13244
     13242    0100033BAH        00057H    ; LineNo: 87
        END;
        Texts.WriteLn(W);
     13244    0100033BCH        09809H    ldr      r0,[sp,#36]
     13246    0100033BEH    0F7FFFABFH    bl.w     Texts.WriteLn
     13250    0100033C2H        0E000H    b        0 -> 13254
     13252    0100033C4H        00059H    ; LineNo: 89
        INC(i);
     13254    0100033C6H        09800H    ldr      r0,[sp]
     13256    0100033C8H        03001H    adds     r0,#1
     13258    0100033CAH        09000H    str      r0,[sp]
        IF procName = ".init" THEN
     13260    0100033CCH        02000H    movs     r0,#0
     13262    0100033CEH        0A905H    add      r1,sp,#20
     13264    0100033D0H        0A200H    adr      r2,pc,#0 -> 13268
     13266    0100033D2H        0E003H    b        6 -> 13276
     13268    0100033D4H    0696E692EH    ; String: ".ini"
     13272    0100033D8H        00074H    ; String: "t..."
     13276    0100033DCH        05C0BH    ldrb     r3,[r1,r0]
     13278    0100033DEH        05C14H    ldrb     r4,[r2,r0]
     13280    0100033E0H        03001H    adds     r0,#1
     13282    0100033E2H        042A3H    cmp      r3,r4
     13284    0100033E4H        0D101H    bne.n    2 -> 13290
     13286    0100033E6H        02B00H    cmp      r3,#0
     13288    0100033E8H        0D1F8H    bne.n    -16 -> 13276
     13290    0100033EAH        0D001H    beq.n    2 -> 13296
     13292    0100033ECH        0E018H    b        48 -> 13344
     13294    0100033EEH        046C0H    nop
          moduleName := "start"; procName := "up"
     13296    0100033F0H        0A801H    add      r0,sp,#4
     13298    0100033F2H        046C0H    nop
     13300    0100033F4H        0A100H    adr      r1,pc,#0 -> 13304
     13302    0100033F6H        0E003H    b        6 -> 13312
     13304    0100033F8H    072617473H    ; String: "star"
     13308    0100033FCH        00074H    ; String: "t..."
     13312    010003400H        0680AH    ldr      r2,[r1]
     13314    010003402H        03104H    adds     r1,#4
     13316    010003404H        06002H    str      r2,[r0]
     13318    010003406H        03004H    adds     r0,#4
     13320    010003408H        0680AH    ldr      r2,[r1]
     13322    01000340AH        06002H    str      r2,[r0]
        ELSE
     13324    01000340CH        0A805H    add      r0,sp,#20
     13326    01000340EH        046C0H    nop
     13328    010003410H        0A100H    adr      r1,pc,#0 -> 13332
     13330    010003412H        0E001H    b        2 -> 13336
     13332    010003414H        07075H    ; String: "up.."
     13336    010003418H        0680AH    ldr      r2,[r1]
     13338    01000341AH        06002H    str      r2,[r0]
          GetName(tr.tp[i].address, moduleName, procName)
     13340    01000341CH        0E00FH    b        30 -> 13374
     13342    01000341EH        046C0H    nop
     13344    010003420H        09800H    ldr      r0,[sp]
     13346    010003422H        02808H    cmp      r0,#8
     13348    010003424H        0D301H    bcc.n    2 -> 13354
     13350    010003426H        0DF01H    svc      1
     13352    010003428H        0005EH    ; LineNo: 94
     13354    01000342AH        0990AH    ldr      r1,[sp,#40]
     13356    01000342CH        000C0H    lsls     r0,r0,#3
     13358    01000342EH        01808H    adds     r0,r1,r0
     13360    010003430H        06800H    ldr      r0,[r0]
     13362    010003432H        0A901H    add      r1,sp,#4
     13364    010003434H        0AA05H    add      r2,sp,#20
        END
     13366    010003436H    0F7FFFE97H    bl.w     RuntimeErrorsOu.GetName
     13370    01000343AH        0E000H    b        0 -> 13374
     13372    01000343CH        0005EH    ; LineNo: 94
      END;
     13374    01000343EH        0E752H    b        -348 -> 13030
      IF tr.tp[i].address = RuntimeErrors.MoreTracePoints THEN
     13376    010003440H        09800H    ldr      r0,[sp]
     13378    010003442H        02808H    cmp      r0,#8
     13380    010003444H        0D301H    bcc.n    2 -> 13386
     13382    010003446H        0DF01H    svc      1
     13384    010003448H        00061H    ; LineNo: 97
     13386    01000344AH        0990AH    ldr      r1,[sp,#40]
     13388    01000344CH        000C0H    lsls     r0,r0,#3
     13390    01000344EH        01808H    adds     r0,r1,r0
     13392    010003450H        06800H    ldr      r0,[r0]
     13394    010003452H        02101H    movs     r1,#1
     13396    010003454H        042C8H    cmn      r0,r1
     13398    010003456H        0D001H    beq.n    2 -> 13404
     13400    010003458H        0E01CH    b        56 -> 13460
     13402    01000345AH        046C0H    nop
        Texts.Write(W, " "); Texts.WriteString(W, "--- more ---"); Texts.WriteLn(W)
     13404    01000345CH        09809H    ldr      r0,[sp,#36]
     13406    01000345EH        02120H    movs     r1,#32
     13408    010003460H    0F7FFFA2AH    bl.w     Texts.Write
     13412    010003464H        0E000H    b        0 -> 13416
     13414    010003466H        00062H    ; LineNo: 98
     13416    010003468H        09809H    ldr      r0,[sp,#36]
     13418    01000346AH        046C0H    nop
     13420    01000346CH        0A100H    adr      r1,pc,#0 -> 13424
     13422    01000346EH        0E007H    b        14 -> 13440
     13424    010003470H    0202D2D2DH    ; String: "--- "
     13428    010003474H    065726F6DH    ; String: "more"
     13432    010003478H    02D2D2D20H    ; String: " ---"
     13436    01000347CH        00000H    ; String: "...."
     13440    010003480H        0220DH    movs     r2,#13
     13442    010003482H    0F7FFFA31H    bl.w     Texts.WriteString
     13446    010003486H        0E000H    b        0 -> 13450
     13448    010003488H        00062H    ; LineNo: 98
     13450    01000348AH        09809H    ldr      r0,[sp,#36]
      END
     13452    01000348CH    0F7FFFA58H    bl.w     Texts.WriteLn
     13456    010003490H        0E000H    b        0 -> 13460
     13458    010003492H        00062H    ; LineNo: 98
    ELSE
      Texts.WriteString(W, "no trace"); Texts.WriteLn(W)
     13460    010003494H        0E014H    b        40 -> 13504
     13462    010003496H        046C0H    nop
     13464    010003498H        09809H    ldr      r0,[sp,#36]
     13466    01000349AH        046C0H    nop
     13468    01000349CH        0A100H    adr      r1,pc,#0 -> 13472
     13470    01000349EH        0E005H    b        10 -> 13484
     13472    0100034A0H    074206F6EH    ; String: "no t"
     13476    0100034A4H    065636172H    ; String: "race"
     13480    0100034A8H        00000H    ; String: "...."
     13484    0100034ACH        02209H    movs     r2,#9
     13486    0100034AEH    0F7FFFA1BH    bl.w     Texts.WriteString
     13490    0100034B2H        0E000H    b        0 -> 13494
     13492    0100034B4H        00065H    ; LineNo: 101
     13494    0100034B6H        09809H    ldr      r0,[sp,#36]
    END
     13496    0100034B8H    0F7FFFA42H    bl.w     Texts.WriteLn
     13500    0100034BCH        0E000H    b        0 -> 13504
     13502    0100034BEH        00065H    ; LineNo: 101
  END printStackTrace;
     13504    0100034C0H        0B00CH    add      sp,#48
     13506    0100034C2H        0BD00H    pop      { pc }

  PROCEDURE RuntimeErrorsOu.regOut(W: TextIO.Writer; label: ARRAY OF CHAR; value: INTEGER);
  BEGIN
     13508    0100034C4H        0B50FH    push     { r0, r1, r2, r3, lr }
    Texts.Write(W, " "); Texts.WriteString(W, label);
     13510    0100034C6H        09800H    ldr      r0,[sp]
     13512    0100034C8H        02120H    movs     r1,#32
     13514    0100034CAH    0F7FFF9F5H    bl.w     Texts.Write
     13518    0100034CEH        0E000H    b        0 -> 13522
     13520    0100034D0H        0006CH    ; LineNo: 108
     13522    0100034D2H        09800H    ldr      r0,[sp]
     13524    0100034D4H        09901H    ldr      r1,[sp,#4]
     13526    0100034D6H        09A02H    ldr      r2,[sp,#8]
     13528    0100034D8H    0F7FFFA06H    bl.w     Texts.WriteString
     13532    0100034DCH        0E000H    b        0 -> 13536
     13534    0100034DEH        0006CH    ; LineNo: 108
    Texts.WriteHex(W, value, 10);  
     13536    0100034E0H        09800H    ldr      r0,[sp]
     13538    0100034E2H        09903H    ldr      r1,[sp,#12]
     13540    0100034E4H        0220AH    movs     r2,#10
     13542    0100034E6H    0F7FFFA89H    bl.w     Texts.WriteHex
     13546    0100034EAH        0E000H    b        0 -> 13550
     13548    0100034ECH        0006DH    ; LineNo: 109
    Texts.WriteLn(W)
     13550    0100034EEH        09800H    ldr      r0,[sp]
  END regOut;
     13552    0100034F0H    0F7FFFA26H    bl.w     Texts.WriteLn
     13556    0100034F4H        0E000H    b        0 -> 13560
     13558    0100034F6H        0006EH    ; LineNo: 110
     13560    0100034F8H        0B004H    add      sp,#16
     13562    0100034FAH        0BD00H    pop      { pc }

  PROCEDURE RuntimeErrorsOu.printStackedRegs(W: TextIO.Writer; stackedRegs: RuntimeErrors.StackedRegisters);
  BEGIN
     13564    0100034FCH        0B507H    push     { r0, r1, r2, lr }
    Texts.WriteString(W, "stacked registers:"); Texts.WriteLn(W);
     13566    0100034FEH        09800H    ldr      r0,[sp]
     13568    010003500H        0A100H    adr      r1,pc,#0 -> 13572
     13570    010003502H        0E009H    b        18 -> 13592
     13572    010003504H    063617473H    ; String: "stac"
     13576    010003508H    02064656BH    ; String: "ked "
     13580    01000350CH    069676572H    ; String: "regi"
     13584    010003510H    072657473H    ; String: "ster"
     13588    010003514H        03A73H    ; String: "s:.."
     13592    010003518H        02213H    movs     r2,#19
     13594    01000351AH    0F7FFF9E5H    bl.w     Texts.WriteString
     13598    01000351EH        0E000H    b        0 -> 13602
     13600    010003520H        00074H    ; LineNo: 116
     13602    010003522H        09800H    ldr      r0,[sp]
     13604    010003524H    0F7FFFA0CH    bl.w     Texts.WriteLn
     13608    010003528H        0E000H    b        0 -> 13612
     13610    01000352AH        00074H    ; LineNo: 116
    regOut(W, "  r0:", stackedRegs.r0);
     13612    01000352CH        09800H    ldr      r0,[sp]
     13614    01000352EH        046C0H    nop
     13616    010003530H        0A100H    adr      r1,pc,#0 -> 13620
     13618    010003532H        0E003H    b        6 -> 13628
     13620    010003534H    030722020H    ; String: "  r0"
     13624    010003538H        0003AH    ; String: ":..."
     13628    01000353CH        02206H    movs     r2,#6
     13630    01000353EH        09B01H    ldr      r3,[sp,#4]
     13632    010003540H        0681BH    ldr      r3,[r3]
     13634    010003542H    0F7FFFFBFH    bl.w     RuntimeErrorsOu.regOut
     13638    010003546H        0E000H    b        0 -> 13642
     13640    010003548H        00075H    ; LineNo: 117
    regOut(W, "  r1:", stackedRegs.r1);
     13642    01000354AH        09800H    ldr      r0,[sp]
     13644    01000354CH        0A100H    adr      r1,pc,#0 -> 13648
     13646    01000354EH        0E003H    b        6 -> 13656
     13648    010003550H    031722020H    ; String: "  r1"
     13652    010003554H        0003AH    ; String: ":..."
     13656    010003558H        02206H    movs     r2,#6
     13658    01000355AH        09B01H    ldr      r3,[sp,#4]
     13660    01000355CH        0685BH    ldr      r3,[r3,#4]
     13662    01000355EH    0F7FFFFB1H    bl.w     RuntimeErrorsOu.regOut
     13666    010003562H        0E000H    b        0 -> 13670
     13668    010003564H        00076H    ; LineNo: 118
    regOut(W, "  r2:", stackedRegs.r2);
     13670    010003566H        09800H    ldr      r0,[sp]
     13672    010003568H        0A100H    adr      r1,pc,#0 -> 13676
     13674    01000356AH        0E003H    b        6 -> 13684
     13676    01000356CH    032722020H    ; String: "  r2"
     13680    010003570H        0003AH    ; String: ":..."
     13684    010003574H        02206H    movs     r2,#6
     13686    010003576H        09B01H    ldr      r3,[sp,#4]
     13688    010003578H        0689BH    ldr      r3,[r3,#8]
     13690    01000357AH    0F7FFFFA3H    bl.w     RuntimeErrorsOu.regOut
     13694    01000357EH        0E000H    b        0 -> 13698
     13696    010003580H        00077H    ; LineNo: 119
    regOut(W, "  r3:", stackedRegs.r3);
     13698    010003582H        09800H    ldr      r0,[sp]
     13700    010003584H        0A100H    adr      r1,pc,#0 -> 13704
     13702    010003586H        0E003H    b        6 -> 13712
     13704    010003588H    033722020H    ; String: "  r3"
     13708    01000358CH        0003AH    ; String: ":..."
     13712    010003590H        02206H    movs     r2,#6
     13714    010003592H        09B01H    ldr      r3,[sp,#4]
     13716    010003594H        068DBH    ldr      r3,[r3,#12]
     13718    010003596H    0F7FFFF95H    bl.w     RuntimeErrorsOu.regOut
     13722    01000359AH        0E000H    b        0 -> 13726
     13724    01000359CH        00078H    ; LineNo: 120
    regOut(W, " r12:", stackedRegs.r12);
     13726    01000359EH        09800H    ldr      r0,[sp]
     13728    0100035A0H        0A100H    adr      r1,pc,#0 -> 13732
     13730    0100035A2H        0E003H    b        6 -> 13740
     13732    0100035A4H    032317220H    ; String: " r12"
     13736    0100035A8H        0003AH    ; String: ":..."
     13740    0100035ACH        02206H    movs     r2,#6
     13742    0100035AEH        09B01H    ldr      r3,[sp,#4]
     13744    0100035B0H        0691BH    ldr      r3,[r3,#16]
     13746    0100035B2H    0F7FFFF87H    bl.w     RuntimeErrorsOu.regOut
     13750    0100035B6H        0E000H    b        0 -> 13754
     13752    0100035B8H        00079H    ; LineNo: 121
    regOut(W, "  lr:", stackedRegs.lr);
     13754    0100035BAH        09800H    ldr      r0,[sp]
     13756    0100035BCH        0A100H    adr      r1,pc,#0 -> 13760
     13758    0100035BEH        0E003H    b        6 -> 13768
     13760    0100035C0H    0726C2020H    ; String: "  lr"
     13764    0100035C4H        0003AH    ; String: ":..."
     13768    0100035C8H        02206H    movs     r2,#6
     13770    0100035CAH        09B01H    ldr      r3,[sp,#4]
     13772    0100035CCH        0695BH    ldr      r3,[r3,#20]
     13774    0100035CEH    0F7FFFF79H    bl.w     RuntimeErrorsOu.regOut
     13778    0100035D2H        0E000H    b        0 -> 13782
     13780    0100035D4H        0007AH    ; LineNo: 122
    regOut(W, "  pc:", stackedRegs.pc);
     13782    0100035D6H        09800H    ldr      r0,[sp]
     13784    0100035D8H        0A100H    adr      r1,pc,#0 -> 13788
     13786    0100035DAH        0E003H    b        6 -> 13796
     13788    0100035DCH    063702020H    ; String: "  pc"
     13792    0100035E0H        0003AH    ; String: ":..."
     13796    0100035E4H        02206H    movs     r2,#6
     13798    0100035E6H        09B01H    ldr      r3,[sp,#4]
     13800    0100035E8H        0699BH    ldr      r3,[r3,#24]
     13802    0100035EAH    0F7FFFF6BH    bl.w     RuntimeErrorsOu.regOut
     13806    0100035EEH        0E000H    b        0 -> 13810
     13808    0100035F0H        0007BH    ; LineNo: 123
    regOut(W, "xpsr:", stackedRegs.xpsr);
     13810    0100035F2H        09800H    ldr      r0,[sp]
     13812    0100035F4H        0A100H    adr      r1,pc,#0 -> 13816
     13814    0100035F6H        0E003H    b        6 -> 13824
     13816    0100035F8H    072737078H    ; String: "xpsr"
     13820    0100035FCH        0003AH    ; String: ":..."
     13824    010003600H        02206H    movs     r2,#6
     13826    010003602H        09B01H    ldr      r3,[sp,#4]
     13828    010003604H        069DBH    ldr      r3,[r3,#28]
     13830    010003606H    0F7FFFF5DH    bl.w     RuntimeErrorsOu.regOut
     13834    01000360AH        0E000H    b        0 -> 13838
     13836    01000360CH        0007CH    ; LineNo: 124
    regOut(W, "  sp:", stackedRegs.sp)
     13838    01000360EH        09800H    ldr      r0,[sp]
     13840    010003610H        0A100H    adr      r1,pc,#0 -> 13844
     13842    010003612H        0E003H    b        6 -> 13852
     13844    010003614H    070732020H    ; String: "  sp"
     13848    010003618H        0003AH    ; String: ":..."
     13852    01000361CH        02206H    movs     r2,#6
     13854    01000361EH        09B01H    ldr      r3,[sp,#4]
     13856    010003620H        06A1BH    ldr      r3,[r3,#32]
  END printStackedRegs;
     13858    010003622H    0F7FFFF4FH    bl.w     RuntimeErrorsOu.regOut
     13862    010003626H        0E000H    b        0 -> 13866
     13864    010003628H        0007DH    ; LineNo: 125
     13866    01000362AH        0B003H    add      sp,#12
     13868    01000362CH        0BD00H    pop      { pc }
     13870    01000362EH        046C0H    nop

  PROCEDURE RuntimeErrorsOu.printCurrentRegs(W: TextIO.Writer; currentRegs: RuntimeErrors.CurrentRegisters);
  BEGIN
     13872    010003630H        0B507H    push     { r0, r1, r2, lr }
    Texts.WriteString(W, "current registers:"); Texts.WriteLn(W);
     13874    010003632H        09800H    ldr      r0,[sp]
     13876    010003634H        0A100H    adr      r1,pc,#0 -> 13880
     13878    010003636H        0E009H    b        18 -> 13900
     13880    010003638H    072727563H    ; String: "curr"
     13884    01000363CH    020746E65H    ; String: "ent "
     13888    010003640H    069676572H    ; String: "regi"
     13892    010003644H    072657473H    ; String: "ster"
     13896    010003648H        03A73H    ; String: "s:.."
     13900    01000364CH        02213H    movs     r2,#19
     13902    01000364EH    0F7FFF94BH    bl.w     Texts.WriteString
     13906    010003652H        0E000H    b        0 -> 13910
     13908    010003654H        00083H    ; LineNo: 131
     13910    010003656H        09800H    ldr      r0,[sp]
     13912    010003658H    0F7FFF972H    bl.w     Texts.WriteLn
     13916    01000365CH        0E000H    b        0 -> 13920
     13918    01000365EH        00083H    ; LineNo: 131
    regOut(W, "  sp:", currentRegs.sp);
     13920    010003660H        09800H    ldr      r0,[sp]
     13922    010003662H        046C0H    nop
     13924    010003664H        0A100H    adr      r1,pc,#0 -> 13928
     13926    010003666H        0E003H    b        6 -> 13936
     13928    010003668H    070732020H    ; String: "  sp"
     13932    01000366CH        0003AH    ; String: ":..."
     13936    010003670H        02206H    movs     r2,#6
     13938    010003672H        09B01H    ldr      r3,[sp,#4]
     13940    010003674H        0681BH    ldr      r3,[r3]
     13942    010003676H    0F7FFFF25H    bl.w     RuntimeErrorsOu.regOut
     13946    01000367AH        0E000H    b        0 -> 13950
     13948    01000367CH        00084H    ; LineNo: 132
    regOut(W, "  lr:", currentRegs.lr);
     13950    01000367EH        09800H    ldr      r0,[sp]
     13952    010003680H        0A100H    adr      r1,pc,#0 -> 13956
     13954    010003682H        0E003H    b        6 -> 13964
     13956    010003684H    0726C2020H    ; String: "  lr"
     13960    010003688H        0003AH    ; String: ":..."
     13964    01000368CH        02206H    movs     r2,#6
     13966    01000368EH        09B01H    ldr      r3,[sp,#4]
     13968    010003690H        0685BH    ldr      r3,[r3,#4]
     13970    010003692H    0F7FFFF17H    bl.w     RuntimeErrorsOu.regOut
     13974    010003696H        0E000H    b        0 -> 13978
     13976    010003698H        00085H    ; LineNo: 133
    regOut(W, "  pc:", currentRegs.pc);
     13978    01000369AH        09800H    ldr      r0,[sp]
     13980    01000369CH        0A100H    adr      r1,pc,#0 -> 13984
     13982    01000369EH        0E003H    b        6 -> 13992
     13984    0100036A0H    063702020H    ; String: "  pc"
     13988    0100036A4H        0003AH    ; String: ":..."
     13992    0100036A8H        02206H    movs     r2,#6
     13994    0100036AAH        09B01H    ldr      r3,[sp,#4]
     13996    0100036ACH        0689BH    ldr      r3,[r3,#8]
     13998    0100036AEH    0F7FFFF09H    bl.w     RuntimeErrorsOu.regOut
     14002    0100036B2H        0E000H    b        0 -> 14006
     14004    0100036B4H        00086H    ; LineNo: 134
    regOut(W, "xpsr:", currentRegs.xpsr)
     14006    0100036B6H        09800H    ldr      r0,[sp]
     14008    0100036B8H        0A100H    adr      r1,pc,#0 -> 14012
     14010    0100036BAH        0E003H    b        6 -> 14020
     14012    0100036BCH    072737078H    ; String: "xpsr"
     14016    0100036C0H        0003AH    ; String: ":..."
     14020    0100036C4H        02206H    movs     r2,#6
     14022    0100036C6H        09B01H    ldr      r3,[sp,#4]
     14024    0100036C8H        068DBH    ldr      r3,[r3,#12]
  END printCurrentRegs;
     14026    0100036CAH    0F7FFFEFBH    bl.w     RuntimeErrorsOu.regOut
     14030    0100036CEH        0E000H    b        0 -> 14034
     14032    0100036D0H        00087H    ; LineNo: 135
     14034    0100036D2H        0B003H    add      sp,#12
     14036    0100036D4H        0BD00H    pop      { pc }
     14038    0100036D6H        046C0H    nop

  PROCEDURE RuntimeErrorsOu.PrintException*(W: TextIO.Writer; er: RuntimeErrors.ExceptionRec);
    VAR
      code, core, address, lineNo: INTEGER;
      moduleName, procName: Name;
      msg: Errors.String;
  BEGIN
     14040    0100036D8H        0B507H    push     { r0, r1, r2, lr }
     14042    0100036DAH        0B09CH    sub      sp,#112
    CASE er OF
      RuntimeErrors.FaultRec:
     14044    0100036DCH        0A81DH    add      r0,sp,#116
     14046    0100036DEH        06840H    ldr      r0,[r0,#4]
     14048    0100036E0H        04971H    ldr      r1,[pc,#452] -> 14504 ; Global 010001BF8H
     14050    0100036E2H        04288H    cmp      r0,r1
     14052    0100036E4H        0D001H    beq.n    2 -> 14058
     14054    0100036E6H        0E00EH    b        28 -> 14086
     14056    0100036E8H        046C0H    nop
        code := -er.code;
     14058    0100036EAH        0981DH    ldr      r0,[sp,#116]
     14060    0100036ECH        06800H    ldr      r0,[r0]
     14062    0100036EEH        04240H    rsbs     r0,r0,#0
     14064    0100036F0H        09000H    str      r0,[sp]
        core := er.core;
     14066    0100036F2H        0981DH    ldr      r0,[sp,#116]
     14068    0100036F4H        06840H    ldr      r0,[r0,#4]
     14070    0100036F6H        09001H    str      r0,[sp,#4]
        address := er.address;
     14072    0100036F8H        0981DH    ldr      r0,[sp,#116]
     14074    0100036FAH        06880H    ldr      r0,[r0,#8]
     14076    0100036FCH        09002H    str      r0,[sp,#8]
        lineNo := NoValue;
     14078    0100036FEH        04869H    ldr      r0,[pc,#420] -> 14500 ; Const 0FFFFFFFFH -1
     14080    010003700H        09003H    str      r0,[sp,#12]
    | RuntimeErrors.ErrorRec:
     14082    010003702H        0E013H    b        38 -> 14124
     14084    010003704H        046C0H    nop
     14086    010003706H        0A81DH    add      r0,sp,#116
     14088    010003708H        06840H    ldr      r0,[r0,#4]
     14090    01000370AH        04968H    ldr      r1,[pc,#416] -> 14508 ; Global 010001C0CH
     14092    01000370CH        04288H    cmp      r0,r1
     14094    01000370EH        0D001H    beq.n    2 -> 14100
     14096    010003710H        0E00CH    b        24 -> 14124
     14098    010003712H        046C0H    nop
        code := er.code;
     14100    010003714H        0981DH    ldr      r0,[sp,#116]
     14102    010003716H        06800H    ldr      r0,[r0]
     14104    010003718H        09000H    str      r0,[sp]
        core := er.core;
     14106    01000371AH        0981DH    ldr      r0,[sp,#116]
     14108    01000371CH        06840H    ldr      r0,[r0,#4]
     14110    01000371EH        09001H    str      r0,[sp,#4]
        address := er.trace.tp[0].address;
     14112    010003720H        0981DH    ldr      r0,[sp,#116]
     14114    010003722H        06880H    ldr      r0,[r0,#8]
     14116    010003724H        09002H    str      r0,[sp,#8]
        lineNo := er.trace.tp[0].lineNo
    END;
     14118    010003726H        0981DH    ldr      r0,[sp,#116]
     14120    010003728H        068C0H    ldr      r0,[r0,#12]
     14122    01000372AH        09003H    str      r0,[sp,#12]
    Errors.GetExceptionType(code, msg);
     14124    01000372CH        09800H    ldr      r0,[sp]
     14126    01000372EH        0A90CH    add      r1,sp,#48
     14128    010003730H    0F7FDFB4AH    bl.w     Errors.GetExceptionType
     14132    010003734H        0E000H    b        0 -> 14136
     14134    010003736H        0009DH    ; LineNo: 157
    Texts.WriteString(W, "exception: "); Texts.WriteString(W, msg);
     14136    010003738H        0981CH    ldr      r0,[sp,#112]
     14138    01000373AH        046C0H    nop
     14140    01000373CH        0A100H    adr      r1,pc,#0 -> 14144
     14142    01000373EH        0E005H    b        10 -> 14156
     14144    010003740H    065637865H    ; String: "exce"
     14148    010003744H    06F697470H    ; String: "ptio"
     14152    010003748H      0203A6EH    ; String: "n: ."
     14156    01000374CH        0220CH    movs     r2,#12
     14158    01000374EH    0F7FFF8CBH    bl.w     Texts.WriteString
     14162    010003752H        0E000H    b        0 -> 14166
     14164    010003754H        0009EH    ; LineNo: 158
     14166    010003756H        0981CH    ldr      r0,[sp,#112]
     14168    010003758H        0A90CH    add      r1,sp,#48
     14170    01000375AH        02240H    movs     r2,#64
     14172    01000375CH    0F7FFF8C4H    bl.w     Texts.WriteString
     14176    010003760H        0E000H    b        0 -> 14180
     14178    010003762H        0009EH    ; LineNo: 158
    Errors.Msg(code, msg);
     14180    010003764H        09800H    ldr      r0,[sp]
     14182    010003766H        0A90CH    add      r1,sp,#48
     14184    010003768H    0F7FDFB18H    bl.w     Errors.Msg
     14188    01000376CH        0E000H    b        0 -> 14192
     14190    01000376EH        0009FH    ; LineNo: 159
    Texts.Write(W, " "); Texts.WriteInt(W, code, 0); Texts.WriteString(W, " core: ");
     14192    010003770H        0981CH    ldr      r0,[sp,#112]
     14194    010003772H        02120H    movs     r1,#32
     14196    010003774H    0F7FFF8A0H    bl.w     Texts.Write
     14200    010003778H        0E000H    b        0 -> 14204
     14202    01000377AH        000A0H    ; LineNo: 160
     14204    01000377CH        0981CH    ldr      r0,[sp,#112]
     14206    01000377EH        09900H    ldr      r1,[sp]
     14208    010003780H        02200H    movs     r2,#0
     14210    010003782H    0F7FFF923H    bl.w     Texts.WriteInt
     14214    010003786H        0E000H    b        0 -> 14218
     14216    010003788H        000A0H    ; LineNo: 160
     14218    01000378AH        0981CH    ldr      r0,[sp,#112]
     14220    01000378CH        0A100H    adr      r1,pc,#0 -> 14224
     14222    01000378EH        0E003H    b        6 -> 14232
     14224    010003790H    0726F6320H    ; String: " cor"
     14228    010003794H      0203A65H    ; String: "e: ."
     14232    010003798H        02208H    movs     r2,#8
     14234    01000379AH    0F7FFF8A5H    bl.w     Texts.WriteString
     14238    01000379EH        0E000H    b        0 -> 14242
     14240    0100037A0H        000A0H    ; LineNo: 160
    Texts.WriteInt(W, core, 0); Texts.WriteLn(W);
     14242    0100037A2H        0981CH    ldr      r0,[sp,#112]
     14244    0100037A4H        09901H    ldr      r1,[sp,#4]
     14246    0100037A6H        02200H    movs     r2,#0
     14248    0100037A8H    0F7FFF910H    bl.w     Texts.WriteInt
     14252    0100037ACH        0E000H    b        0 -> 14256
     14254    0100037AEH        000A1H    ; LineNo: 161
     14256    0100037B0H        0981CH    ldr      r0,[sp,#112]
     14258    0100037B2H    0F7FFF8C5H    bl.w     Texts.WriteLn
     14262    0100037B6H        0E000H    b        0 -> 14266
     14264    0100037B8H        000A1H    ; LineNo: 161
    Texts.WriteString(W, msg); Texts.WriteLn(W);
     14266    0100037BAH        0981CH    ldr      r0,[sp,#112]
     14268    0100037BCH        0A90CH    add      r1,sp,#48
     14270    0100037BEH        02240H    movs     r2,#64
     14272    0100037C0H    0F7FFF892H    bl.w     Texts.WriteString
     14276    0100037C4H        0E000H    b        0 -> 14280
     14278    0100037C6H        000A2H    ; LineNo: 162
     14280    0100037C8H        0981CH    ldr      r0,[sp,#112]
     14282    0100037CAH    0F7FFF8B9H    bl.w     Texts.WriteLn
     14286    0100037CEH        0E000H    b        0 -> 14290
     14288    0100037D0H        000A2H    ; LineNo: 162
    GetName(address, moduleName, procName);
     14290    0100037D2H        09802H    ldr      r0,[sp,#8]
     14292    0100037D4H        0A904H    add      r1,sp,#16
     14294    0100037D6H        0AA08H    add      r2,sp,#32
     14296    0100037D8H    0F7FFFCC6H    bl.w     RuntimeErrorsOu.GetName
     14300    0100037DCH        0E000H    b        0 -> 14304
     14302    0100037DEH        000A3H    ; LineNo: 163
    Texts.WriteString(W, moduleName); Texts.Write(W, "."); Texts.WriteString(W, procName);
     14304    0100037E0H        0981CH    ldr      r0,[sp,#112]
     14306    0100037E2H        0A904H    add      r1,sp,#16
     14308    0100037E4H        02210H    movs     r2,#16
     14310    0100037E6H    0F7FFF87FH    bl.w     Texts.WriteString
     14314    0100037EAH        0E000H    b        0 -> 14318
     14316    0100037ECH        000A4H    ; LineNo: 164
     14318    0100037EEH        0981CH    ldr      r0,[sp,#112]
     14320    0100037F0H        0212EH    movs     r1,#46
     14322    0100037F2H    0F7FFF861H    bl.w     Texts.Write
     14326    0100037F6H        0E000H    b        0 -> 14330
     14328    0100037F8H        000A4H    ; LineNo: 164
     14330    0100037FAH        0981CH    ldr      r0,[sp,#112]
     14332    0100037FCH        0A908H    add      r1,sp,#32
     14334    0100037FEH        02210H    movs     r2,#16
     14336    010003800H    0F7FFF872H    bl.w     Texts.WriteString
     14340    010003804H        0E000H    b        0 -> 14344
     14342    010003806H        000A4H    ; LineNo: 164
    Texts.WriteString(W, "  a: "); Texts.WriteHex(W, address, 0);
     14344    010003808H        0981CH    ldr      r0,[sp,#112]
     14346    01000380AH        046C0H    nop
     14348    01000380CH        0A100H    adr      r1,pc,#0 -> 14352
     14350    01000380EH        0E003H    b        6 -> 14360
     14352    010003810H    03A612020H    ; String: "  a:"
     14356    010003814H        00020H    ; String: " ..."
     14360    010003818H        02206H    movs     r2,#6
     14362    01000381AH    0F7FFF865H    bl.w     Texts.WriteString
     14366    01000381EH        0E000H    b        0 -> 14370
     14368    010003820H        000A5H    ; LineNo: 165
     14370    010003822H        0981CH    ldr      r0,[sp,#112]
     14372    010003824H        09902H    ldr      r1,[sp,#8]
     14374    010003826H        02200H    movs     r2,#0
     14376    010003828H    0F7FFF8E8H    bl.w     Texts.WriteHex
     14380    01000382CH        0E000H    b        0 -> 14384
     14382    01000382EH        000A5H    ; LineNo: 165
    IF lineNo # NoValue THEN
     14384    010003830H        09803H    ldr      r0,[sp,#12]
     14386    010003832H        02101H    movs     r1,#1
     14388    010003834H        042C8H    cmn      r0,r1
     14390    010003836H        0D101H    bne.n    2 -> 14396
     14392    010003838H        0E014H    b        40 -> 14436
     14394    01000383AH        046C0H    nop
      Texts.WriteString(W, "  ln: "); Texts.WriteInt(W, lineNo, 0)
     14396    01000383CH        0981CH    ldr      r0,[sp,#112]
     14398    01000383EH        046C0H    nop
     14400    010003840H        0A100H    adr      r1,pc,#0 -> 14404
     14402    010003842H        0E003H    b        6 -> 14412
     14404    010003844H    06E6C2020H    ; String: "  ln"
     14408    010003848H        0203AH    ; String: ": .."
     14412    01000384CH        02207H    movs     r2,#7
     14414    01000384EH    0F7FFF84BH    bl.w     Texts.WriteString
     14418    010003852H        0E000H    b        0 -> 14422
     14420    010003854H        000A7H    ; LineNo: 167
     14422    010003856H        0981CH    ldr      r0,[sp,#112]
     14424    010003858H        09903H    ldr      r1,[sp,#12]
     14426    01000385AH        02200H    movs     r2,#0
    END;
     14428    01000385CH    0F7FFF8B6H    bl.w     Texts.WriteInt
     14432    010003860H        0E000H    b        0 -> 14436
     14434    010003862H        000A7H    ; LineNo: 167
    Texts.WriteLn(W);
     14436    010003864H        0981CH    ldr      r0,[sp,#112]
     14438    010003866H    0F7FFF86BH    bl.w     Texts.WriteLn
     14442    01000386AH        0E000H    b        0 -> 14446
     14444    01000386CH        000A9H    ; LineNo: 169
    CASE er OF
      RuntimeErrors.ErrorRec:
     14446    01000386EH        0A81DH    add      r0,sp,#116
     14448    010003870H        06840H    ldr      r0,[r0,#4]
     14450    010003872H        0490EH    ldr      r1,[pc,#56] -> 14508 ; Global 010001C0CH
     14452    010003874H        04288H    cmp      r0,r1
     14454    010003876H        0D001H    beq.n    2 -> 14460
     14456    010003878H        0E025H    b        74 -> 14534
     14458    01000387AH        046C0H    nop
        printStackTrace(W, er.trace);
     14460    01000387CH        0981CH    ldr      r0,[sp,#112]
     14462    01000387EH        0991DH    ldr      r1,[sp,#116]
     14464    010003880H        03108H    adds     r1,#8
     14466    010003882H        0AA1EH    add      r2,sp,#120
     14468    010003884H        06812H    ldr      r2,[r2]
     14470    010003886H    0F7FFFD03H    bl.w     RuntimeErrorsOu.printStackTrace
     14474    01000388AH        0E000H    b        0 -> 14478
     14476    01000388CH        000ACH    ; LineNo: 172
        printStackedRegs(W, er.stackedRegs);
     14478    01000388EH        0981CH    ldr      r0,[sp,#112]
     14480    010003890H        0991DH    ldr      r1,[sp,#116]
     14482    010003892H        0314CH    adds     r1,#76
     14484    010003894H        0AA1EH    add      r2,sp,#120
     14486    010003896H        06812H    ldr      r2,[r2]
     14488    010003898H    0F7FFFE30H    bl.w     RuntimeErrorsOu.printStackedRegs
     14492    01000389CH        0E000H    b        0 -> 14496
     14494    01000389EH        000ADH    ; LineNo: 173
     14496    0100038A0H    0F000F806H    bl.w     RuntimeErrorsOu.PrintException + 472
     14500    0100038A4H    0FFFFFFFFH    ; Const 0FFFFFFFFH -1
     14504    0100038A8H    010001BF8H    ; Global 010001BF8H
     14508    0100038ACH    010001C0CH    ; Global 010001C0CH
        printCurrentRegs(W, er.currentRegs)
     14512    0100038B0H        0981CH    ldr      r0,[sp,#112]
     14514    0100038B2H        0991DH    ldr      r1,[sp,#116]
     14516    0100038B4H        03170H    adds     r1,#112
     14518    0100038B6H        0AA1EH    add      r2,sp,#120
     14520    0100038B8H        06812H    ldr      r2,[r2]
    | RuntimeErrors.FaultRec:
     14522    0100038BAH    0F7FFFEB9H    bl.w     RuntimeErrorsOu.printCurrentRegs
     14526    0100038BEH        0E000H    b        0 -> 14530
     14528    0100038C0H        000AEH    ; LineNo: 174
     14530    0100038C2H        0E019H    b        50 -> 14584
     14532    0100038C4H        046C0H    nop
     14534    0100038C6H        0A81DH    add      r0,sp,#116
     14536    0100038C8H        06840H    ldr      r0,[r0,#4]
     14538    0100038CAH        0490CH    ldr      r1,[pc,#48] -> 14588 ; Global 010001BF8H
     14540    0100038CCH        04288H    cmp      r0,r1
     14542    0100038CEH        0D001H    beq.n    2 -> 14548
     14544    0100038D0H        0E012H    b        36 -> 14584
     14546    0100038D2H        046C0H    nop
        printStackedRegs(W, er.stackedRegs);
     14548    0100038D4H        0981CH    ldr      r0,[sp,#112]
     14550    0100038D6H        0991DH    ldr      r1,[sp,#116]
     14552    0100038D8H        0310CH    adds     r1,#12
     14554    0100038DAH        0AA1EH    add      r2,sp,#120
     14556    0100038DCH        06812H    ldr      r2,[r2]
     14558    0100038DEH    0F7FFFE0DH    bl.w     RuntimeErrorsOu.printStackedRegs
     14562    0100038E2H        0E000H    b        0 -> 14566
     14564    0100038E4H        000B0H    ; LineNo: 176
        printCurrentRegs(W, er.currentRegs)
     14566    0100038E6H        0981CH    ldr      r0,[sp,#112]
     14568    0100038E8H        0991DH    ldr      r1,[sp,#116]
     14570    0100038EAH        03130H    adds     r1,#48
     14572    0100038ECH        0AA1EH    add      r2,sp,#120
     14574    0100038EEH        06812H    ldr      r2,[r2]
    END
     14576    0100038F0H    0F7FFFE9EH    bl.w     RuntimeErrorsOu.printCurrentRegs
     14580    0100038F4H        0E000H    b        0 -> 14584
     14582    0100038F6H        000B1H    ; LineNo: 177
  END PrintException;
     14584    0100038F8H        0B01FH    add      sp,#124
     14586    0100038FAH        0BD00H    pop      { pc }
     14588    0100038FCH    010001BF8H    ; Global 010001BF8H

  PROCEDURE RuntimeErrorsOu.HandleException*(cpuId: INTEGER;  er: RuntimeErrors.ExceptionRec);
  BEGIN
     14592    010003900H        0B507H    push     { r0, r1, r2, lr }
    ASSERT(cpuId < NumCores, Errors.PreCond);
     14594    010003902H        09800H    ldr      r0,[sp]
     14596    010003904H        02802H    cmp      r0,#2
     14598    010003906H        0DB01H    blt.n    2 -> 14604
     14600    010003908H        0DF65H    svc      101
     14602    01000390AH        000BAH    ; LineNo: 186
    PrintException(W[cpuId], er)
     14604    01000390CH        09800H    ldr      r0,[sp]
     14606    01000390EH        02802H    cmp      r0,#2
     14608    010003910H        0D301H    bcc.n    2 -> 14614
     14610    010003912H        0DF01H    svc      1
     14612    010003914H        000BBH    ; LineNo: 187
     14614    010003916H        04906H    ldr      r1,[pc,#24] -> 14640 ; Global 02002FCC4H
     14616    010003918H        00080H    lsls     r0,r0,#2
     14618    01000391AH        01808H    adds     r0,r1,r0
     14620    01000391CH        06800H    ldr      r0,[r0]
     14622    01000391EH        09901H    ldr      r1,[sp,#4]
     14624    010003920H        0AA02H    add      r2,sp,#8
     14626    010003922H        06812H    ldr      r2,[r2]
  END HandleException;
     14628    010003924H    0F7FFFED8H    bl.w     RuntimeErrorsOu.PrintException
     14632    010003928H        0E000H    b        0 -> 14636
     14634    01000392AH        000BBH    ; LineNo: 187
     14636    01000392CH        0B003H    add      sp,#12
     14638    01000392EH        0BD00H    pop      { pc }
     14640    010003930H    02002FCC4H    ; Global 02002FCC4H

  PROCEDURE RuntimeErrorsOu.SetWriter*(coreId: INTEGER; Wr: TextIO.Writer);
  BEGIN
     14644    010003934H        0B503H    push     { r0, r1, lr }
    ASSERT(coreId < NumCores, Errors.PreCond);
     14646    010003936H        09800H    ldr      r0,[sp]
     14648    010003938H        02802H    cmp      r0,#2
     14650    01000393AH        0DB01H    blt.n    2 -> 14656
     14652    01000393CH        0DF65H    svc      101
     14654    01000393EH        000C2H    ; LineNo: 194
    W[coreId] := Wr
     14656    010003940H        09800H    ldr      r0,[sp]
     14658    010003942H        02802H    cmp      r0,#2
     14660    010003944H        0D301H    bcc.n    2 -> 14666
     14662    010003946H        0DF01H    svc      1
     14664    010003948H        000C3H    ; LineNo: 195
     14666    01000394AH        04903H    ldr      r1,[pc,#12] -> 14680 ; Global 02002FCC4H
     14668    01000394CH        00080H    lsls     r0,r0,#2
     14670    01000394EH        01808H    adds     r0,r1,r0
  END SetWriter;
     14672    010003950H        09901H    ldr      r1,[sp,#4]
     14674    010003952H        06001H    str      r1,[r0]
     14676    010003954H        0B002H    add      sp,#8
     14678    010003956H        0BD00H    pop      { pc }
     14680    010003958H    02002FCC4H    ; Global 02002FCC4H

PROCEDURE RuntimeErrorsOu..init;
END .init;
END RuntimeErrorsOu;
     14684    01000395CH        0B500H    push     { lr }
     14686    01000395EH        0BD00H    pop      { pc }

MODULE UARTdev;
     14688    010003960H        00000H    ; Pad
     14692    010003964H        00040H    ; Type (size)
     14696    010003968H    010003964H    ; Type (ref)
     14700    01000396CH        00000H    ; Type
     14704    010003970H        00000H    ; Type
     14708    010003974H        00000H    ; Type
     14712    010003978H        0001CH    ; Type (size)
     14716    01000397CH        00000H    ; Type
     14720    010003980H        00000H    ; Type
     14724    010003984H        00000H    ; Type
     14728    010003988H        00000H    ; Type

  PROCEDURE UARTdev.Init*(dev: Device; uartNo: INTEGER);
    VAR base: INTEGER;
  BEGIN
     14732    01000398CH        0B503H    push     { r0, r1, lr }
     14734    01000398EH        0B081H    sub      sp,#4
    ASSERT(dev # NIL, Errors.PreCond);
     14736    010003990H        09801H    ldr      r0,[sp,#4]
     14738    010003992H        02800H    cmp      r0,#0
     14740    010003994H        0D101H    bne.n    2 -> 14746
     14742    010003996H        0DF65H    svc      101
     14744    010003998H        00079H    ; LineNo: 121
    ASSERT(uartNo IN {UART0, UART1});
     14746    01000399AH        02003H    movs     r0,#3
     14748    01000399CH        09902H    ldr      r1,[sp,#8]
     14750    01000399EH        02201H    movs     r2,#1
     14752    0100039A0H        0408AH    lsls     r2,r1
     14754    0100039A2H        04210H    tst      r0,r2
     14756    0100039A4H        0D101H    bne.n    2 -> 14762
     14758    0100039A6H        0DF00H    svc      0
     14760    0100039A8H        0007AH    ; LineNo: 122
    dev.uartNo := uartNo;
     14762    0100039AAH        09802H    ldr      r0,[sp,#8]
     14764    0100039ACH        09901H    ldr      r1,[sp,#4]
     14766    0100039AEH        06008H    str      r0,[r1]
    CASE uartNo OF
      UART0: base := MCU.UART0_Base; dev.devNo := MCU.RESETS_UART0; dev.intNo := MCU.NVIC_UART0_IRQ
     14768    0100039B0H        09802H    ldr      r0,[sp,#8]
     14770    0100039B2H        04601H    mov      r1,r0
     14772    0100039B4H        046C0H    nop
     14774    0100039B6H        02901H    cmp      r1,#1
     14776    0100039B8H        0DD01H    ble.n    2 -> 14782
     14778    0100039BAH        0DF04H    svc      4
     14780    0100039BCH        0007CH    ; LineNo: 124
     14782    0100039BEH        00049H    lsls     r1,r1,#1
     14784    0100039C0H        04A01H    ldr      r2,[pc,#4] -> 14792 ; Const 02DH 45
     14786    0100039C2H        01852H    adds     r2,r2,r1
     14788    0100039C4H        0447AH    add      r2,pc
     14790    0100039C6H        04710H    bx       r2
     14792    0100039C8H        0002DH    ; Const 02DH 45
     14796    0100039CCH        04825H    ldr      r0,[pc,#148] -> 14948 ; Const 040034000H 1073954816
     14798    0100039CEH        09000H    str      r0,[sp]
     14800    0100039D0H        02016H    movs     r0,#22
     14802    0100039D2H        09901H    ldr      r1,[sp,#4]
     14804    0100039D4H        06048H    str      r0,[r1,#4]
    | UART1: base := MCU.UART1_Base; dev.devNo := MCU.RESETS_UART1; dev.intNo := MCU.NVIC_UART1_IRQ
     14806    0100039D6H        02014H    movs     r0,#20
     14808    0100039D8H        09901H    ldr      r1,[sp,#4]
     14810    0100039DAH        06088H    str      r0,[r1,#8]
     14812    0100039DCH        0E00CH    b        24 -> 14840
     14814    0100039DEH        046C0H    nop
     14816    0100039E0H        04821H    ldr      r0,[pc,#132] -> 14952 ; Const 040038000H 1073971200
     14818    0100039E2H        09000H    str      r0,[sp]
     14820    0100039E4H        02017H    movs     r0,#23
     14822    0100039E6H        09901H    ldr      r1,[sp,#4]
     14824    0100039E8H        06048H    str      r0,[r1,#4]
    END;
     14826    0100039EAH        02015H    movs     r0,#21
     14828    0100039ECH        09901H    ldr      r1,[sp,#4]
     14830    0100039EEH        06088H    str      r0,[r1,#8]
     14832    0100039F0H        0E002H    b        4 -> 14840
     14834    0100039F2H        046C0H    nop
     14836    0100039F4H        0E7EAH    b        -44 -> 14796 ldr      r0,[pc,#148] -> 14948 ; Const 040034000H 1073954816
     14838    0100039F6H        0E7F3H    b        -26 -> 14816 ldr      r0,[pc,#132] -> 14952 ; Const 040038000H 1073971200
    dev.CR    := base + MCU.UART_CR_Offset;
     14840    0100039F8H        09800H    ldr      r0,[sp]
     14842    0100039FAH        03030H    adds     r0,#48
     14844    0100039FCH        09901H    ldr      r1,[sp,#4]
     14846    0100039FEH        060C8H    str      r0,[r1,#12]
    dev.IBRD  := base + MCU.UART_IBRD_Offset;
     14848    010003A00H        09800H    ldr      r0,[sp]
     14850    010003A02H        03024H    adds     r0,#36
     14852    010003A04H        09901H    ldr      r1,[sp,#4]
     14854    010003A06H        06108H    str      r0,[r1,#16]
    dev.FBRD  := base + MCU.UART_FBRD_Offset;
     14856    010003A08H        09800H    ldr      r0,[sp]
     14858    010003A0AH        03028H    adds     r0,#40
     14860    010003A0CH        09901H    ldr      r1,[sp,#4]
     14862    010003A0EH        06148H    str      r0,[r1,#20]
    dev.LCR_H := base + MCU.UART_LCR_H_Offset;
     14864    010003A10H        09800H    ldr      r0,[sp]
     14866    010003A12H        0302CH    adds     r0,#44
     14868    010003A14H        09901H    ldr      r1,[sp,#4]
     14870    010003A16H        06188H    str      r0,[r1,#24]
    dev.TDR   := base + MCU.UART_DR_Offset;
     14872    010003A18H        09800H    ldr      r0,[sp]
     14874    010003A1AH        03000H    adds     r0,#0
     14876    010003A1CH        09901H    ldr      r1,[sp,#4]
     14878    010003A1EH        061C8H    str      r0,[r1,#28]
    dev.RDR   := base + MCU.UART_DR_Offset;
     14880    010003A20H        09800H    ldr      r0,[sp]
     14882    010003A22H        03000H    adds     r0,#0
     14884    010003A24H        09901H    ldr      r1,[sp,#4]
     14886    010003A26H        06208H    str      r0,[r1,#32]
    dev.FR    := base + MCU.UART_FR_Offset;
     14888    010003A28H        09800H    ldr      r0,[sp]
     14890    010003A2AH        03018H    adds     r0,#24
     14892    010003A2CH        09901H    ldr      r1,[sp,#4]
     14894    010003A2EH        06248H    str      r0,[r1,#36]
    dev.RSR   := base + MCU.UART_RSR_Offset;
     14896    010003A30H        09800H    ldr      r0,[sp]
     14898    010003A32H        03004H    adds     r0,#4
     14900    010003A34H        09901H    ldr      r1,[sp,#4]
     14902    010003A36H        06288H    str      r0,[r1,#40]
    dev.DMACR := base + MCU.UART_DMACR_Offset;
     14904    010003A38H        09800H    ldr      r0,[sp]
     14906    010003A3AH        03048H    adds     r0,#72
     14908    010003A3CH        09901H    ldr      r1,[sp,#4]
     14910    010003A3EH        062C8H    str      r0,[r1,#44]
    dev.IFLS  := base + MCU.UART_IFLS_Offset;
     14912    010003A40H        09800H    ldr      r0,[sp]
     14914    010003A42H        03034H    adds     r0,#52
     14916    010003A44H        09901H    ldr      r1,[sp,#4]
     14918    010003A46H        06308H    str      r0,[r1,#48]
    dev.IMSC  := base + MCU.UART_IMSC_Offset;
     14920    010003A48H        09800H    ldr      r0,[sp]
     14922    010003A4AH        03038H    adds     r0,#56
     14924    010003A4CH        09901H    ldr      r1,[sp,#4]
     14926    010003A4EH        06348H    str      r0,[r1,#52]
    dev.MIS   := base + MCU.UART_MIS_Offset;
     14928    010003A50H        09800H    ldr      r0,[sp]
     14930    010003A52H        03040H    adds     r0,#64
     14932    010003A54H        09901H    ldr      r1,[sp,#4]
     14934    010003A56H        06388H    str      r0,[r1,#56]
    dev.ICR   := base + MCU.UART_ICR_Offset
  END Init;
     14936    010003A58H        09800H    ldr      r0,[sp]
     14938    010003A5AH        03044H    adds     r0,#68
     14940    010003A5CH        09901H    ldr      r1,[sp,#4]
     14942    010003A5EH        063C8H    str      r0,[r1,#60]
     14944    010003A60H        0B003H    add      sp,#12
     14946    010003A62H        0BD00H    pop      { pc }
     14948    010003A64H    040034000H    ; Const 040034000H 1073954816
     14952    010003A68H    040038000H    ; Const 040038000H 1073971200

  PROCEDURE UARTdev.Configure*(dev: Device; cfg: DeviceCfg; baudrate: INTEGER);
    VAR x, intDiv, fracDiv: INTEGER;
  BEGIN
     14956    010003A6CH        0B50FH    push     { r0, r1, r2, r3, lr }
     14958    010003A6EH        0B083H    sub      sp,#12
    ASSERT(dev # NIL, Errors.PreCond);
     14960    010003A70H        09803H    ldr      r0,[sp,#12]
     14962    010003A72H        02800H    cmp      r0,#0
     14964    010003A74H        0D101H    bne.n    2 -> 14970
     14966    010003A76H        0DF65H    svc      101
     14968    010003A78H        00096H    ; LineNo: 150
    ASSERT(cfg.stickyParityEn IN {Disabled, Enabled}, Errors.PreCond);
     14970    010003A7AH        02003H    movs     r0,#3
     14972    010003A7CH        09904H    ldr      r1,[sp,#16]
     14974    010003A7EH        06809H    ldr      r1,[r1]
     14976    010003A80H        02201H    movs     r2,#1
     14978    010003A82H        0408AH    lsls     r2,r1
     14980    010003A84H        04210H    tst      r0,r2
     14982    010003A86H        0D101H    bne.n    2 -> 14988
     14984    010003A88H        0DF65H    svc      101
     14986    010003A8AH        00097H    ; LineNo: 151
    ASSERT(cfg.dataBits IN {DataBits5 .. DataBits8}, Errors.PreCond);
     14988    010003A8CH        0200FH    movs     r0,#15
     14990    010003A8EH        09904H    ldr      r1,[sp,#16]
     14992    010003A90H        06849H    ldr      r1,[r1,#4]
     14994    010003A92H        02201H    movs     r2,#1
     14996    010003A94H        0408AH    lsls     r2,r1
     14998    010003A96H        04210H    tst      r0,r2
     15000    010003A98H        0D101H    bne.n    2 -> 15006
     15002    010003A9AH        0DF65H    svc      101
     15004    010003A9CH        00098H    ; LineNo: 152
    ASSERT(cfg.fifoEn IN {Disabled, Enabled}, Errors.PreCond);
     15006    010003A9EH        02003H    movs     r0,#3
     15008    010003AA0H        09904H    ldr      r1,[sp,#16]
     15010    010003AA2H        06889H    ldr      r1,[r1,#8]
     15012    010003AA4H        02201H    movs     r2,#1
     15014    010003AA6H        0408AH    lsls     r2,r1
     15016    010003AA8H        04210H    tst      r0,r2
     15018    010003AAAH        0D101H    bne.n    2 -> 15024
     15020    010003AACH        0DF65H    svc      101
     15022    010003AAEH        00099H    ; LineNo: 153
    ASSERT(cfg.twoStopBitsEn IN {Disabled, Enabled}, Errors.PreCond);
     15024    010003AB0H        02003H    movs     r0,#3
     15026    010003AB2H        09904H    ldr      r1,[sp,#16]
     15028    010003AB4H        068C9H    ldr      r1,[r1,#12]
     15030    010003AB6H        02201H    movs     r2,#1
     15032    010003AB8H        0408AH    lsls     r2,r1
     15034    010003ABAH        04210H    tst      r0,r2
     15036    010003ABCH        0D101H    bne.n    2 -> 15042
     15038    010003ABEH        0DF65H    svc      101
     15040    010003AC0H        0009AH    ; LineNo: 154
    ASSERT(cfg.evenParityEn IN {Disabled, Enabled}, Errors.PreCond);
     15042    010003AC2H        02003H    movs     r0,#3
     15044    010003AC4H        09904H    ldr      r1,[sp,#16]
     15046    010003AC6H        06909H    ldr      r1,[r1,#16]
     15048    010003AC8H        02201H    movs     r2,#1
     15050    010003ACAH        0408AH    lsls     r2,r1
     15052    010003ACCH        04210H    tst      r0,r2
     15054    010003ACEH        0D101H    bne.n    2 -> 15060
     15056    010003AD0H        0DF65H    svc      101
     15058    010003AD2H        0009BH    ; LineNo: 155
    ASSERT(cfg.parityEn IN {Disabled, Enabled}, Errors.PreCond);
     15060    010003AD4H        02003H    movs     r0,#3
     15062    010003AD6H        09904H    ldr      r1,[sp,#16]
     15064    010003AD8H        06949H    ldr      r1,[r1,#20]
     15066    010003ADAH        02201H    movs     r2,#1
     15068    010003ADCH        0408AH    lsls     r2,r1
     15070    010003ADEH        04210H    tst      r0,r2
     15072    010003AE0H        0D101H    bne.n    2 -> 15078
     15074    010003AE2H        0DF65H    svc      101
     15076    010003AE4H        0009CH    ; LineNo: 156
    ASSERT(cfg.sendBreak IN {Disabled, Enabled}, Errors.PreCond);
     15078    010003AE6H        02003H    movs     r0,#3
     15080    010003AE8H        09904H    ldr      r1,[sp,#16]
     15082    010003AEAH        06989H    ldr      r1,[r1,#24]
     15084    010003AECH        02201H    movs     r2,#1
     15086    010003AEEH        0408AH    lsls     r2,r1
     15088    010003AF0H        04210H    tst      r0,r2
     15090    010003AF2H        0D101H    bne.n    2 -> 15096
     15092    010003AF4H        0DF65H    svc      101
     15094    010003AF6H        0009DH    ; LineNo: 157
    StartUp.ReleaseReset(dev.devNo);
     15096    010003AF8H        09803H    ldr      r0,[sp,#12]
     15098    010003AFAH        06840H    ldr      r0,[r0,#4]
     15100    010003AFCH    0F7FCFCD8H    bl.w     StartUp.ReleaseReset
     15104    010003B00H        0E000H    b        0 -> 15108
     15106    010003B02H        000A0H    ; LineNo: 160
    StartUp.AwaitReleaseDone(dev.devNo);
     15108    010003B04H        09803H    ldr      r0,[sp,#12]
     15110    010003B06H        06840H    ldr      r0,[r0,#4]
     15112    010003B08H    0F7FCFCECH    bl.w     StartUp.AwaitReleaseDone
     15116    010003B0CH        0E000H    b        0 -> 15120
     15118    010003B0EH        000A1H    ; LineNo: 161
    SYSTEM.PUT(dev.CR, {});
     15120    010003B10H        09803H    ldr      r0,[sp,#12]
     15122    010003B12H        068C0H    ldr      r0,[r0,#12]
     15124    010003B14H        02100H    movs     r1,#0
     15126    010003B16H        06001H    str      r1,[r0]
    x := (MCU.PeriClkFreq * 8) DIV baudrate;
     15128    010003B18H        04840H    ldr      r0,[pc,#256] -> 15388 ; Const 016E36000H 384000000
     15130    010003B1AH        09906H    ldr      r1,[sp,#24]
     15132    010003B1CH        02900H    cmp      r1,#0
     15134    010003B1EH        0DC01H    bgt.n    2 -> 15140
     15136    010003B20H        0DF07H    svc      7
     15138    010003B22H        000A7H    ; LineNo: 167
     15140    010003B24H        02401H    movs     r4,#1
     15142    010003B26H        007E4H    lsls     r4,r4,#31
     15144    010003B28H        02200H    movs     r2,#0
     15146    010003B2AH        02300H    movs     r3,#0
     15148    010003B2CH        00040H    lsls     r0,r0,#1
     15150    010003B2EH        0415BH    adcs     r3,r3
     15152    010003B30H        0428BH    cmp      r3,r1
     15154    010003B32H        0D301H    bcc.n    2 -> 15160
     15156    010003B34H        01912H    adds     r2,r2,r4
     15158    010003B36H        01A5BH    subs     r3,r3,r1
     15160    010003B38H        00864H    lsrs     r4,r4,#1
     15162    010003B3AH        0D1F7H    bne.n    -18 -> 15148
     15164    010003B3CH        04610H    mov      r0,r2
     15166    010003B3EH        09000H    str      r0,[sp]
    intDiv := LSR(x, 7);
     15168    010003B40H        09800H    ldr      r0,[sp]
     15170    010003B42H        009C0H    lsrs     r0,r0,#7
     15172    010003B44H        09001H    str      r0,[sp,#4]
    IF intDiv = 0 THEN
     15174    010003B46H        09801H    ldr      r0,[sp,#4]
     15176    010003B48H        02800H    cmp      r0,#0
     15178    010003B4AH        0D001H    beq.n    2 -> 15184
     15180    010003B4CH        0E006H    b        12 -> 15196
     15182    010003B4EH        046C0H    nop
      intDiv := 1; fracDiv := 0
     15184    010003B50H        02001H    movs     r0,#1
     15186    010003B52H        09001H    str      r0,[sp,#4]
    ELSIF intDiv >= 65535 THEN
     15188    010003B54H        02000H    movs     r0,#0
     15190    010003B56H        09002H    str      r0,[sp,#8]
     15192    010003B58H        0E012H    b        36 -> 15232
     15194    010003B5AH        046C0H    nop
     15196    010003B5CH        09801H    ldr      r0,[sp,#4]
     15198    010003B5EH        04930H    ldr      r1,[pc,#192] -> 15392 ; Const 0FFFFH 65535
     15200    010003B60H        04288H    cmp      r0,r1
     15202    010003B62H        0DA01H    bge.n    2 -> 15208
     15204    010003B64H        0E006H    b        12 -> 15220
     15206    010003B66H        046C0H    nop
      intDiv := 65535; fracDiv := 0
     15208    010003B68H        0482DH    ldr      r0,[pc,#180] -> 15392 ; Const 0FFFFH 65535
     15210    010003B6AH        09001H    str      r0,[sp,#4]
    ELSE
     15212    010003B6CH        02000H    movs     r0,#0
     15214    010003B6EH        09002H    str      r0,[sp,#8]
      fracDiv := ((intDiv MOD 0100H) + 1) DIV 2
     15216    010003B70H        0E006H    b        12 -> 15232
     15218    010003B72H        046C0H    nop
     15220    010003B74H        09801H    ldr      r0,[sp,#4]
     15222    010003B76H        00600H    lsls     r0,r0,#24
     15224    010003B78H        00E00H    lsrs     r0,r0,#24
     15226    010003B7AH        03001H    adds     r0,#1
    END;
     15228    010003B7CH        01040H    asrs     r0,r0,#1
     15230    010003B7EH        09002H    str      r0,[sp,#8]
    SYSTEM.PUT(dev.IBRD, intDiv);
     15232    010003B80H        09803H    ldr      r0,[sp,#12]
     15234    010003B82H        06900H    ldr      r0,[r0,#16]
     15236    010003B84H        09901H    ldr      r1,[sp,#4]
     15238    010003B86H        06001H    str      r1,[r0]
    SYSTEM.PUT(dev.FBRD, fracDiv);
     15240    010003B88H        09803H    ldr      r0,[sp,#12]
     15242    010003B8AH        06940H    ldr      r0,[r0,#20]
     15244    010003B8CH        09902H    ldr      r1,[sp,#8]
     15246    010003B8EH        06001H    str      r1,[r0]
    x := 0;
     15248    010003B90H        02000H    movs     r0,#0
     15250    010003B92H        09000H    str      r0,[sp]
    BFI(x, LCR_H_SPS, cfg.stickyParityEn);
     15252    010003B94H        09804H    ldr      r0,[sp,#16]
     15254    010003B96H        06800H    ldr      r0,[r0]
     15256    010003B98H        04669H    mov      r1,sp
     15258    010003B9AH        0680AH    ldr      r2,[r1]
     15260    010003B9CH        04B21H    ldr      r3,[pc,#132] -> 15396 ; Const 0FFFFFF7FH -129
     15262    010003B9EH        0401AH    ands     r2,r3
     15264    010003BA0H        001C0H    lsls     r0,r0,#7
     15266    010003BA2H        04302H    orrs     r2,r0
     15268    010003BA4H        09200H    str      r2,[sp]
    BFI(x, LCR_H_WLEN1, LCR_H_WLEN0, cfg.dataBits);
     15270    010003BA6H        09804H    ldr      r0,[sp,#16]
     15272    010003BA8H        06840H    ldr      r0,[r0,#4]
     15274    010003BAAH        04669H    mov      r1,sp
     15276    010003BACH        0680AH    ldr      r2,[r1]
     15278    010003BAEH        04B1EH    ldr      r3,[pc,#120] -> 15400 ; Const 0FFFFFF9FH -97
     15280    010003BB0H        0401AH    ands     r2,r3
     15282    010003BB2H        00140H    lsls     r0,r0,#5
     15284    010003BB4H        04302H    orrs     r2,r0
     15286    010003BB6H        09200H    str      r2,[sp]
    BFI(x, LCR_H_FEN, cfg.fifoEn);
     15288    010003BB8H        09804H    ldr      r0,[sp,#16]
     15290    010003BBAH        06880H    ldr      r0,[r0,#8]
     15292    010003BBCH        04669H    mov      r1,sp
     15294    010003BBEH        0680AH    ldr      r2,[r1]
     15296    010003BC0H        04B1AH    ldr      r3,[pc,#104] -> 15404 ; Const 0FFFFFFEFH -17
     15298    010003BC2H        0401AH    ands     r2,r3
     15300    010003BC4H        00100H    lsls     r0,r0,#4
     15302    010003BC6H        04302H    orrs     r2,r0
     15304    010003BC8H        09200H    str      r2,[sp]
    BFI(x, LCR_H_STP2, cfg.twoStopBitsEn);
     15306    010003BCAH        09804H    ldr      r0,[sp,#16]
     15308    010003BCCH        068C0H    ldr      r0,[r0,#12]
     15310    010003BCEH        04669H    mov      r1,sp
     15312    010003BD0H        0680AH    ldr      r2,[r1]
     15314    010003BD2H        04B17H    ldr      r3,[pc,#92] -> 15408 ; Const 0FFFFFFF7H -9
     15316    010003BD4H        0401AH    ands     r2,r3
     15318    010003BD6H        000C0H    lsls     r0,r0,#3
     15320    010003BD8H        04302H    orrs     r2,r0
     15322    010003BDAH        09200H    str      r2,[sp]
    BFI(x, LCR_H_EPS, cfg.evenParityEn);
     15324    010003BDCH        09804H    ldr      r0,[sp,#16]
     15326    010003BDEH        06900H    ldr      r0,[r0,#16]
     15328    010003BE0H        04669H    mov      r1,sp
     15330    010003BE2H        0680AH    ldr      r2,[r1]
     15332    010003BE4H        04B13H    ldr      r3,[pc,#76] -> 15412 ; Const 0FFFFFFFBH -5
     15334    010003BE6H        0401AH    ands     r2,r3
     15336    010003BE8H        00080H    lsls     r0,r0,#2
     15338    010003BEAH        04302H    orrs     r2,r0
     15340    010003BECH        09200H    str      r2,[sp]
    BFI(x, LCR_H_PEN, cfg.parityEn);
     15342    010003BEEH        09804H    ldr      r0,[sp,#16]
     15344    010003BF0H        06940H    ldr      r0,[r0,#20]
     15346    010003BF2H        04669H    mov      r1,sp
     15348    010003BF4H        0680AH    ldr      r2,[r1]
     15350    010003BF6H        04B10H    ldr      r3,[pc,#64] -> 15416 ; Const 0FFFFFFFDH -3
     15352    010003BF8H        0401AH    ands     r2,r3
     15354    010003BFAH        00040H    lsls     r0,r0,#1
     15356    010003BFCH        04302H    orrs     r2,r0
     15358    010003BFEH        09200H    str      r2,[sp]
    BFI(x, LCR_H_BRK, cfg.sendBreak);
     15360    010003C00H        09804H    ldr      r0,[sp,#16]
     15362    010003C02H        06980H    ldr      r0,[r0,#24]
     15364    010003C04H        04669H    mov      r1,sp
     15366    010003C06H        0680AH    ldr      r2,[r1]
     15368    010003C08H        04B0CH    ldr      r3,[pc,#48] -> 15420 ; Const 0FFFFFFFEH -2
     15370    010003C0AH        0401AH    ands     r2,r3
     15372    010003C0CH        04302H    orrs     r2,r0
     15374    010003C0EH        09200H    str      r2,[sp]
    SYSTEM.PUT(dev.LCR_H, x)
  END Configure;
     15376    010003C10H        09803H    ldr      r0,[sp,#12]
     15378    010003C12H        06980H    ldr      r0,[r0,#24]
     15380    010003C14H        09900H    ldr      r1,[sp]
     15382    010003C16H        06001H    str      r1,[r0]
     15384    010003C18H        0B007H    add      sp,#28
     15386    010003C1AH        0BD00H    pop      { pc }
     15388    010003C1CH    016E36000H    ; Const 016E36000H 384000000
     15392    010003C20H        0FFFFH    ; Const 0FFFFH 65535
     15396    010003C24H    0FFFFFF7FH    ; Const 0FFFFFF7FH -129
     15400    010003C28H    0FFFFFF9FH    ; Const 0FFFFFF9FH -97
     15404    010003C2CH    0FFFFFFEFH    ; Const 0FFFFFFEFH -17
     15408    010003C30H    0FFFFFFF7H    ; Const 0FFFFFFF7H -9
     15412    010003C34H    0FFFFFFFBH    ; Const 0FFFFFFFBH -5
     15416    010003C38H    0FFFFFFFDH    ; Const 0FFFFFFFDH -3
     15420    010003C3CH    0FFFFFFFEH    ; Const 0FFFFFFFEH -2

  PROCEDURE UARTdev.Enable*(dev: Device);
  BEGIN
     15424    010003C40H        0B501H    push     { r0, lr }
    ASSERT(dev # NIL, Errors.PreCond);
     15426    010003C42H        09800H    ldr      r0,[sp]
     15428    010003C44H        02800H    cmp      r0,#0
     15430    010003C46H        0D101H    bne.n    2 -> 15436
     15432    010003C48H        0DF65H    svc      101
     15434    010003C4AH        000C2H    ; LineNo: 194
    SYSTEM.PUT(dev.CR + MCU.ASET, {CR_UARTEN, CR_RXE, CR_TXE})
     15436    010003C4CH        09800H    ldr      r0,[sp]
     15438    010003C4EH        068C0H    ldr      r0,[r0,#12]
     15440    010003C50H        02101H    movs     r1,#1
     15442    010003C52H        00349H    lsls     r1,r1,#13
     15444    010003C54H        01840H    adds     r0,r0,r1
  END Enable;
     15446    010003C56H        04902H    ldr      r1,[pc,#8] -> 15456 ; Const 0301H 769
     15448    010003C58H        06001H    str      r1,[r0]
     15450    010003C5AH        0B001H    add      sp,#4
     15452    010003C5CH        0BD00H    pop      { pc }
     15454    010003C5EH        046C0H    nop
     15456    010003C60H        00301H    ; Const 0301H 769

  PROCEDURE UARTdev.Disable*(dev: Device);
  BEGIN
     15460    010003C64H        0B501H    push     { r0, lr }
    ASSERT(dev # NIL, Errors.PreCond);
     15462    010003C66H        09800H    ldr      r0,[sp]
     15464    010003C68H        02800H    cmp      r0,#0
     15466    010003C6AH        0D101H    bne.n    2 -> 15472
     15468    010003C6CH        0DF65H    svc      101
     15470    010003C6EH        000C9H    ; LineNo: 201
    SYSTEM.PUT(dev.CR + MCU.ACLR, {CR_UARTEN, CR_RXE, CR_TXE})
     15472    010003C70H        09800H    ldr      r0,[sp]
     15474    010003C72H        068C0H    ldr      r0,[r0,#12]
     15476    010003C74H        02103H    movs     r1,#3
     15478    010003C76H        00309H    lsls     r1,r1,#12
     15480    010003C78H        01840H    adds     r0,r0,r1
  END Disable;
     15482    010003C7AH        04902H    ldr      r1,[pc,#8] -> 15492 ; Const 0301H 769
     15484    010003C7CH        06001H    str      r1,[r0]
     15486    010003C7EH        0B001H    add      sp,#4
     15488    010003C80H        0BD00H    pop      { pc }
     15490    010003C82H        046C0H    nop
     15492    010003C84H        00301H    ; Const 0301H 769

  PROCEDURE UARTdev.Flags*(dev: Device): SET;
    VAR flags: SET;
  BEGIN
     15496    010003C88H        0B501H    push     { r0, lr }
     15498    010003C8AH        0B081H    sub      sp,#4
    SYSTEM.GET(dev.FR, flags)
    RETURN flags
     15500    010003C8CH        09801H    ldr      r0,[sp,#4]
     15502    010003C8EH        06A40H    ldr      r0,[r0,#36]
     15504    010003C90H        06801H    ldr      r1,[r0]
     15506    010003C92H        09100H    str      r1,[sp]
  END Flags;
     15508    010003C94H        09800H    ldr      r0,[sp]
     15510    010003C96H        0B002H    add      sp,#8
     15512    010003C98H        0BD00H    pop      { pc }
     15514    010003C9AH        046C0H    nop

  PROCEDURE UARTdev.GetBaseCfg*(VAR cfg: DeviceCfg);
  BEGIN
     15516    010003C9CH        0B503H    push     { r0, r1, lr }
    CLEAR(cfg);
     15518    010003C9EH        09800H    ldr      r0,[sp]
     15520    010003CA0H        02100H    movs     r1,#0
     15522    010003CA2H        02207H    movs     r2,#7
     15524    010003CA4H        06001H    str      r1,[r0]
     15526    010003CA6H        03004H    adds     r0,#4
     15528    010003CA8H        03A01H    subs     r2,#1
     15530    010003CAAH        0DCFBH    bgt.n    -10 -> 15524
    cfg.dataBits := WLEN_val_8
  END GetBaseCfg;
     15532    010003CACH        02003H    movs     r0,#3
     15534    010003CAEH        09900H    ldr      r1,[sp]
     15536    010003CB0H        06048H    str      r0,[r1,#4]
     15538    010003CB2H        0B002H    add      sp,#8
     15540    010003CB4H        0BD00H    pop      { pc }
     15542    010003CB6H        046C0H    nop

  PROCEDURE UARTdev.GetCurrentCfg*(dev: Device; VAR cfg: DeviceCfg);
    VAR x: INTEGER;
  BEGIN
     15544    010003CB8H        0B507H    push     { r0, r1, r2, lr }
     15546    010003CBAH        0B081H    sub      sp,#4
    SYSTEM.GET(dev.LCR_H, x);
     15548    010003CBCH        09801H    ldr      r0,[sp,#4]
     15550    010003CBEH        06980H    ldr      r0,[r0,#24]
     15552    010003CC0H        06801H    ldr      r1,[r0]
     15554    010003CC2H        09100H    str      r1,[sp]
    cfg.stickyParityEn := BFX(x, LCR_H_SPS);
     15556    010003CC4H        09800H    ldr      r0,[sp]
     15558    010003CC6H        00600H    lsls     r0,r0,#24
     15560    010003CC8H        00FC0H    lsrs     r0,r0,#31
     15562    010003CCAH        09902H    ldr      r1,[sp,#8]
     15564    010003CCCH        06008H    str      r0,[r1]
    cfg.dataBits := BFX(x, LCR_H_WLEN1, LCR_H_WLEN0);
     15566    010003CCEH        09800H    ldr      r0,[sp]
     15568    010003CD0H        00640H    lsls     r0,r0,#25
     15570    010003CD2H        00F80H    lsrs     r0,r0,#30
     15572    010003CD4H        09902H    ldr      r1,[sp,#8]
     15574    010003CD6H        06048H    str      r0,[r1,#4]
    cfg.fifoEn := BFX(x, LCR_H_FEN);
     15576    010003CD8H        09800H    ldr      r0,[sp]
     15578    010003CDAH        006C0H    lsls     r0,r0,#27
     15580    010003CDCH        00FC0H    lsrs     r0,r0,#31
     15582    010003CDEH        09902H    ldr      r1,[sp,#8]
     15584    010003CE0H        06088H    str      r0,[r1,#8]
    cfg.twoStopBitsEn := BFX(x, LCR_H_STP2);
     15586    010003CE2H        09800H    ldr      r0,[sp]
     15588    010003CE4H        00700H    lsls     r0,r0,#28
     15590    010003CE6H        00FC0H    lsrs     r0,r0,#31
     15592    010003CE8H        09902H    ldr      r1,[sp,#8]
     15594    010003CEAH        060C8H    str      r0,[r1,#12]
    cfg.evenParityEn := BFX(x, LCR_H_EPS);
     15596    010003CECH        09800H    ldr      r0,[sp]
     15598    010003CEEH        00740H    lsls     r0,r0,#29
     15600    010003CF0H        00FC0H    lsrs     r0,r0,#31
     15602    010003CF2H        09902H    ldr      r1,[sp,#8]
     15604    010003CF4H        06108H    str      r0,[r1,#16]
    cfg.parityEn := BFX(x, LCR_H_PEN);
     15606    010003CF6H        09800H    ldr      r0,[sp]
     15608    010003CF8H        00780H    lsls     r0,r0,#30
     15610    010003CFAH        00FC0H    lsrs     r0,r0,#31
     15612    010003CFCH        09902H    ldr      r1,[sp,#8]
     15614    010003CFEH        06148H    str      r0,[r1,#20]
    cfg.sendBreak := BFX(x, LCR_H_BRK)
  END GetCurrentCfg;
     15616    010003D00H        09800H    ldr      r0,[sp]
     15618    010003D02H        007C0H    lsls     r0,r0,#31
     15620    010003D04H        00FC0H    lsrs     r0,r0,#31
     15622    010003D06H        09902H    ldr      r1,[sp,#8]
     15624    010003D08H        06188H    str      r0,[r1,#24]
     15626    010003D0AH        0B004H    add      sp,#16
     15628    010003D0CH        0BD00H    pop      { pc }
     15630    010003D0EH        046C0H    nop

  PROCEDURE UARTdev.SetFifoLvl*(dev: Device; txFifoLvl, rxFifoLvl: INTEGER);
    VAR x: INTEGER;
  BEGIN
     15632    010003D10H        0B507H    push     { r0, r1, r2, lr }
     15634    010003D12H        0B081H    sub      sp,#4
    ASSERT(txFifoLvl IN {TXIFLSEL_val_18 .. TXIFLSEL_val_78});
     15636    010003D14H        0201FH    movs     r0,#31
     15638    010003D16H        09902H    ldr      r1,[sp,#8]
     15640    010003D18H        02201H    movs     r2,#1
     15642    010003D1AH        0408AH    lsls     r2,r1
     15644    010003D1CH        04210H    tst      r0,r2
     15646    010003D1EH        0D101H    bne.n    2 -> 15652
     15648    010003D20H        0DF00H    svc      0
     15650    010003D22H        000FBH    ; LineNo: 251
    ASSERT(rxFifoLvl IN {RXIFLSEL_val_18 .. RXIFLSEL_val_78});
     15652    010003D24H        0201FH    movs     r0,#31
     15654    010003D26H        09903H    ldr      r1,[sp,#12]
     15656    010003D28H        02201H    movs     r2,#1
     15658    010003D2AH        0408AH    lsls     r2,r1
     15660    010003D2CH        04210H    tst      r0,r2
     15662    010003D2EH        0D101H    bne.n    2 -> 15668
     15664    010003D30H        0DF00H    svc      0
     15666    010003D32H        000FCH    ; LineNo: 252
    x := txFifoLvl;
     15668    010003D34H        09802H    ldr      r0,[sp,#8]
     15670    010003D36H        09000H    str      r0,[sp]
    x := x + LSL(rxFifoLvl, IFLS_RXIFLSEL0);
     15672    010003D38H        09803H    ldr      r0,[sp,#12]
     15674    010003D3AH        000C0H    lsls     r0,r0,#3
     15676    010003D3CH        09900H    ldr      r1,[sp]
     15678    010003D3EH        01808H    adds     r0,r1,r0
     15680    010003D40H        09000H    str      r0,[sp]
    SYSTEM.PUT(dev.IFLS, x)
  END SetFifoLvl;
     15682    010003D42H        09801H    ldr      r0,[sp,#4]
     15684    010003D44H        06B00H    ldr      r0,[r0,#48]
     15686    010003D46H        09900H    ldr      r1,[sp]
     15688    010003D48H        06001H    str      r1,[r0]
     15690    010003D4AH        0B004H    add      sp,#16
     15692    010003D4CH        0BD00H    pop      { pc }
     15694    010003D4EH        046C0H    nop

  PROCEDURE UARTdev.EnableInt*(dev: Device; intMask: SET);
  BEGIN
     15696    010003D50H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(dev.IMSC + MCU.ASET, intMask)
     15698    010003D52H        09800H    ldr      r0,[sp]
     15700    010003D54H        06B40H    ldr      r0,[r0,#52]
     15702    010003D56H        02101H    movs     r1,#1
     15704    010003D58H        00349H    lsls     r1,r1,#13
     15706    010003D5AH        01840H    adds     r0,r0,r1
  END EnableInt;
     15708    010003D5CH        09901H    ldr      r1,[sp,#4]
     15710    010003D5EH        06001H    str      r1,[r0]
     15712    010003D60H        0B002H    add      sp,#8
     15714    010003D62H        0BD00H    pop      { pc }

  PROCEDURE UARTdev.DisableInt*(dev: Device; intMask: SET);
  BEGIN
     15716    010003D64H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(dev.IMSC + MCU.ACLR, intMask)
     15718    010003D66H        09800H    ldr      r0,[sp]
     15720    010003D68H        06B40H    ldr      r0,[r0,#52]
     15722    010003D6AH        02103H    movs     r1,#3
     15724    010003D6CH        00309H    lsls     r1,r1,#12
     15726    010003D6EH        01840H    adds     r0,r0,r1
  END DisableInt;
     15728    010003D70H        09901H    ldr      r1,[sp,#4]
     15730    010003D72H        06001H    str      r1,[r0]
     15732    010003D74H        0B002H    add      sp,#8
     15734    010003D76H        0BD00H    pop      { pc }

  PROCEDURE UARTdev.GetEnabledInt*(dev: Device; VAR enabled: SET);
  BEGIN
     15736    010003D78H        0B503H    push     { r0, r1, lr }
    SYSTEM.GET(dev.IMSC, enabled)
  END GetEnabledInt;
     15738    010003D7AH        09800H    ldr      r0,[sp]
     15740    010003D7CH        06B40H    ldr      r0,[r0,#52]
     15742    010003D7EH        06801H    ldr      r1,[r0]
     15744    010003D80H        09A01H    ldr      r2,[sp,#4]
     15746    010003D82H        06011H    str      r1,[r2]
     15748    010003D84H        0B002H    add      sp,#8
     15750    010003D86H        0BD00H    pop      { pc }

  PROCEDURE UARTdev.GetIntStatus*(dev: Device; VAR status: SET);
  BEGIN
     15752    010003D88H        0B503H    push     { r0, r1, lr }
    SYSTEM.GET(dev.MIS, status)
  END GetIntStatus;
     15754    010003D8AH        09800H    ldr      r0,[sp]
     15756    010003D8CH        06B80H    ldr      r0,[r0,#56]
     15758    010003D8EH        06801H    ldr      r1,[r0]
     15760    010003D90H        09A01H    ldr      r2,[sp,#4]
     15762    010003D92H        06011H    str      r1,[r2]
     15764    010003D94H        0B002H    add      sp,#8
     15766    010003D96H        0BD00H    pop      { pc }

  PROCEDURE UARTdev.ClearInt*(dev: Device; intMask: SET);
  BEGIN
     15768    010003D98H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(dev.ICR + MCU.ASET, intMask)
     15770    010003D9AH        09800H    ldr      r0,[sp]
     15772    010003D9CH        06BC0H    ldr      r0,[r0,#60]
     15774    010003D9EH        02101H    movs     r1,#1
     15776    010003DA0H        00349H    lsls     r1,r1,#13
     15778    010003DA2H        01840H    adds     r0,r0,r1
  END ClearInt;
     15780    010003DA4H        09901H    ldr      r1,[sp,#4]
     15782    010003DA6H        06001H    str      r1,[r0]
     15784    010003DA8H        0B002H    add      sp,#8
     15786    010003DAAH        0BD00H    pop      { pc }

PROCEDURE UARTdev..init;
END .init;
END UARTdev;
     15788    010003DACH        0B500H    push     { lr }
     15790    010003DAEH        0BD00H    pop      { pc }

MODULE Terminals;
     15792    010003DB0H        00000H    ; Pad

  PROCEDURE Terminals.InitUART*(uartNo: INTEGER; uartCfg: UARTdev.DeviceCfg; baudrate: INTEGER; VAR dev: UARTdev.Device);
  BEGIN
     15796    010003DB4H        0B51FH    push     { r0, r1, r2, r3, r4, lr }
    NEW(dev); ASSERT(dev # NIL, Errors.HeapOverflow);
     15798    010003DB6H        09804H    ldr      r0,[sp,#16]
     15800    010003DB8H        04911H    ldr      r1,[pc,#68] -> 15872 ; Global 010003964H
     15802    010003DBAH    0F7FDFB15H    bl.w     MAU.New
     15806    010003DBEH        0E000H    b        0 -> 15810
     15808    010003DC0H        00024H    ; LineNo: 36
     15810    010003DC2H        09804H    ldr      r0,[sp,#16]
     15812    010003DC4H        06800H    ldr      r0,[r0]
     15814    010003DC6H        02800H    cmp      r0,#0
     15816    010003DC8H        0D101H    bne.n    2 -> 15822
     15818    010003DCAH        0DF6CH    svc      108
     15820    010003DCCH        00024H    ; LineNo: 36
    UARTdev.Init(dev, uartNo);
     15822    010003DCEH        09804H    ldr      r0,[sp,#16]
     15824    010003DD0H        06800H    ldr      r0,[r0]
     15826    010003DD2H        09900H    ldr      r1,[sp]
     15828    010003DD4H    0F7FFFDDAH    bl.w     UARTdev.Init
     15832    010003DD8H        0E000H    b        0 -> 15836
     15834    010003DDAH        00025H    ; LineNo: 37
    UARTdev.Configure(dev, uartCfg, baudrate);
     15836    010003DDCH        09804H    ldr      r0,[sp,#16]
     15838    010003DDEH        06800H    ldr      r0,[r0]
     15840    010003DE0H        09901H    ldr      r1,[sp,#4]
     15842    010003DE2H        0AA02H    add      r2,sp,#8
     15844    010003DE4H        06812H    ldr      r2,[r2]
     15846    010003DE6H        09B03H    ldr      r3,[sp,#12]
     15848    010003DE8H    0F7FFFE40H    bl.w     UARTdev.Configure
     15852    010003DECH        0E000H    b        0 -> 15856
     15854    010003DEEH        00026H    ; LineNo: 38
    UARTdev.Enable(dev)
     15856    010003DF0H        09804H    ldr      r0,[sp,#16]
     15858    010003DF2H        06800H    ldr      r0,[r0]
  END InitUART;
     15860    010003DF4H    0F7FFFF24H    bl.w     UARTdev.Enable
     15864    010003DF8H        0E000H    b        0 -> 15868
     15866    010003DFAH        00027H    ; LineNo: 39
     15868    010003DFCH        0B005H    add      sp,#20
     15870    010003DFEH        0BD00H    pop      { pc }
     15872    010003E00H    010003964H    ; Global 010003964H

  PROCEDURE Terminals.Open*(termNo: INTEGER; dev: TextIO.Device; psp: TextIO.PutStringProc; gsp: TextIO.GetStringProc);
  BEGIN
     15876    010003E04H        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(termNo IN {TERM0, TERM1}, Errors.PreCond);
     15878    010003E06H        02003H    movs     r0,#3
     15880    010003E08H        09900H    ldr      r1,[sp]
     15882    010003E0AH        02201H    movs     r2,#1
     15884    010003E0CH        0408AH    lsls     r2,r1
     15886    010003E0EH        04210H    tst      r0,r2
     15888    010003E10H        0D101H    bne.n    2 -> 15894
     15890    010003E12H        0DF65H    svc      101
     15892    010003E14H        0002DH    ; LineNo: 45
    ASSERT(dev # NIL, Errors.PreCond);
     15894    010003E16H        09801H    ldr      r0,[sp,#4]
     15896    010003E18H        02800H    cmp      r0,#0
     15898    010003E1AH        0D101H    bne.n    2 -> 15904
     15900    010003E1CH        0DF65H    svc      101
     15902    010003E1EH        0002EH    ; LineNo: 46
    IF W[termNo] = NIL THEN
     15904    010003E20H        09800H    ldr      r0,[sp]
     15906    010003E22H        02802H    cmp      r0,#2
     15908    010003E24H        0D301H    bcc.n    2 -> 15914
     15910    010003E26H        0DF01H    svc      1
     15912    010003E28H        0002FH    ; LineNo: 47
     15914    010003E2AH        04930H    ldr      r1,[pc,#192] -> 16108 ; Global 02002FCBCH
     15916    010003E2CH        00080H    lsls     r0,r0,#2
     15918    010003E2EH        01808H    adds     r0,r1,r0
     15920    010003E30H        06800H    ldr      r0,[r0]
     15922    010003E32H        02800H    cmp      r0,#0
     15924    010003E34H        0D001H    beq.n    2 -> 15930
     15926    010003E36H        0E052H    b        164 -> 16094
     15928    010003E38H        046C0H    nop
      NEW(W[termNo]); ASSERT(W[termNo] # NIL, Errors.HeapOverflow);
     15930    010003E3AH        09800H    ldr      r0,[sp]
     15932    010003E3CH        02802H    cmp      r0,#2
     15934    010003E3EH        0D301H    bcc.n    2 -> 15940
     15936    010003E40H        0DF01H    svc      1
     15938    010003E42H        00030H    ; LineNo: 48
     15940    010003E44H        04929H    ldr      r1,[pc,#164] -> 16108 ; Global 02002FCBCH
     15942    010003E46H        00080H    lsls     r0,r0,#2
     15944    010003E48H        01808H    adds     r0,r1,r0
     15946    010003E4AH        04926H    ldr      r1,[pc,#152] -> 16100 ; Global 010002514H
     15948    010003E4CH    0F7FDFACCH    bl.w     MAU.New
     15952    010003E50H        0E000H    b        0 -> 15956
     15954    010003E52H        00030H    ; LineNo: 48
     15956    010003E54H        09800H    ldr      r0,[sp]
     15958    010003E56H        02802H    cmp      r0,#2
     15960    010003E58H        0D301H    bcc.n    2 -> 15966
     15962    010003E5AH        0DF01H    svc      1
     15964    010003E5CH        00030H    ; LineNo: 48
     15966    010003E5EH        04923H    ldr      r1,[pc,#140] -> 16108 ; Global 02002FCBCH
     15968    010003E60H        00080H    lsls     r0,r0,#2
     15970    010003E62H        01808H    adds     r0,r1,r0
     15972    010003E64H        06800H    ldr      r0,[r0]
     15974    010003E66H        02800H    cmp      r0,#0
     15976    010003E68H        0D101H    bne.n    2 -> 15982
     15978    010003E6AH        0DF6CH    svc      108
     15980    010003E6CH        00030H    ; LineNo: 48
      NEW(R[termNo]); ASSERT(R[termNo] # NIL, Errors.HeapOverflow);
     15982    010003E6EH        09800H    ldr      r0,[sp]
     15984    010003E70H        02802H    cmp      r0,#2
     15986    010003E72H        0D301H    bcc.n    2 -> 15992
     15988    010003E74H        0DF01H    svc      1
     15990    010003E76H        00031H    ; LineNo: 49
     15992    010003E78H        0491DH    ldr      r1,[pc,#116] -> 16112 ; Global 02002FCACH
     15994    010003E7AH        00080H    lsls     r0,r0,#2
     15996    010003E7CH        01808H    adds     r0,r1,r0
     15998    010003E7EH        0491AH    ldr      r1,[pc,#104] -> 16104 ; Global 010002528H
     16000    010003E80H    0F7FDFAB2H    bl.w     MAU.New
     16004    010003E84H        0E000H    b        0 -> 16008
     16006    010003E86H        00031H    ; LineNo: 49
     16008    010003E88H        09800H    ldr      r0,[sp]
     16010    010003E8AH        02802H    cmp      r0,#2
     16012    010003E8CH        0D301H    bcc.n    2 -> 16018
     16014    010003E8EH        0DF01H    svc      1
     16016    010003E90H        00031H    ; LineNo: 49
     16018    010003E92H        04917H    ldr      r1,[pc,#92] -> 16112 ; Global 02002FCACH
     16020    010003E94H        00080H    lsls     r0,r0,#2
     16022    010003E96H        01808H    adds     r0,r1,r0
     16024    010003E98H        06800H    ldr      r0,[r0]
     16026    010003E9AH        02800H    cmp      r0,#0
     16028    010003E9CH        0D101H    bne.n    2 -> 16034
     16030    010003E9EH        0DF6CH    svc      108
     16032    010003EA0H        00031H    ; LineNo: 49
      TextIO.OpenWriter(W[termNo], dev, psp);
     16034    010003EA2H        09800H    ldr      r0,[sp]
     16036    010003EA4H        02802H    cmp      r0,#2
     16038    010003EA6H        0D301H    bcc.n    2 -> 16044
     16040    010003EA8H        0DF01H    svc      1
     16042    010003EAAH        00032H    ; LineNo: 50
     16044    010003EACH        0490FH    ldr      r1,[pc,#60] -> 16108 ; Global 02002FCBCH
     16046    010003EAEH        00080H    lsls     r0,r0,#2
     16048    010003EB0H        01808H    adds     r0,r1,r0
     16050    010003EB2H        06800H    ldr      r0,[r0]
     16052    010003EB4H        09901H    ldr      r1,[sp,#4]
     16054    010003EB6H        09A02H    ldr      r2,[sp,#8]
     16056    010003EB8H    0F7FEFB40H    bl.w     TextIO.OpenWriter
     16060    010003EBCH        0E000H    b        0 -> 16064
     16062    010003EBEH        00032H    ; LineNo: 50
      TextIO.OpenReader(R[termNo], dev, gsp)
     16064    010003EC0H        09800H    ldr      r0,[sp]
     16066    010003EC2H        02802H    cmp      r0,#2
     16068    010003EC4H        0D301H    bcc.n    2 -> 16074
     16070    010003EC6H        0DF01H    svc      1
     16072    010003EC8H        00033H    ; LineNo: 51
     16074    010003ECAH        04909H    ldr      r1,[pc,#36] -> 16112 ; Global 02002FCACH
     16076    010003ECCH        00080H    lsls     r0,r0,#2
     16078    010003ECEH        01808H    adds     r0,r1,r0
     16080    010003ED0H        06800H    ldr      r0,[r0]
     16082    010003ED2H        09901H    ldr      r1,[sp,#4]
     16084    010003ED4H        09A03H    ldr      r2,[sp,#12]
    END
     16086    010003ED6H    0F7FEFB4FH    bl.w     TextIO.OpenReader
     16090    010003EDAH        0E000H    b        0 -> 16094
     16092    010003EDCH        00033H    ; LineNo: 51
  END Open;
     16094    010003EDEH        0B004H    add      sp,#16
     16096    010003EE0H        0BD00H    pop      { pc }
     16098    010003EE2H        046C0H    nop
     16100    010003EE4H    010002514H    ; Global 010002514H
     16104    010003EE8H    010002528H    ; Global 010002528H
     16108    010003EECH    02002FCBCH    ; Global 02002FCBCH
     16112    010003EF0H    02002FCACH    ; Global 02002FCACH

  PROCEDURE Terminals.Close*(termNo: INTEGER; VAR dev: TextIO.Device);
  BEGIN
     16116    010003EF4H        0B503H    push     { r0, r1, lr }
    dev := W[termNo].dev;
     16118    010003EF6H        09800H    ldr      r0,[sp]
     16120    010003EF8H        02802H    cmp      r0,#2
     16122    010003EFAH        0D301H    bcc.n    2 -> 16128
     16124    010003EFCH        0DF01H    svc      1
     16126    010003EFEH        0003AH    ; LineNo: 58
     16128    010003F00H        04909H    ldr      r1,[pc,#36] -> 16168 ; Global 02002FCBCH
     16130    010003F02H        00080H    lsls     r0,r0,#2
     16132    010003F04H        01808H    adds     r0,r1,r0
     16134    010003F06H        06800H    ldr      r0,[r0]
     16136    010003F08H        06800H    ldr      r0,[r0]
     16138    010003F0AH        09901H    ldr      r1,[sp,#4]
     16140    010003F0CH        06008H    str      r0,[r1]
    W[termNo] := NIL
     16142    010003F0EH        09800H    ldr      r0,[sp]
     16144    010003F10H        02802H    cmp      r0,#2
     16146    010003F12H        0D301H    bcc.n    2 -> 16152
     16148    010003F14H        0DF01H    svc      1
     16150    010003F16H        0003BH    ; LineNo: 59
     16152    010003F18H        04903H    ldr      r1,[pc,#12] -> 16168 ; Global 02002FCBCH
     16154    010003F1AH        00080H    lsls     r0,r0,#2
     16156    010003F1CH        01808H    adds     r0,r1,r0
  END Close;
     16158    010003F1EH        02100H    movs     r1,#0
     16160    010003F20H        06001H    str      r1,[r0]
     16162    010003F22H        0B002H    add      sp,#8
     16164    010003F24H        0BD00H    pop      { pc }
     16166    010003F26H        046C0H    nop
     16168    010003F28H    02002FCBCH    ; Global 02002FCBCH

  PROCEDURE Terminals.OpenErr*(termNo: INTEGER; psp: TextIO.PutStringProc);
  BEGIN
     16172    010003F2CH        0B503H    push     { r0, r1, lr }
    ASSERT(termNo IN {TERM0, TERM1}, Errors.PreCond);
     16174    010003F2EH        02003H    movs     r0,#3
     16176    010003F30H        09900H    ldr      r1,[sp]
     16178    010003F32H        02201H    movs     r2,#1
     16180    010003F34H        0408AH    lsls     r2,r1
     16182    010003F36H        04210H    tst      r0,r2
     16184    010003F38H        0D101H    bne.n    2 -> 16190
     16186    010003F3AH        0DF65H    svc      101
     16188    010003F3CH        00047H    ; LineNo: 71
    ASSERT(W[termNo] # NIL, Errors.ProgError);  
     16190    010003F3EH        09800H    ldr      r0,[sp]
     16192    010003F40H        02802H    cmp      r0,#2
     16194    010003F42H        0D301H    bcc.n    2 -> 16200
     16196    010003F44H        0DF01H    svc      1
     16198    010003F46H        00048H    ; LineNo: 72
     16200    010003F48H        04925H    ldr      r1,[pc,#148] -> 16352 ; Global 02002FCBCH
     16202    010003F4AH        00080H    lsls     r0,r0,#2
     16204    010003F4CH        01808H    adds     r0,r1,r0
     16206    010003F4EH        06800H    ldr      r0,[r0]
     16208    010003F50H        02800H    cmp      r0,#0
     16210    010003F52H        0D101H    bne.n    2 -> 16216
     16212    010003F54H        0DF68H    svc      104
     16214    010003F56H        00048H    ; LineNo: 72
    IF Werr[termNo] = NIL THEN
     16216    010003F58H        09800H    ldr      r0,[sp]
     16218    010003F5AH        02802H    cmp      r0,#2
     16220    010003F5CH        0D301H    bcc.n    2 -> 16226
     16222    010003F5EH        0DF01H    svc      1
     16224    010003F60H        00049H    ; LineNo: 73
     16226    010003F62H        04920H    ldr      r1,[pc,#128] -> 16356 ; Global 02002FCB4H
     16228    010003F64H        00080H    lsls     r0,r0,#2
     16230    010003F66H        01808H    adds     r0,r1,r0
     16232    010003F68H        06800H    ldr      r0,[r0]
     16234    010003F6AH        02800H    cmp      r0,#0
     16236    010003F6CH        0D001H    beq.n    2 -> 16242
     16238    010003F6EH        0E032H    b        100 -> 16342
     16240    010003F70H        046C0H    nop
      NEW(Werr[termNo]); ASSERT(Werr[termNo] # NIL, Errors.HeapOverflow);
     16242    010003F72H        09800H    ldr      r0,[sp]
     16244    010003F74H        02802H    cmp      r0,#2
     16246    010003F76H        0D301H    bcc.n    2 -> 16252
     16248    010003F78H        0DF01H    svc      1
     16250    010003F7AH        0004AH    ; LineNo: 74
     16252    010003F7CH        04919H    ldr      r1,[pc,#100] -> 16356 ; Global 02002FCB4H
     16254    010003F7EH        00080H    lsls     r0,r0,#2
     16256    010003F80H        01808H    adds     r0,r1,r0
     16258    010003F82H        04916H    ldr      r1,[pc,#88] -> 16348 ; Global 010002514H
     16260    010003F84H    0F7FDFA30H    bl.w     MAU.New
     16264    010003F88H        0E000H    b        0 -> 16268
     16266    010003F8AH        0004AH    ; LineNo: 74
     16268    010003F8CH        09800H    ldr      r0,[sp]
     16270    010003F8EH        02802H    cmp      r0,#2
     16272    010003F90H        0D301H    bcc.n    2 -> 16278
     16274    010003F92H        0DF01H    svc      1
     16276    010003F94H        0004AH    ; LineNo: 74
     16278    010003F96H        04913H    ldr      r1,[pc,#76] -> 16356 ; Global 02002FCB4H
     16280    010003F98H        00080H    lsls     r0,r0,#2
     16282    010003F9AH        01808H    adds     r0,r1,r0
     16284    010003F9CH        06800H    ldr      r0,[r0]
     16286    010003F9EH        02800H    cmp      r0,#0
     16288    010003FA0H        0D101H    bne.n    2 -> 16294
     16290    010003FA2H        0DF6CH    svc      108
     16292    010003FA4H        0004AH    ; LineNo: 74
      TextIO.OpenWriter(Werr[termNo], W[termNo].dev, psp);
     16294    010003FA6H        09800H    ldr      r0,[sp]
     16296    010003FA8H        02802H    cmp      r0,#2
     16298    010003FAAH        0D301H    bcc.n    2 -> 16304
     16300    010003FACH        0DF01H    svc      1
     16302    010003FAEH        0004BH    ; LineNo: 75
     16304    010003FB0H        0490CH    ldr      r1,[pc,#48] -> 16356 ; Global 02002FCB4H
     16306    010003FB2H        00080H    lsls     r0,r0,#2
     16308    010003FB4H        01808H    adds     r0,r1,r0
     16310    010003FB6H        06800H    ldr      r0,[r0]
     16312    010003FB8H        09900H    ldr      r1,[sp]
     16314    010003FBAH        02902H    cmp      r1,#2
     16316    010003FBCH        0D301H    bcc.n    2 -> 16322
     16318    010003FBEH        0DF01H    svc      1
     16320    010003FC0H        0004BH    ; LineNo: 75
     16322    010003FC2H        04A07H    ldr      r2,[pc,#28] -> 16352 ; Global 02002FCBCH
     16324    010003FC4H        00089H    lsls     r1,r1,#2
     16326    010003FC6H        01851H    adds     r1,r2,r1
     16328    010003FC8H        06809H    ldr      r1,[r1]
     16330    010003FCAH        06809H    ldr      r1,[r1]
     16332    010003FCCH        09A01H    ldr      r2,[sp,#4]
     16334    010003FCEH    0F7FEFAB5H    bl.w     TextIO.OpenWriter
     16338    010003FD2H        0E000H    b        0 -> 16342
     16340    010003FD4H        0004BH    ; LineNo: 75
    END
  END OpenErr;
     16342    010003FD6H        0B002H    add      sp,#8
     16344    010003FD8H        0BD00H    pop      { pc }
     16346    010003FDAH        046C0H    nop
     16348    010003FDCH    010002514H    ; Global 010002514H
     16352    010003FE0H    02002FCBCH    ; Global 02002FCBCH
     16356    010003FE4H    02002FCB4H    ; Global 02002FCB4H

PROCEDURE Terminals..init;
BEGIN
     16360    010003FE8H        0B500H    push     { lr }
  W[0] := NIL; W[1] := NIL;
     16362    010003FEAH        04809H    ldr      r0,[pc,#36] -> 16400 ; Global 02002FCBCH
     16364    010003FECH        02100H    movs     r1,#0
     16366    010003FEEH        06001H    str      r1,[r0]
     16368    010003FF0H        04807H    ldr      r0,[pc,#28] -> 16400 ; Global 02002FCBCH
     16370    010003FF2H        02100H    movs     r1,#0
     16372    010003FF4H        06041H    str      r1,[r0,#4]
  R[0] := NIL; R[1] := NIL;
     16374    010003FF6H        04807H    ldr      r0,[pc,#28] -> 16404 ; Global 02002FCACH
     16376    010003FF8H        02100H    movs     r1,#0
     16378    010003FFAH        06001H    str      r1,[r0]
     16380    010003FFCH        04805H    ldr      r0,[pc,#20] -> 16404 ; Global 02002FCACH
     16382    010003FFEH        02100H    movs     r1,#0
     16384    010004000H        06041H    str      r1,[r0,#4]
  Werr[0] := NIL; Werr[1] := NIL
     16386    010004002H        04805H    ldr      r0,[pc,#20] -> 16408 ; Global 02002FCB4H
     16388    010004004H        02100H    movs     r1,#0
     16390    010004006H        06001H    str      r1,[r0]
     16392    010004008H        04803H    ldr      r0,[pc,#12] -> 16408 ; Global 02002FCB4H
END .init;
END Terminals.
     16394    01000400AH        02100H    movs     r1,#0
     16396    01000400CH        06041H    str      r1,[r0,#4]
     16398    01000400EH        0BD00H    pop      { pc }
     16400    010004010H    02002FCBCH    ; Global 02002FCBCH
     16404    010004014H    02002FCACH    ; Global 02002FCACH
     16408    010004018H    02002FCB4H    ; Global 02002FCB4H

MODULE Out;
     16412    01000401CH        00000H    ; Pad

  PROCEDURE Out.Open*(W0, W1: TextIO.Writer);
  BEGIN
     16416    010004020H        0B503H    push     { r0, r1, lr }
    ASSERT(W0 # NIL, Errors.PreCond);
     16418    010004022H        09800H    ldr      r0,[sp]
     16420    010004024H        02800H    cmp      r0,#0
     16422    010004026H        0D101H    bne.n    2 -> 16428
     16424    010004028H        0DF65H    svc      101
     16426    01000402AH        00016H    ; LineNo: 22
    ASSERT(W1 # NIL, Errors.PreCond);
     16428    01000402CH        09801H    ldr      r0,[sp,#4]
     16430    01000402EH        02800H    cmp      r0,#0
     16432    010004030H        0D101H    bne.n    2 -> 16438
     16434    010004032H        0DF65H    svc      101
     16436    010004034H        00017H    ; LineNo: 23
    W[0] := W0;
     16438    010004036H        04804H    ldr      r0,[pc,#16] -> 16456 ; Global 02002FCA4H
     16440    010004038H        09900H    ldr      r1,[sp]
     16442    01000403AH        06001H    str      r1,[r0]
    W[1] := W1
     16444    01000403CH        04802H    ldr      r0,[pc,#8] -> 16456 ; Global 02002FCA4H
  END Open;
     16446    01000403EH        09901H    ldr      r1,[sp,#4]
     16448    010004040H        06041H    str      r1,[r0,#4]
     16450    010004042H        0B002H    add      sp,#8
     16452    010004044H        0BD00H    pop      { pc }
     16454    010004046H        046C0H    nop
     16456    010004048H    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Char*(ch: CHAR);
    VAR cid: INTEGER;
  BEGIN
     16460    01000404CH        0B501H    push     { r0, lr }
     16462    01000404EH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16464    010004050H        04809H    ldr      r0,[pc,#36] -> 16504 ; Const 0D0000000H -805306368
     16466    010004052H        06801H    ldr      r1,[r0]
     16468    010004054H        09100H    str      r1,[sp]
    Texts.Write(W[cid], ch)
     16470    010004056H        09800H    ldr      r0,[sp]
     16472    010004058H        02802H    cmp      r0,#2
     16474    01000405AH        0D301H    bcc.n    2 -> 16480
     16476    01000405CH        0DF01H    svc      1
     16478    01000405EH        00021H    ; LineNo: 33
     16480    010004060H        04906H    ldr      r1,[pc,#24] -> 16508 ; Global 02002FCA4H
     16482    010004062H        00080H    lsls     r0,r0,#2
     16484    010004064H        01808H    adds     r0,r1,r0
     16486    010004066H        06800H    ldr      r0,[r0]
     16488    010004068H        0A901H    add      r1,sp,#4
     16490    01000406AH        07809H    ldrb     r1,[r1]
  END Char;
     16492    01000406CH    0F7FEFC24H    bl.w     Texts.Write
     16496    010004070H        0E000H    b        0 -> 16500
     16498    010004072H        00021H    ; LineNo: 33
     16500    010004074H        0B002H    add      sp,#8
     16502    010004076H        0BD00H    pop      { pc }
     16504    010004078H    0D0000000H    ; Const 0D0000000H -805306368
     16508    01000407CH    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.String*(s: ARRAY OF CHAR);
    VAR cid: INTEGER;
  BEGIN
     16512    010004080H        0B503H    push     { r0, r1, lr }
     16514    010004082H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16516    010004084H        04809H    ldr      r0,[pc,#36] -> 16556 ; Const 0D0000000H -805306368
     16518    010004086H        06801H    ldr      r1,[r0]
     16520    010004088H        09100H    str      r1,[sp]
    Texts.WriteString(W[cid], s)
     16522    01000408AH        09800H    ldr      r0,[sp]
     16524    01000408CH        02802H    cmp      r0,#2
     16526    01000408EH        0D301H    bcc.n    2 -> 16532
     16528    010004090H        0DF01H    svc      1
     16530    010004092H        00029H    ; LineNo: 41
     16532    010004094H        04906H    ldr      r1,[pc,#24] -> 16560 ; Global 02002FCA4H
     16534    010004096H        00080H    lsls     r0,r0,#2
     16536    010004098H        01808H    adds     r0,r1,r0
     16538    01000409AH        06800H    ldr      r0,[r0]
     16540    01000409CH        09901H    ldr      r1,[sp,#4]
     16542    01000409EH        09A02H    ldr      r2,[sp,#8]
  END String;
     16544    0100040A0H    0F7FEFC22H    bl.w     Texts.WriteString
     16548    0100040A4H        0E000H    b        0 -> 16552
     16550    0100040A6H        00029H    ; LineNo: 41
     16552    0100040A8H        0B003H    add      sp,#12
     16554    0100040AAH        0BD00H    pop      { pc }
     16556    0100040ACH    0D0000000H    ; Const 0D0000000H -805306368
     16560    0100040B0H    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Ln*;
    VAR cid: INTEGER;
  BEGIN
     16564    0100040B4H        0B500H    push     { lr }
     16566    0100040B6H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16568    0100040B8H        04808H    ldr      r0,[pc,#32] -> 16604 ; Const 0D0000000H -805306368
     16570    0100040BAH        06801H    ldr      r1,[r0]
     16572    0100040BCH        09100H    str      r1,[sp]
    Texts.WriteLn(W[cid])
     16574    0100040BEH        09800H    ldr      r0,[sp]
     16576    0100040C0H        02802H    cmp      r0,#2
     16578    0100040C2H        0D301H    bcc.n    2 -> 16584
     16580    0100040C4H        0DF01H    svc      1
     16582    0100040C6H        00031H    ; LineNo: 49
     16584    0100040C8H        04905H    ldr      r1,[pc,#20] -> 16608 ; Global 02002FCA4H
     16586    0100040CAH        00080H    lsls     r0,r0,#2
     16588    0100040CCH        01808H    adds     r0,r1,r0
     16590    0100040CEH        06800H    ldr      r0,[r0]
  END Ln;
     16592    0100040D0H    0F7FEFC36H    bl.w     Texts.WriteLn
     16596    0100040D4H        0E000H    b        0 -> 16600
     16598    0100040D6H        00031H    ; LineNo: 49
     16600    0100040D8H        0B001H    add      sp,#4
     16602    0100040DAH        0BD00H    pop      { pc }
     16604    0100040DCH    0D0000000H    ; Const 0D0000000H -805306368
     16608    0100040E0H    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Int*(n, width: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     16612    0100040E4H        0B503H    push     { r0, r1, lr }
     16614    0100040E6H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16616    0100040E8H        04809H    ldr      r0,[pc,#36] -> 16656 ; Const 0D0000000H -805306368
     16618    0100040EAH        06801H    ldr      r1,[r0]
     16620    0100040ECH        09100H    str      r1,[sp]
    Texts.WriteInt(W[cid], n, width)
     16622    0100040EEH        09800H    ldr      r0,[sp]
     16624    0100040F0H        02802H    cmp      r0,#2
     16626    0100040F2H        0D301H    bcc.n    2 -> 16632
     16628    0100040F4H        0DF01H    svc      1
     16630    0100040F6H        00039H    ; LineNo: 57
     16632    0100040F8H        04906H    ldr      r1,[pc,#24] -> 16660 ; Global 02002FCA4H
     16634    0100040FAH        00080H    lsls     r0,r0,#2
     16636    0100040FCH        01808H    adds     r0,r1,r0
     16638    0100040FEH        06800H    ldr      r0,[r0]
     16640    010004100H        09901H    ldr      r1,[sp,#4]
     16642    010004102H        09A02H    ldr      r2,[sp,#8]
  END Int;
     16644    010004104H    0F7FEFC62H    bl.w     Texts.WriteInt
     16648    010004108H        0E000H    b        0 -> 16652
     16650    01000410AH        00039H    ; LineNo: 57
     16652    01000410CH        0B003H    add      sp,#12
     16654    01000410EH        0BD00H    pop      { pc }
     16656    010004110H    0D0000000H    ; Const 0D0000000H -805306368
     16660    010004114H    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Hex*(n, width: INTEGER);
   VAR cid: INTEGER;
  BEGIN
     16664    010004118H        0B503H    push     { r0, r1, lr }
     16666    01000411AH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16668    01000411CH        04809H    ldr      r0,[pc,#36] -> 16708 ; Const 0D0000000H -805306368
     16670    01000411EH        06801H    ldr      r1,[r0]
     16672    010004120H        09100H    str      r1,[sp]
    Texts.WriteHex(W[cid], n, width)
     16674    010004122H        09800H    ldr      r0,[sp]
     16676    010004124H        02802H    cmp      r0,#2
     16678    010004126H        0D301H    bcc.n    2 -> 16684
     16680    010004128H        0DF01H    svc      1
     16682    01000412AH        00041H    ; LineNo: 65
     16684    01000412CH        04906H    ldr      r1,[pc,#24] -> 16712 ; Global 02002FCA4H
     16686    01000412EH        00080H    lsls     r0,r0,#2
     16688    010004130H        01808H    adds     r0,r1,r0
     16690    010004132H        06800H    ldr      r0,[r0]
     16692    010004134H        09901H    ldr      r1,[sp,#4]
     16694    010004136H        09A02H    ldr      r2,[sp,#8]
  END Hex;
     16696    010004138H    0F7FEFC60H    bl.w     Texts.WriteHex
     16700    01000413CH        0E000H    b        0 -> 16704
     16702    01000413EH        00041H    ; LineNo: 65
     16704    010004140H        0B003H    add      sp,#12
     16706    010004142H        0BD00H    pop      { pc }
     16708    010004144H    0D0000000H    ; Const 0D0000000H -805306368
     16712    010004148H    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Bin*(n, width: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     16716    01000414CH        0B503H    push     { r0, r1, lr }
     16718    01000414EH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16720    010004150H        04809H    ldr      r0,[pc,#36] -> 16760 ; Const 0D0000000H -805306368
     16722    010004152H        06801H    ldr      r1,[r0]
     16724    010004154H        09100H    str      r1,[sp]
    Texts.WriteBin(W[cid], n, width)
     16726    010004156H        09800H    ldr      r0,[sp]
     16728    010004158H        02802H    cmp      r0,#2
     16730    01000415AH        0D301H    bcc.n    2 -> 16736
     16732    01000415CH        0DF01H    svc      1
     16734    01000415EH        00049H    ; LineNo: 73
     16736    010004160H        04906H    ldr      r1,[pc,#24] -> 16764 ; Global 02002FCA4H
     16738    010004162H        00080H    lsls     r0,r0,#2
     16740    010004164H        01808H    adds     r0,r1,r0
     16742    010004166H        06800H    ldr      r0,[r0]
     16744    010004168H        09901H    ldr      r1,[sp,#4]
     16746    01000416AH        09A02H    ldr      r2,[sp,#8]
  END Bin;
     16748    01000416CH    0F7FEFC5EH    bl.w     Texts.WriteBin
     16752    010004170H        0E000H    b        0 -> 16756
     16754    010004172H        00049H    ; LineNo: 73
     16756    010004174H        0B003H    add      sp,#12
     16758    010004176H        0BD00H    pop      { pc }
     16760    010004178H    0D0000000H    ; Const 0D0000000H -805306368
     16764    01000417CH    02002FCA4H    ; Global 02002FCA4H

  PROCEDURE Out.Flush*;
    VAR cid: INTEGER;
  BEGIN
     16768    010004180H        0B500H    push     { lr }
     16770    010004182H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16772    010004184H        04808H    ldr      r0,[pc,#32] -> 16808 ; Const 0D0000000H -805306368
     16774    010004186H        06801H    ldr      r1,[r0]
     16776    010004188H        09100H    str      r1,[sp]
    Texts.FlushOut(W[cid])
     16778    01000418AH        09800H    ldr      r0,[sp]
     16780    01000418CH        02802H    cmp      r0,#2
     16782    01000418EH        0D301H    bcc.n    2 -> 16788
     16784    010004190H        0DF01H    svc      1
     16786    010004192H        00051H    ; LineNo: 81
     16788    010004194H        04905H    ldr      r1,[pc,#20] -> 16812 ; Global 02002FCA4H
     16790    010004196H        00080H    lsls     r0,r0,#2
     16792    010004198H        01808H    adds     r0,r1,r0
     16794    01000419AH        06800H    ldr      r0,[r0]
  END Flush;
     16796    01000419CH    0F7FEFDC4H    bl.w     Texts.FlushOut
     16800    0100041A0H        0E000H    b        0 -> 16804
     16802    0100041A2H        00051H    ; LineNo: 81
     16804    0100041A4H        0B001H    add      sp,#4
     16806    0100041A6H        0BD00H    pop      { pc }
     16808    0100041A8H    0D0000000H    ; Const 0D0000000H -805306368
     16812    0100041ACH    02002FCA4H    ; Global 02002FCA4H

PROCEDURE Out..init;
BEGIN
     16816    0100041B0H        0B500H    push     { lr }
  W[0] := NIL; W[1] := NIL
     16818    0100041B2H        04803H    ldr      r0,[pc,#12] -> 16832 ; Global 02002FCA4H
     16820    0100041B4H        02100H    movs     r1,#0
     16822    0100041B6H        06001H    str      r1,[r0]
     16824    0100041B8H        04801H    ldr      r0,[pc,#4] -> 16832 ; Global 02002FCA4H
END .init;
END Out.
     16826    0100041BAH        02100H    movs     r1,#0
     16828    0100041BCH        06041H    str      r1,[r0,#4]
     16830    0100041BEH        0BD00H    pop      { pc }
     16832    0100041C0H    02002FCA4H    ; Global 02002FCA4H

MODULE In;
     16836    0100041C4H        00000H    ; Pad

  PROCEDURE In.Open*(R0, R1: TextIO.Reader);
  BEGIN
     16840    0100041C8H        0B503H    push     { r0, r1, lr }
    ASSERT(R0 # NIL, Errors.PreCond);
     16842    0100041CAH        09800H    ldr      r0,[sp]
     16844    0100041CCH        02800H    cmp      r0,#0
     16846    0100041CEH        0D101H    bne.n    2 -> 16852
     16848    0100041D0H        0DF65H    svc      101
     16850    0100041D2H        0001DH    ; LineNo: 29
    ASSERT(R1 # NIL, Errors.PreCond);
     16852    0100041D4H        09801H    ldr      r0,[sp,#4]
     16854    0100041D6H        02800H    cmp      r0,#0
     16856    0100041D8H        0D101H    bne.n    2 -> 16862
     16858    0100041DAH        0DF65H    svc      101
     16860    0100041DCH        0001EH    ; LineNo: 30
    R[0] := R0;
     16862    0100041DEH        04804H    ldr      r0,[pc,#16] -> 16880 ; Global 02002FC9CH
     16864    0100041E0H        09900H    ldr      r1,[sp]
     16866    0100041E2H        06001H    str      r1,[r0]
    R[1] := R1
     16868    0100041E4H        04802H    ldr      r0,[pc,#8] -> 16880 ; Global 02002FC9CH
  END Open;
     16870    0100041E6H        09901H    ldr      r1,[sp,#4]
     16872    0100041E8H        06041H    str      r1,[r0,#4]
     16874    0100041EAH        0B002H    add      sp,#8
     16876    0100041ECH        0BD00H    pop      { pc }
     16878    0100041EEH        046C0H    nop
     16880    0100041F0H    02002FC9CH    ; Global 02002FC9CH

  PROCEDURE In.String*(VAR str: ARRAY OF CHAR; VAR res: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     16884    0100041F4H        0B507H    push     { r0, r1, r2, lr }
     16886    0100041F6H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16888    0100041F8H        0480AH    ldr      r0,[pc,#40] -> 16932 ; Const 0D0000000H -805306368
     16890    0100041FAH        06801H    ldr      r1,[r0]
     16892    0100041FCH        09100H    str      r1,[sp]
    Texts.ReadString(R[cid], str, res)
     16894    0100041FEH        09800H    ldr      r0,[sp]
     16896    010004200H        02802H    cmp      r0,#2
     16898    010004202H        0D301H    bcc.n    2 -> 16904
     16900    010004204H        0DF01H    svc      1
     16902    010004206H        00028H    ; LineNo: 40
     16904    010004208H        04907H    ldr      r1,[pc,#28] -> 16936 ; Global 02002FC9CH
     16906    01000420AH        00080H    lsls     r0,r0,#2
     16908    01000420CH        01808H    adds     r0,r1,r0
     16910    01000420EH        06800H    ldr      r0,[r0]
     16912    010004210H        09901H    ldr      r1,[sp,#4]
     16914    010004212H        09A02H    ldr      r2,[sp,#8]
     16916    010004214H        09B03H    ldr      r3,[sp,#12]
  END String;
     16918    010004216H    0F7FEFD37H    bl.w     Texts.ReadString
     16922    01000421AH        0E000H    b        0 -> 16926
     16924    01000421CH        00028H    ; LineNo: 40
     16926    01000421EH        0B004H    add      sp,#16
     16928    010004220H        0BD00H    pop      { pc }
     16930    010004222H        046C0H    nop
     16932    010004224H    0D0000000H    ; Const 0D0000000H -805306368
     16936    010004228H    02002FC9CH    ; Global 02002FC9CH

  PROCEDURE In.Int*(VAR int, res: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     16940    01000422CH        0B503H    push     { r0, r1, lr }
     16942    01000422EH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     16944    010004230H        04809H    ldr      r0,[pc,#36] -> 16984 ; Const 0D0000000H -805306368
     16946    010004232H        06801H    ldr      r1,[r0]
     16948    010004234H        09100H    str      r1,[sp]
    Texts.ReadInt(R[cid], int, res)
     16950    010004236H        09800H    ldr      r0,[sp]
     16952    010004238H        02802H    cmp      r0,#2
     16954    01000423AH        0D301H    bcc.n    2 -> 16960
     16956    01000423CH        0DF01H    svc      1
     16958    01000423EH        00030H    ; LineNo: 48
     16960    010004240H        04906H    ldr      r1,[pc,#24] -> 16988 ; Global 02002FC9CH
     16962    010004242H        00080H    lsls     r0,r0,#2
     16964    010004244H        01808H    adds     r0,r1,r0
     16966    010004246H        06800H    ldr      r0,[r0]
     16968    010004248H        09901H    ldr      r1,[sp,#4]
     16970    01000424AH        09A02H    ldr      r2,[sp,#8]
  END Int;
     16972    01000424CH    0F7FEFD3EH    bl.w     Texts.ReadInt
     16976    010004250H        0E000H    b        0 -> 16980
     16978    010004252H        00030H    ; LineNo: 48
     16980    010004254H        0B003H    add      sp,#12
     16982    010004256H        0BD00H    pop      { pc }
     16984    010004258H    0D0000000H    ; Const 0D0000000H -805306368
     16988    01000425CH    02002FC9CH    ; Global 02002FC9CH

PROCEDURE In..init;
BEGIN
     16992    010004260H        0B500H    push     { lr }
  R[0] := NIL; R[1] := NIL
     16994    010004262H        04803H    ldr      r0,[pc,#12] -> 17008 ; Global 02002FC9CH
     16996    010004264H        02100H    movs     r1,#0
     16998    010004266H        06001H    str      r1,[r0]
     17000    010004268H        04801H    ldr      r0,[pc,#4] -> 17008 ; Global 02002FC9CH
END .init;
END In.
     17002    01000426AH        02100H    movs     r1,#0
     17004    01000426CH        06041H    str      r1,[r0,#4]
     17006    01000426EH        0BD00H    pop      { pc }
     17008    010004270H    02002FC9CH    ; Global 02002FC9CH

MODULE UARTstr;
     17012    010004274H        00000H    ; Pad

  PROCEDURE* UARTstr.PutChar*(dev: TextIO.Device; ch: CHAR);
    VAR dev0: UARTdev.Device;
  BEGIN
     17016    010004278H        0B503H    push     { r0, r1, lr }
     17018    01000427AH        0B081H    sub      sp,#4
    dev0 := dev(UARTdev.Device);
     17020    01000427CH        09801H    ldr      r0,[sp,#4]
     17022    01000427EH        04A0AH    ldr      r2,[pc,#40] -> 17064 ; Const 0FFFFFFFCH -4
     17024    010004280H        05881H    ldr      r1,[r0,r2]
     17026    010004282H        06849H    ldr      r1,[r1,#4]
     17028    010004284H        04A09H    ldr      r2,[pc,#36] -> 17068 ; Global 010003964H
     17030    010004286H        04291H    cmp      r1,r2
     17032    010004288H        0D001H    beq.n    2 -> 17038
     17034    01000428AH        0DF02H    svc      2
     17036    01000428CH        00014H    ; LineNo: 20
     17038    01000428EH        09000H    str      r0,[sp]
    REPEAT UNTIL ~SYSTEM.BIT(dev0.FR, UARTdev.FR_TXFF);  
     17040    010004290H        09800H    ldr      r0,[sp]
     17042    010004292H        06A40H    ldr      r0,[r0,#36]
     17044    010004294H        06801H    ldr      r1,[r0]
     17046    010004296H        00689H    lsls     r1,r1,#26
     17048    010004298H        0D4FAH    bmi.n    -12 -> 17040
    SYSTEM.PUT(dev0.TDR, ch)
  END PutChar;
     17050    01000429AH        09800H    ldr      r0,[sp]
     17052    01000429CH        069C0H    ldr      r0,[r0,#28]
     17054    01000429EH        0A902H    add      r1,sp,#8
     17056    0100042A0H        07809H    ldrb     r1,[r1]
     17058    0100042A2H        07001H    strb     r1,[r0]
     17060    0100042A4H        0B003H    add      sp,#12
     17062    0100042A6H        0BD00H    pop      { pc }
     17064    0100042A8H    0FFFFFFFCH    ; Const 0FFFFFFFCH -4
     17068    0100042ACH    010003964H    ; Global 010003964H

  PROCEDURE UARTstr.PutString*(dev: TextIO.Device; s: ARRAY OF CHAR; numChar: INTEGER);
    VAR dev0: UARTdev.Device; i: INTEGER;
  BEGIN
     17072    0100042B0H        0B50FH    push     { r0, r1, r2, r3, lr }
     17074    0100042B2H        0B082H    sub      sp,#8
    dev0 := dev(UARTdev.Device);
     17076    0100042B4H        09802H    ldr      r0,[sp,#8]
     17078    0100042B6H        04A19H    ldr      r2,[pc,#100] -> 17180 ; Const 0FFFFFFFCH -4
     17080    0100042B8H        05881H    ldr      r1,[r0,r2]
     17082    0100042BAH        06849H    ldr      r1,[r1,#4]
     17084    0100042BCH        04A18H    ldr      r2,[pc,#96] -> 17184 ; Global 010003964H
     17086    0100042BEH        04291H    cmp      r1,r2
     17088    0100042C0H        0D001H    beq.n    2 -> 17094
     17090    0100042C2H        0DF02H    svc      2
     17092    0100042C4H        0001DH    ; LineNo: 29
     17094    0100042C6H        09000H    str      r0,[sp]
    IF numChar > LEN(s) THEN numChar := LEN(s) END;
     17096    0100042C8H        09805H    ldr      r0,[sp,#20]
     17098    0100042CAH        09904H    ldr      r1,[sp,#16]
     17100    0100042CCH        04288H    cmp      r0,r1
     17102    0100042CEH        0DC01H    bgt.n    2 -> 17108
     17104    0100042D0H        0E002H    b        4 -> 17112
     17106    0100042D2H        046C0H    nop
     17108    0100042D4H        09804H    ldr      r0,[sp,#16]
     17110    0100042D6H        09005H    str      r0,[sp,#20]
    i := 0;
     17112    0100042D8H        02000H    movs     r0,#0
     17114    0100042DAH        09001H    str      r0,[sp,#4]
    WHILE i < numChar DO
     17116    0100042DCH        09801H    ldr      r0,[sp,#4]
     17118    0100042DEH        09905H    ldr      r1,[sp,#20]
     17120    0100042E0H        04288H    cmp      r0,r1
     17122    0100042E2H        0DB01H    blt.n    2 -> 17128
     17124    0100042E4H        0E017H    b        46 -> 17174
     17126    0100042E6H        046C0H    nop
      IF ~SYSTEM.BIT(dev0.FR, UARTdev.FR_TXFF) THEN  
     17128    0100042E8H        09800H    ldr      r0,[sp]
     17130    0100042EAH        06A40H    ldr      r0,[r0,#36]
     17132    0100042ECH        06801H    ldr      r1,[r0]
     17134    0100042EEH        00689H    lsls     r1,r1,#26
     17136    0100042F0H        0D501H    bpl.n    2 -> 17142
     17138    0100042F2H        0E00FH    b        30 -> 17172
     17140    0100042F4H        046C0H    nop
        SYSTEM.PUT(dev0.TDR, s[i]);
     17142    0100042F6H        09801H    ldr      r0,[sp,#4]
     17144    0100042F8H        09904H    ldr      r1,[sp,#16]
     17146    0100042FAH        04288H    cmp      r0,r1
     17148    0100042FCH        0D301H    bcc.n    2 -> 17154
     17150    0100042FEH        0DF01H    svc      1
     17152    010004300H        00022H    ; LineNo: 34
     17154    010004302H        09903H    ldr      r1,[sp,#12]
     17156    010004304H        01808H    adds     r0,r1,r0
     17158    010004306H        09900H    ldr      r1,[sp]
     17160    010004308H        069C9H    ldr      r1,[r1,#28]
     17162    01000430AH        07800H    ldrb     r0,[r0]
     17164    01000430CH        07008H    strb     r0,[r1]
        INC(i)
      END
     17166    01000430EH        09801H    ldr      r0,[sp,#4]
     17168    010004310H        03001H    adds     r0,#1
     17170    010004312H        09001H    str      r0,[sp,#4]
    END
     17172    010004314H        0E7E2H    b        -60 -> 17116
  END PutString;
     17174    010004316H        0B006H    add      sp,#24
     17176    010004318H        0BD00H    pop      { pc }
     17178    01000431AH        046C0H    nop
     17180    01000431CH    0FFFFFFFCH    ; Const 0FFFFFFFCH -4
     17184    010004320H    010003964H    ; Global 010003964H

  PROCEDURE* UARTstr.GetChar*(dev: TextIO.Device; VAR ch: CHAR);
    VAR dev0: UARTdev.Device;
  BEGIN
     17188    010004324H        0B503H    push     { r0, r1, lr }
     17190    010004326H        0B081H    sub      sp,#4
    dev0 := dev(UARTdev.Device);
     17192    010004328H        09801H    ldr      r0,[sp,#4]
     17194    01000432AH        04A0AH    ldr      r2,[pc,#40] -> 17236 ; Const 0FFFFFFFCH -4
     17196    01000432CH        05881H    ldr      r1,[r0,r2]
     17198    01000432EH        06849H    ldr      r1,[r1,#4]
     17200    010004330H        04A09H    ldr      r2,[pc,#36] -> 17240 ; Global 010003964H
     17202    010004332H        04291H    cmp      r1,r2
     17204    010004334H        0D001H    beq.n    2 -> 17210
     17206    010004336H        0DF02H    svc      2
     17208    010004338H        0002CH    ; LineNo: 44
     17210    01000433AH        09000H    str      r0,[sp]
    REPEAT UNTIL ~SYSTEM.BIT(dev0.FR, UARTdev.FR_RXFE);
     17212    01000433CH        09800H    ldr      r0,[sp]
     17214    01000433EH        06A40H    ldr      r0,[r0,#36]
     17216    010004340H        06801H    ldr      r1,[r0]
     17218    010004342H        006C9H    lsls     r1,r1,#27
     17220    010004344H        0D4FAH    bmi.n    -12 -> 17212
    SYSTEM.GET(dev0.RDR, ch)
  END GetChar;
     17222    010004346H        09800H    ldr      r0,[sp]
     17224    010004348H        06A00H    ldr      r0,[r0,#32]
     17226    01000434AH        07801H    ldrb     r1,[r0]
     17228    01000434CH        09A02H    ldr      r2,[sp,#8]
     17230    01000434EH        07011H    strb     r1,[r2]
     17232    010004350H        0B003H    add      sp,#12
     17234    010004352H        0BD00H    pop      { pc }
     17236    010004354H    0FFFFFFFCH    ; Const 0FFFFFFFCH -4
     17240    010004358H    010003964H    ; Global 010003964H

  PROCEDURE UARTstr.GetString*(dev: TextIO.Device; VAR s: ARRAY OF CHAR; VAR numCh, res: INTEGER);
    VAR dev0: UARTdev.Device; bufLimit: INTEGER; ch: CHAR;
  BEGIN
     17244    01000435CH        0B51FH    push     { r0, r1, r2, r3, r4, lr }
     17246    01000435EH        0B083H    sub      sp,#12
    dev0 := dev(UARTdev.Device);
     17248    010004360H        09803H    ldr      r0,[sp,#12]
     17250    010004362H        04A32H    ldr      r2,[pc,#200] -> 17452 ; Const 0FFFFFFFCH -4
     17252    010004364H        05881H    ldr      r1,[r0,r2]
     17254    010004366H        06849H    ldr      r1,[r1,#4]
     17256    010004368H        04A31H    ldr      r2,[pc,#196] -> 17456 ; Global 010003964H
     17258    01000436AH        04291H    cmp      r1,r2
     17260    01000436CH        0D001H    beq.n    2 -> 17266
     17262    01000436EH        0DF02H    svc      2
     17264    010004370H        00035H    ; LineNo: 53
     17266    010004372H        09000H    str      r0,[sp]
    bufLimit := LEN(s) - 1;  
     17268    010004374H        09805H    ldr      r0,[sp,#20]
     17270    010004376H        03801H    subs     r0,#1
     17272    010004378H        09001H    str      r0,[sp,#4]
    res := TextIO.NoError;
     17274    01000437AH        02000H    movs     r0,#0
     17276    01000437CH        09907H    ldr      r1,[sp,#28]
     17278    01000437EH        06008H    str      r0,[r1]
    numCh := 0;
     17280    010004380H        02000H    movs     r0,#0
     17282    010004382H        09906H    ldr      r1,[sp,#24]
     17284    010004384H        06008H    str      r0,[r1]
    GetChar(dev, ch);
     17286    010004386H        09803H    ldr      r0,[sp,#12]
     17288    010004388H        0A902H    add      r1,sp,#8
     17290    01000438AH    0F7FFFFCBH    bl.w     UARTstr.GetChar
     17294    01000438EH        0E000H    b        0 -> 17298
     17296    010004390H        00039H    ; LineNo: 57
    WHILE (ch >= " ") & (numCh < bufLimit) DO
     17298    010004392H        0A802H    add      r0,sp,#8
     17300    010004394H        07800H    ldrb     r0,[r0]
     17302    010004396H        02820H    cmp      r0,#32
     17304    010004398H        0DA01H    bge.n    2 -> 17310
     17306    01000439AH        0E01EH    b        60 -> 17370
     17308    01000439CH        046C0H    nop
     17310    01000439EH        09806H    ldr      r0,[sp,#24]
     17312    0100043A0H        06800H    ldr      r0,[r0]
     17314    0100043A2H        09901H    ldr      r1,[sp,#4]
     17316    0100043A4H        04288H    cmp      r0,r1
     17318    0100043A6H        0DB01H    blt.n    2 -> 17324
     17320    0100043A8H        0E017H    b        46 -> 17370
     17322    0100043AAH        046C0H    nop
      s[numCh] := ch;
     17324    0100043ACH        09806H    ldr      r0,[sp,#24]
     17326    0100043AEH        06800H    ldr      r0,[r0]
     17328    0100043B0H        09905H    ldr      r1,[sp,#20]
     17330    0100043B2H        04288H    cmp      r0,r1
     17332    0100043B4H        0D301H    bcc.n    2 -> 17338
     17334    0100043B6H        0DF01H    svc      1
     17336    0100043B8H        0003BH    ; LineNo: 59
     17338    0100043BAH        09904H    ldr      r1,[sp,#16]
     17340    0100043BCH        01808H    adds     r0,r1,r0
     17342    0100043BEH        0A902H    add      r1,sp,#8
     17344    0100043C0H        07809H    ldrb     r1,[r1]
     17346    0100043C2H        07001H    strb     r1,[r0]
      INC(numCh);
     17348    0100043C4H        09806H    ldr      r0,[sp,#24]
     17350    0100043C6H        06801H    ldr      r1,[r0]
     17352    0100043C8H        03101H    adds     r1,#1
     17354    0100043CAH        06001H    str      r1,[r0]
      GetChar(dev, ch)
     17356    0100043CCH        09803H    ldr      r0,[sp,#12]
     17358    0100043CEH        0A902H    add      r1,sp,#8
    END;
     17360    0100043D0H    0F7FFFFA8H    bl.w     UARTstr.GetChar
     17364    0100043D4H        0E000H    b        0 -> 17368
     17366    0100043D6H        0003DH    ; LineNo: 61
     17368    0100043D8H        0E7DBH    b        -74 -> 17298
    s[numCh] := 0X;
     17370    0100043DAH        09806H    ldr      r0,[sp,#24]
     17372    0100043DCH        06800H    ldr      r0,[r0]
     17374    0100043DEH        09905H    ldr      r1,[sp,#20]
     17376    0100043E0H        04288H    cmp      r0,r1
     17378    0100043E2H        0D301H    bcc.n    2 -> 17384
     17380    0100043E4H        0DF01H    svc      1
     17382    0100043E6H        0003FH    ; LineNo: 63
     17384    0100043E8H        09904H    ldr      r1,[sp,#16]
     17386    0100043EAH        01808H    adds     r0,r1,r0
     17388    0100043ECH        02100H    movs     r1,#0
     17390    0100043EEH        07001H    strb     r1,[r0]
    IF ch >= " "  THEN
     17392    0100043F0H        0A802H    add      r0,sp,#8
     17394    0100043F2H        07800H    ldrb     r0,[r0]
     17396    0100043F4H        02820H    cmp      r0,#32
     17398    0100043F6H        0DA01H    bge.n    2 -> 17404
     17400    0100043F8H        0E016H    b        44 -> 17448
     17402    0100043FAH        046C0H    nop
      res := TextIO.BufferOverflow;
     17404    0100043FCH        02001H    movs     r0,#1
     17406    0100043FEH        09907H    ldr      r1,[sp,#28]
     17408    010004400H        06008H    str      r0,[r1]
      GetChar(dev, ch);
     17410    010004402H        09803H    ldr      r0,[sp,#12]
     17412    010004404H        0A902H    add      r1,sp,#8
     17414    010004406H    0F7FFFF8DH    bl.w     UARTstr.GetChar
     17418    01000440AH        0E000H    b        0 -> 17422
     17420    01000440CH        00043H    ; LineNo: 67
      WHILE ch >= " " DO
     17422    01000440EH        0A802H    add      r0,sp,#8
     17424    010004410H        07800H    ldrb     r0,[r0]
     17426    010004412H        02820H    cmp      r0,#32
     17428    010004414H        0DA01H    bge.n    2 -> 17434
     17430    010004416H        0E007H    b        14 -> 17448
     17432    010004418H        046C0H    nop
        GetChar(dev, ch)
     17434    01000441AH        09803H    ldr      r0,[sp,#12]
     17436    01000441CH        0A902H    add      r1,sp,#8
      END;
     17438    01000441EH    0F7FFFF81H    bl.w     UARTstr.GetChar
     17442    010004422H        0E000H    b        0 -> 17446
     17444    010004424H        00045H    ; LineNo: 69
     17446    010004426H        0E7F2H    b        -28 -> 17422
    END
  END GetString;
     17448    010004428H        0B008H    add      sp,#32
     17450    01000442AH        0BD00H    pop      { pc }
     17452    01000442CH    0FFFFFFFCH    ; Const 0FFFFFFFCH -4
     17456    010004430H    010003964H    ; Global 010003964H

  PROCEDURE UARTstr.DeviceStatus*(dev: TextIO.Device): SET;
    VAR dev0: UARTdev.Device;
  BEGIN
     17460    010004434H        0B501H    push     { r0, lr }
     17462    010004436H        0B081H    sub      sp,#4
    dev0 := dev(UARTdev.Device);
     17464    010004438H        09801H    ldr      r0,[sp,#4]
     17466    01000443AH        04A08H    ldr      r2,[pc,#32] -> 17500 ; Const 0FFFFFFFCH -4
     17468    01000443CH        05881H    ldr      r1,[r0,r2]
     17470    01000443EH        06849H    ldr      r1,[r1,#4]
     17472    010004440H        04A07H    ldr      r2,[pc,#28] -> 17504 ; Global 010003964H
     17474    010004442H        04291H    cmp      r1,r2
     17476    010004444H        0D001H    beq.n    2 -> 17482
     17478    010004446H        0DF02H    svc      2
     17480    010004448H        00053H    ; LineNo: 83
     17482    01000444AH        09000H    str      r0,[sp]
    RETURN UARTdev.Flags(dev0)
     17484    01000444CH        09800H    ldr      r0,[sp]
  END DeviceStatus;
     17486    01000444EH    0F7FFFC1BH    bl.w     UARTdev.Flags
     17490    010004452H        0E000H    b        0 -> 17494
     17492    010004454H        00053H    ; LineNo: 83
     17494    010004456H        0B002H    add      sp,#8
     17496    010004458H        0BD00H    pop      { pc }
     17498    01000445AH        046C0H    nop
     17500    01000445CH    0FFFFFFFCH    ; Const 0FFFFFFFCH -4
     17504    010004460H    010003964H    ; Global 010003964H

PROCEDURE UARTstr..init;
END .init;
END UARTstr;
     17508    010004464H        0B500H    push     { lr }
     17510    010004466H        0BD00H    pop      { pc }

MODULE Main;
     17512    010004468H        00000H    ; Pad

  PROCEDURE Main.configPins(txPinNo, rxPinNo: INTEGER);
  BEGIN
     17516    01000446CH        0B503H    push     { r0, r1, lr }
    GPIO.SetFunction(txPinNo, GPIO.Fuart);
     17518    01000446EH        09800H    ldr      r0,[sp]
     17520    010004470H        02102H    movs     r1,#2
     17522    010004472H    0F7FCFCE7H    bl.w     GPIO.SetFunction
     17526    010004476H        0E000H    b        0 -> 17530
     17528    010004478H        00025H    ; LineNo: 37
    GPIO.SetFunction(rxPinNo, GPIO.Fuart)
     17530    01000447AH        09801H    ldr      r0,[sp,#4]
     17532    01000447CH        02102H    movs     r1,#2
  END configPins;
     17534    01000447EH    0F7FCFCE1H    bl.w     GPIO.SetFunction
     17538    010004482H        0E000H    b        0 -> 17542
     17540    010004484H        00026H    ; LineNo: 38
     17542    010004486H        0B002H    add      sp,#8
     17544    010004488H        0BD00H    pop      { pc }
     17546    01000448AH        046C0H    nop

  PROCEDURE Main.init;
    VAR
      uartDev0, uartDev1: UARTdev.Device;
      uartCfg: UARTdev.DeviceCfg;
  BEGIN
     17548    01000448CH        0B500H    push     { lr }
     17550    01000448EH        0B089H    sub      sp,#36
    UARTdev.GetBaseCfg(uartCfg);
     17552    010004490H        0A802H    add      r0,sp,#8
     17554    010004492H        04937H    ldr      r1,[pc,#220] -> 17776 ; Global 010003978H
     17556    010004494H    0F7FFFC02H    bl.w     UARTdev.GetBaseCfg
     17560    010004498H        0E000H    b        0 -> 17564
     17562    01000449AH        00030H    ; LineNo: 48
    uartCfg.fifoEn := UARTdev.Enabled;
     17564    01000449CH        02001H    movs     r0,#1
     17566    01000449EH        09004H    str      r0,[sp,#16]
    configPins(UART0_TxPinNo, UART0_RxPinNo);
     17568    0100044A0H        02000H    movs     r0,#0
     17570    0100044A2H        02101H    movs     r1,#1
     17572    0100044A4H    0F7FFFFE2H    bl.w     Main.configPins
     17576    0100044A8H        0E000H    b        0 -> 17580
     17578    0100044AAH        00034H    ; LineNo: 52
    configPins(UART1_TxPinNo, UART1_RxPinNo);
     17580    0100044ACH        02004H    movs     r0,#4
     17582    0100044AEH        02105H    movs     r1,#5
     17584    0100044B0H    0F7FFFFDCH    bl.w     Main.configPins
     17588    0100044B4H        0E000H    b        0 -> 17592
     17590    0100044B6H        00035H    ; LineNo: 53
    Terminals.InitUART(UART0, uartCfg, Baudrate0, uartDev0);
     17592    0100044B8H        02000H    movs     r0,#0
     17594    0100044BAH        0A902H    add      r1,sp,#8
     17596    0100044BCH        04A2CH    ldr      r2,[pc,#176] -> 17776 ; Global 010003978H
     17598    0100044BEH        0234BH    movs     r3,#75
     17600    0100044C0H        0025BH    lsls     r3,r3,#9
     17602    0100044C2H        0466CH    mov      r4,sp
     17604    0100044C4H    0F7FFFC76H    bl.w     Terminals.InitUART
     17608    0100044C8H        0E000H    b        0 -> 17612
     17610    0100044CAH        00038H    ; LineNo: 56
    Terminals.Open(TERM0, uartDev0, UARTstr.PutString, UARTstr.GetString);
     17612    0100044CCH        02000H    movs     r0,#0
     17614    0100044CEH        09900H    ldr      r1,[sp]
     17616    0100044D0H        04A28H    ldr      r2,[pc,#160] -> 17780 ; Global 0100042B0H
     17618    0100044D2H        04B29H    ldr      r3,[pc,#164] -> 17784 ; Global 01000435CH
     17620    0100044D4H    0F7FFFC96H    bl.w     Terminals.Open
     17624    0100044D8H        0E000H    b        0 -> 17628
     17626    0100044DAH        00039H    ; LineNo: 57
    Terminals.InitUART(UART1, uartCfg, Baudrate1, uartDev1);
     17628    0100044DCH        02001H    movs     r0,#1
     17630    0100044DEH        0A902H    add      r1,sp,#8
     17632    0100044E0H        04A23H    ldr      r2,[pc,#140] -> 17776 ; Global 010003978H
     17634    0100044E2H        0234BH    movs     r3,#75
     17636    0100044E4H        0025BH    lsls     r3,r3,#9
     17638    0100044E6H        0AC01H    add      r4,sp,#4
     17640    0100044E8H    0F7FFFC64H    bl.w     Terminals.InitUART
     17644    0100044ECH        0E000H    b        0 -> 17648
     17646    0100044EEH        0003AH    ; LineNo: 58
    Terminals.Open(TERM1, uartDev1, UARTstr.PutString, UARTstr.GetString);
     17648    0100044F0H        02001H    movs     r0,#1
     17650    0100044F2H        09901H    ldr      r1,[sp,#4]
     17652    0100044F4H        04A1FH    ldr      r2,[pc,#124] -> 17780 ; Global 0100042B0H
     17654    0100044F6H        04B20H    ldr      r3,[pc,#128] -> 17784 ; Global 01000435CH
     17656    0100044F8H    0F7FFFC84H    bl.w     Terminals.Open
     17660    0100044FCH        0E000H    b        0 -> 17664
     17662    0100044FEH        0003BH    ; LineNo: 59
    Out.Open(Terminals.W[0], Terminals.W[1]);
     17664    010004500H        0481EH    ldr      r0,[pc,#120] -> 17788 ; Global 02002FCBCH
     17666    010004502H        06800H    ldr      r0,[r0]
     17668    010004504H        0491DH    ldr      r1,[pc,#116] -> 17788 ; Global 02002FCBCH
     17670    010004506H        06849H    ldr      r1,[r1,#4]
     17672    010004508H    0F7FFFD8AH    bl.w     Out.Open
     17676    01000450CH        0E000H    b        0 -> 17680
     17678    01000450EH        0003EH    ; LineNo: 62
    In.Open(Terminals.R[0], Terminals.R[1]);
     17680    010004510H        0481BH    ldr      r0,[pc,#108] -> 17792 ; Global 02002FCACH
     17682    010004512H        06800H    ldr      r0,[r0]
     17684    010004514H        0491AH    ldr      r1,[pc,#104] -> 17792 ; Global 02002FCACH
     17686    010004516H        06849H    ldr      r1,[r1,#4]
     17688    010004518H    0F7FFFE56H    bl.w     In.Open
     17692    01000451CH        0E000H    b        0 -> 17696
     17694    01000451EH        0003FH    ; LineNo: 63
    Terminals.OpenErr(TERM0, UARTstr.PutString);
     17696    010004520H        02000H    movs     r0,#0
     17698    010004522H        04914H    ldr      r1,[pc,#80] -> 17780 ; Global 0100042B0H
     17700    010004524H    0F7FFFD02H    bl.w     Terminals.OpenErr
     17704    010004528H        0E000H    b        0 -> 17708
     17706    01000452AH        00044H    ; LineNo: 68
    RuntimeErrorsOut.SetWriter(Core0, Terminals.Werr[0]);
     17708    01000452CH        02000H    movs     r0,#0
     17710    01000452EH        04915H    ldr      r1,[pc,#84] -> 17796 ; Global 02002FCB4H
     17712    010004530H        06809H    ldr      r1,[r1]
     17714    010004532H    0F7FFF9FFH    bl.w     RuntimeErrorsOu.SetWriter
     17718    010004536H        0E000H    b        0 -> 17722
     17720    010004538H        00045H    ; LineNo: 69
    RuntimeErrors.SetHandler(Core0, RuntimeErrorsOut.HandleException);
     17722    01000453AH        02000H    movs     r0,#0
     17724    01000453CH        04912H    ldr      r1,[pc,#72] -> 17800 ; Global 010003900H
     17726    01000453EH    0F7FDFEB5H    bl.w     RuntimeErrors.SetHandler
     17730    010004542H        0E000H    b        0 -> 17734
     17732    010004544H        00046H    ; LineNo: 70
    Terminals.OpenErr(TERM1, UARTstr.PutString);
     17734    010004546H        02001H    movs     r0,#1
     17736    010004548H        0490AH    ldr      r1,[pc,#40] -> 17780 ; Global 0100042B0H
     17738    01000454AH    0F7FFFCEFH    bl.w     Terminals.OpenErr
     17742    01000454EH        0E000H    b        0 -> 17746
     17744    010004550H        0004AH    ; LineNo: 74
    RuntimeErrorsOut.SetWriter(Core1, Terminals.Werr[1]);
     17746    010004552H        02001H    movs     r0,#1
     17748    010004554H        0490BH    ldr      r1,[pc,#44] -> 17796 ; Global 02002FCB4H
     17750    010004556H        06849H    ldr      r1,[r1,#4]
     17752    010004558H    0F7FFF9ECH    bl.w     RuntimeErrorsOu.SetWriter
     17756    01000455CH        0E000H    b        0 -> 17760
     17758    01000455EH        0004BH    ; LineNo: 75
    RuntimeErrors.SetHandler(Core1, RuntimeErrorsOut.HandleException);
     17760    010004560H        02001H    movs     r0,#1
     17762    010004562H        04909H    ldr      r1,[pc,#36] -> 17800 ; Global 010003900H
     17764    010004564H    0F7FDFEA2H    bl.w     RuntimeErrors.SetHandler
     17768    010004568H        0E000H    b        0 -> 17772
     17770    01000456AH        0004CH    ; LineNo: 76
  END init;
     17772    01000456CH        0B009H    add      sp,#36
     17774    01000456EH        0BD00H    pop      { pc }
     17776    010004570H    010003978H    ; Global 010003978H
     17780    010004574H    0100042B0H    ; Global 0100042B0H
     17784    010004578H    01000435CH    ; Global 01000435CH
     17788    01000457CH    02002FCBCH    ; Global 02002FCBCH
     17792    010004580H    02002FCACH    ; Global 02002FCACH
     17796    010004584H    02002FCB4H    ; Global 02002FCB4H
     17800    010004588H    010003900H    ; Global 010003900H

PROCEDURE Main..init;
BEGIN
     17804    01000458CH        0B500H    push     { lr }
  init
END .init;
END Main.
     17806    01000458EH    0F7FFFF7DH    bl.w     Main.init
     17810    010004592H        0E000H    b        0 -> 17814
     17812    010004594H        00050H    ; LineNo: 80
     17814    010004596H        0BD00H    pop      { pc }

MODULE Coroutines;
     17816    010004598H        00000H    ; Pad
     17820    01000459CH        00014H    ; Type (size)
     17824    0100045A0H        00000H    ; Type
     17828    0100045A4H        00000H    ; Type
     17832    0100045A8H        00000H    ; Type
     17836    0100045ACH        00000H    ; Type

  PROCEDURE Coroutines.Reset*(cor: Coroutine);
    VAR addr: SET;
  BEGIN
     17840    0100045B0H        0B501H    push     { r0, lr }
     17842    0100045B2H        0B081H    sub      sp,#4
    ASSERT(cor # NIL, Errors.PreCond);
     17844    0100045B4H        09801H    ldr      r0,[sp,#4]
     17846    0100045B6H        02800H    cmp      r0,#0
     17848    0100045B8H        0D101H    bne.n    2 -> 17854
     17850    0100045BAH        0DF65H    svc      101
     17852    0100045BCH        0001DH    ; LineNo: 29
    cor.sp := cor.stAddr + cor.stSize;
     17854    0100045BEH        09801H    ldr      r0,[sp,#4]
     17856    0100045C0H        06880H    ldr      r0,[r0,#8]
     17858    0100045C2H        09901H    ldr      r1,[sp,#4]
     17860    0100045C4H        068C9H    ldr      r1,[r1,#12]
     17862    0100045C6H        01840H    adds     r0,r0,r1
     17864    0100045C8H        09901H    ldr      r1,[sp,#4]
     17866    0100045CAH        06008H    str      r0,[r1]
    DEC(cor.sp, 4);
     17868    0100045CCH        09801H    ldr      r0,[sp,#4]
     17870    0100045CEH        06801H    ldr      r1,[r0]
     17872    0100045D0H        03904H    subs     r1,#4
     17874    0100045D2H        06001H    str      r1,[r0]
    SYSTEM.PUT(cor.sp, cor.sp);
     17876    0100045D4H        09801H    ldr      r0,[sp,#4]
     17878    0100045D6H        06800H    ldr      r0,[r0]
     17880    0100045D8H        09901H    ldr      r1,[sp,#4]
     17882    0100045DAH        06809H    ldr      r1,[r1]
     17884    0100045DCH        06001H    str      r1,[r0]
    DEC(cor.sp, 4);
     17886    0100045DEH        09801H    ldr      r0,[sp,#4]
     17888    0100045E0H        06801H    ldr      r1,[r0]
     17890    0100045E2H        03904H    subs     r1,#4
     17892    0100045E4H        06001H    str      r1,[r0]
    SYSTEM.PUT(cor.sp, cor.proc);
     17894    0100045E6H        09801H    ldr      r0,[sp,#4]
     17896    0100045E8H        06800H    ldr      r0,[r0]
     17898    0100045EAH        09901H    ldr      r1,[sp,#4]
     17900    0100045ECH        06849H    ldr      r1,[r1,#4]
     17902    0100045EEH        06001H    str      r1,[r0]
    SYSTEM.GET(cor.sp, addr);
     17904    0100045F0H        09801H    ldr      r0,[sp,#4]
     17906    0100045F2H        06800H    ldr      r0,[r0]
     17908    0100045F4H        06801H    ldr      r1,[r0]
     17910    0100045F6H        09100H    str      r1,[sp]
    INCL(addr, 0);  
     17912    0100045F8H        09800H    ldr      r0,[sp]
     17914    0100045FAH        02101H    movs     r1,#1
     17916    0100045FCH        04308H    orrs     r0,r1
     17918    0100045FEH        09000H    str      r0,[sp]
    SYSTEM.PUT(cor.sp, addr);
     17920    010004600H        09801H    ldr      r0,[sp,#4]
     17922    010004602H        06800H    ldr      r0,[r0]
     17924    010004604H        09900H    ldr      r1,[sp]
     17926    010004606H        06001H    str      r1,[r0]
    DEC(cor.sp, 4);
     17928    010004608H        09801H    ldr      r0,[sp,#4]
     17930    01000460AH        06801H    ldr      r1,[r0]
     17932    01000460CH        03904H    subs     r1,#4
     17934    01000460EH        06001H    str      r1,[r0]
    DEC(cor.sp, 4);
     17936    010004610H        09801H    ldr      r0,[sp,#4]
     17938    010004612H        06801H    ldr      r1,[r0]
     17940    010004614H        03904H    subs     r1,#4
     17942    010004616H        06001H    str      r1,[r0]
  END Reset;
     17944    010004618H        0B002H    add      sp,#8
     17946    01000461AH        0BD00H    pop      { pc }

  PROCEDURE Coroutines.Allocate*(cor: Coroutine; p: PROC);
  BEGIN
     17948    01000461CH        0B503H    push     { r0, r1, lr }
    ASSERT(cor # NIL, Errors.PreCond);
     17950    01000461EH        09800H    ldr      r0,[sp]
     17952    010004620H        02800H    cmp      r0,#0
     17954    010004622H        0D101H    bne.n    2 -> 17960
     17956    010004624H        0DF65H    svc      101
     17958    010004626H        00035H    ; LineNo: 53
    cor.proc := p;
     17960    010004628H        09801H    ldr      r0,[sp,#4]
     17962    01000462AH        09900H    ldr      r1,[sp]
     17964    01000462CH        06048H    str      r0,[r1,#4]
    Reset(cor)
     17966    01000462EH        09800H    ldr      r0,[sp]
  END Allocate;
     17968    010004630H    0F7FFFFBEH    bl.w     Coroutines.Reset
     17972    010004634H        0E000H    b        0 -> 17976
     17974    010004636H        00037H    ; LineNo: 55
     17976    010004638H        0B002H    add      sp,#8
     17978    01000463AH        0BD00H    pop      { pc }

  PROCEDURE Coroutines.Init*(cor: Coroutine; stAddr, stSize, id: INTEGER);
  BEGIN
     17980    01000463CH        0B50FH    push     { r0, r1, r2, r3, lr }
    ASSERT(cor # NIL, Errors.PreCond);
     17982    01000463EH        09800H    ldr      r0,[sp]
     17984    010004640H        02800H    cmp      r0,#0
     17986    010004642H        0D101H    bne.n    2 -> 17992
     17988    010004644H        0DF65H    svc      101
     17990    010004646H        0003DH    ; LineNo: 61
    cor.stAddr := stAddr;
     17992    010004648H        09801H    ldr      r0,[sp,#4]
     17994    01000464AH        09900H    ldr      r1,[sp]
     17996    01000464CH        06088H    str      r0,[r1,#8]
    cor.stSize := stSize;
     17998    01000464EH        09802H    ldr      r0,[sp,#8]
     18000    010004650H        09900H    ldr      r1,[sp]
     18002    010004652H        060C8H    str      r0,[r1,#12]
    cor.id := id
  END Init;
     18004    010004654H        09803H    ldr      r0,[sp,#12]
     18006    010004656H        09900H    ldr      r1,[sp]
     18008    010004658H        06108H    str      r0,[r1,#16]
     18010    01000465AH        0B004H    add      sp,#16
     18012    01000465CH        0BD00H    pop      { pc }
     18014    01000465EH        046C0H    nop

  PROCEDURE Coroutines.Transfer*(f, t: Coroutine);
    CONST SP = 13;
  BEGIN
     18016    010004660H        0B503H    push     { r0, r1, lr }
    f.sp := SYSTEM.REG(SP);
     18018    010004662H        04668H    mov      r0,sp
     18020    010004664H        09900H    ldr      r1,[sp]
     18022    010004666H        06008H    str      r0,[r1]
    SYSTEM.LDREG(SP, t.sp);
     18024    010004668H        09801H    ldr      r0,[sp,#4]
     18026    01000466AH        06800H    ldr      r0,[r0]
     18028    01000466CH        04685H    mov      sp,r0
  END Transfer;
     18030    01000466EH        0B002H    add      sp,#8
     18032    010004670H        0BD00H    pop      { pc }
     18034    010004672H        046C0H    nop

PROCEDURE Coroutines..init;
END .init;
END Coroutines;
     18036    010004674H        0B500H    push     { lr }
     18038    010004676H        0BD00H    pop      { pc }

MODULE SysTick;
     18040    010004678H        00000H    ; Pad

  PROCEDURE SysTick.Tick*(): BOOLEAN;
    RETURN SYSTEM.BIT(MCU.SYST_CSR, SYST_CSR_COUNTFLAG)
     18044    01000467CH        0B500H    push     { lr }
  END Tick;
     18046    01000467EH        04804H    ldr      r0,[pc,#16] -> 18064 ; Const 0E000E010H -536813552
     18048    010004680H        06801H    ldr      r1,[r0]
     18050    010004682H        003C9H    lsls     r1,r1,#15
     18052    010004684H        0D401H    bmi.n    2 -> 18058
     18054    010004686H        02000H    movs     r0,#0
     18056    010004688H        0E000H    b        0 -> 18060
     18058    01000468AH        02001H    movs     r0,#1
     18060    01000468CH        0BD00H    pop      { pc }
     18062    01000468EH        046C0H    nop
     18064    010004690H    0E000E010H    ; Const 0E000E010H -536813552

  PROCEDURE SysTick.Enable*;
  BEGIN
     18068    010004694H        0B500H    push     { lr }
    SYSTEM.PUT(MCU.SYST_CSR, {SYST_CSR_ENABLE})
  END Enable;
     18070    010004696H        04802H    ldr      r0,[pc,#8] -> 18080 ; Const 0E000E010H -536813552
     18072    010004698H        02101H    movs     r1,#1
     18074    01000469AH        06001H    str      r1,[r0]
     18076    01000469CH        0BD00H    pop      { pc }
     18078    01000469EH        046C0H    nop
     18080    0100046A0H    0E000E010H    ; Const 0E000E010H -536813552

  PROCEDURE SysTick.Init*(millisecondsPerTick: INTEGER);
    VAR cntReload: INTEGER;
  BEGIN
     18084    0100046A4H        0B501H    push     { r0, lr }
     18086    0100046A6H        0B081H    sub      sp,#4
    cntReload := millisecondsPerTick * CountPerMillisecond - 1;
     18088    0100046A8H        09801H    ldr      r0,[sp,#4]
     18090    0100046AAH        0217DH    movs     r1,#125
     18092    0100046ACH        000C9H    lsls     r1,r1,#3
     18094    0100046AEH        04348H    muls     r0,r1
     18096    0100046B0H        03801H    subs     r0,#1
     18098    0100046B2H        09000H    str      r0,[sp]
    SYSTEM.PUT(MCU.SYST_RVR, cntReload);
     18100    0100046B4H        04803H    ldr      r0,[pc,#12] -> 18116 ; Const 0E000E014H -536813548
     18102    0100046B6H        09900H    ldr      r1,[sp]
     18104    0100046B8H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.SYST_CVR, 0)  
  END Init;
     18106    0100046BAH        04803H    ldr      r0,[pc,#12] -> 18120 ; Const 0E000E018H -536813544
     18108    0100046BCH        02100H    movs     r1,#0
     18110    0100046BEH        06001H    str      r1,[r0]
     18112    0100046C0H        0B002H    add      sp,#8
     18114    0100046C2H        0BD00H    pop      { pc }
     18116    0100046C4H    0E000E014H    ; Const 0E000E014H -536813548
     18120    0100046C8H    0E000E018H    ; Const 0E000E018H -536813544

PROCEDURE SysTick..init;
END .init;
END SysTick;
     18124    0100046CCH        0B500H    push     { lr }
     18126    0100046CEH        0BD00H    pop      { pc }

MODULE Kernel;
     18128    0100046D0H        00000H    ; Pad
     18132    0100046D4H        00030H    ; Type (size)
     18136    0100046D8H        00000H    ; Type
     18140    0100046DCH        00000H    ; Type
     18144    0100046E0H        00000H    ; Type
     18148    0100046E4H        00000H    ; Type
     18152    0100046E8H        0005CH    ; Type (size)
     18156    0100046ECH        00000H    ; Type
     18160    0100046F0H        00000H    ; Type
     18164    0100046F4H        00000H    ; Type
     18168    0100046F8H        00000H    ; Type

  PROCEDURE Kernel.slotIn(t: Thread; ctx: CoreContext);
    VAR t0, t1: Thread;
  BEGIN
     18172    0100046FCH        0B503H    push     { r0, r1, lr }
     18174    0100046FEH        0B082H    sub      sp,#8
    IF ~(t.tid IN ctx.queued) THEN
     18176    010004700H        09803H    ldr      r0,[sp,#12]
     18178    010004702H        06C80H    ldr      r0,[r0,#72]
     18180    010004704H        09902H    ldr      r1,[sp,#8]
     18182    010004706H        06849H    ldr      r1,[r1,#4]
     18184    010004708H        02201H    movs     r2,#1
     18186    01000470AH        0408AH    lsls     r2,r1
     18188    01000470CH        04210H    tst      r0,r2
     18190    01000470EH        0D001H    beq.n    2 -> 18196
     18192    010004710H        0E032H    b        100 -> 18296
     18194    010004712H        046C0H    nop
      t0 := ctx.ct; t1 := t0;
     18196    010004714H        09803H    ldr      r0,[sp,#12]
     18198    010004716H        06C40H    ldr      r0,[r0,#68]
     18200    010004718H        09000H    str      r0,[sp]
     18202    01000471AH        09800H    ldr      r0,[sp]
     18204    01000471CH        09001H    str      r0,[sp,#4]
      WHILE (t0 # NIL) & (t0.prio <= t.prio) DO
     18206    01000471EH        09800H    ldr      r0,[sp]
     18208    010004720H        02800H    cmp      r0,#0
     18210    010004722H        0D101H    bne.n    2 -> 18216
     18212    010004724H        0E00EH    b        28 -> 18244
     18214    010004726H        046C0H    nop
     18216    010004728H        09800H    ldr      r0,[sp]
     18218    01000472AH        06800H    ldr      r0,[r0]
     18220    01000472CH        09902H    ldr      r1,[sp,#8]
     18222    01000472EH        06809H    ldr      r1,[r1]
     18224    010004730H        04288H    cmp      r0,r1
     18226    010004732H        0DD01H    ble.n    2 -> 18232
     18228    010004734H        0E006H    b        12 -> 18244
     18230    010004736H        046C0H    nop
        t1 := t0; t0 := t0.next
     18232    010004738H        09800H    ldr      r0,[sp]
     18234    01000473AH        09001H    str      r0,[sp,#4]
      END;
     18236    01000473CH        09800H    ldr      r0,[sp]
     18238    01000473EH        06AC0H    ldr      r0,[r0,#44]
     18240    010004740H        09000H    str      r0,[sp]
     18242    010004742H        0E7ECH    b        -40 -> 18206
      IF t1 = t0 THEN ctx.ct := t ELSE t1.next := t END;
     18244    010004744H        09801H    ldr      r0,[sp,#4]
     18246    010004746H        09900H    ldr      r1,[sp]
     18248    010004748H        04288H    cmp      r0,r1
     18250    01000474AH        0D001H    beq.n    2 -> 18256
     18252    01000474CH        0E005H    b        10 -> 18266
     18254    01000474EH        046C0H    nop
     18256    010004750H        09802H    ldr      r0,[sp,#8]
     18258    010004752H        09903H    ldr      r1,[sp,#12]
     18260    010004754H        06448H    str      r0,[r1,#68]
     18262    010004756H        0E003H    b        6 -> 18272
     18264    010004758H        046C0H    nop
     18266    01000475AH        09802H    ldr      r0,[sp,#8]
     18268    01000475CH        09901H    ldr      r1,[sp,#4]
     18270    01000475EH        062C8H    str      r0,[r1,#44]
      t.next := t0;
     18272    010004760H        09800H    ldr      r0,[sp]
     18274    010004762H        09902H    ldr      r1,[sp,#8]
     18276    010004764H        062C8H    str      r0,[r1,#44]
      INCL(ctx.queued, t.tid)
    END
     18278    010004766H        09802H    ldr      r0,[sp,#8]
     18280    010004768H        06840H    ldr      r0,[r0,#4]
     18282    01000476AH        02101H    movs     r1,#1
     18284    01000476CH        04081H    lsls     r1,r0
     18286    01000476EH        09A03H    ldr      r2,[sp,#12]
     18288    010004770H        03248H    adds     r2,#72
     18290    010004772H        06813H    ldr      r3,[r2]
     18292    010004774H        0430BH    orrs     r3,r1
     18294    010004776H        06013H    str      r3,[r2]
  END slotIn;
     18296    010004778H        0B004H    add      sp,#16
     18298    01000477AH        0BD00H    pop      { pc }

  PROCEDURE Kernel.Allocate*(proc: PROC; stackSize: INTEGER; VAR t: Thread; VAR tid, res: INTEGER);
    VAR cid, stackAddr: INTEGER; ctx: CoreContext;
  BEGIN
     18300    01000477CH        0B51FH    push     { r0, r1, r2, r3, r4, lr }
     18302    01000477EH        0B083H    sub      sp,#12
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18304    010004780H        04831H    ldr      r0,[pc,#196] -> 18504 ; Const 0D0000000H -805306368
     18306    010004782H        06801H    ldr      r1,[r0]
     18308    010004784H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     18310    010004786H        09800H    ldr      r0,[sp]
     18312    010004788H        02802H    cmp      r0,#2
     18314    01000478AH        0D301H    bcc.n    2 -> 18320
     18316    01000478CH        0DF01H    svc      1
     18318    01000478EH        00069H    ; LineNo: 105
     18320    010004790H        0492EH    ldr      r1,[pc,#184] -> 18508 ; Global 02002FC94H
     18322    010004792H        00080H    lsls     r0,r0,#2
     18324    010004794H        01808H    adds     r0,r1,r0
     18326    010004796H        06800H    ldr      r0,[r0]
     18328    010004798H        09002H    str      r0,[sp,#8]
    res := Failed;
     18330    01000479AH        02001H    movs     r0,#1
     18332    01000479CH        09907H    ldr      r1,[sp,#28]
     18334    01000479EH        06008H    str      r0,[r1]
    IF ctx.numThreads < MaxNumThreads THEN
     18336    0100047A0H        09802H    ldr      r0,[sp,#8]
     18338    0100047A2H        06CC0H    ldr      r0,[r0,#76]
     18340    0100047A4H        02810H    cmp      r0,#16
     18342    0100047A6H        0DB01H    blt.n    2 -> 18348
     18344    0100047A8H        0E04BH    b        150 -> 18498
     18346    0100047AAH        046C0H    nop
      tid := ctx.numThreads;
     18348    0100047ACH        09802H    ldr      r0,[sp,#8]
     18350    0100047AEH        06CC0H    ldr      r0,[r0,#76]
     18352    0100047B0H        09906H    ldr      r1,[sp,#24]
     18354    0100047B2H        06008H    str      r0,[r1]
      t := ctx.threads[tid];
     18356    0100047B4H        09806H    ldr      r0,[sp,#24]
     18358    0100047B6H        06800H    ldr      r0,[r0]
     18360    0100047B8H        02810H    cmp      r0,#16
     18362    0100047BAH        0D301H    bcc.n    2 -> 18368
     18364    0100047BCH        0DF01H    svc      1
     18366    0100047BEH        0006DH    ; LineNo: 109
     18368    0100047C0H        09902H    ldr      r1,[sp,#8]
     18370    0100047C2H        00080H    lsls     r0,r0,#2
     18372    0100047C4H        01808H    adds     r0,r1,r0
     18374    0100047C6H        06800H    ldr      r0,[r0]
     18376    0100047C8H        09905H    ldr      r1,[sp,#20]
     18378    0100047CAH        06008H    str      r0,[r1]
      INC(ctx.numThreads);
     18380    0100047CCH        09802H    ldr      r0,[sp,#8]
     18382    0100047CEH        06CC1H    ldr      r1,[r0,#76]
     18384    0100047D0H        03101H    adds     r1,#1
     18386    0100047D2H        064C1H    str      r1,[r0,#76]
      t.state := StateSuspended;
     18388    0100047D4H        09805H    ldr      r0,[sp,#20]
     18390    0100047D6H        06800H    ldr      r0,[r0]
     18392    0100047D8H        02101H    movs     r1,#1
     18394    0100047DAH        06081H    str      r1,[r0,#8]
      t.prio := DefaultPrio;
     18396    0100047DCH        09805H    ldr      r0,[sp,#20]
     18398    0100047DEH        06800H    ldr      r0,[r0]
     18400    0100047E0H        02107H    movs     r1,#7
     18402    0100047E2H        06001H    str      r1,[r0]
      t.period := 0; t.delay := 0; t.devAddr := 0;
     18404    0100047E4H        09805H    ldr      r0,[sp,#20]
     18406    0100047E6H        06800H    ldr      r0,[r0]
     18408    0100047E8H        02100H    movs     r1,#0
     18410    0100047EAH        060C1H    str      r1,[r0,#12]
     18412    0100047ECH        09805H    ldr      r0,[sp,#20]
     18414    0100047EEH        06800H    ldr      r0,[r0]
     18416    0100047F0H        02100H    movs     r1,#0
     18418    0100047F2H        06141H    str      r1,[r0,#20]
     18420    0100047F4H        09805H    ldr      r0,[sp,#20]
     18422    0100047F6H        06800H    ldr      r0,[r0]
     18424    0100047F8H        02100H    movs     r1,#0
     18426    0100047FAH        06181H    str      r1,[r0,#24]
      Memory.AllocThreadStack(stackAddr, tid, stackSize);
     18428    0100047FCH        0A801H    add      r0,sp,#4
     18430    0100047FEH        09906H    ldr      r1,[sp,#24]
     18432    010004800H        06809H    ldr      r1,[r1]
     18434    010004802H        09A04H    ldr      r2,[sp,#16]
     18436    010004804H    0F7FDF858H    bl.w     Memory.AllocThreadStack
     18440    010004808H        0E000H    b        0 -> 18444
     18442    01000480AH        00072H    ; LineNo: 114
      IF stackAddr # 0 THEN
     18444    01000480CH        09801H    ldr      r0,[sp,#4]
     18446    01000480EH        02800H    cmp      r0,#0
     18448    010004810H        0D101H    bne.n    2 -> 18454
     18450    010004812H        0E016H    b        44 -> 18498
     18452    010004814H        046C0H    nop
        Coroutines.Init(t.cor, stackAddr, stackSize, tid);
     18454    010004816H        09805H    ldr      r0,[sp,#20]
     18456    010004818H        06800H    ldr      r0,[r0]
     18458    01000481AH        06A40H    ldr      r0,[r0,#36]
     18460    01000481CH        09901H    ldr      r1,[sp,#4]
     18462    01000481EH        09A04H    ldr      r2,[sp,#16]
     18464    010004820H        09B06H    ldr      r3,[sp,#24]
     18466    010004822H        0681BH    ldr      r3,[r3]
     18468    010004824H    0F7FFFF0AH    bl.w     Coroutines.Init
     18472    010004828H        0E000H    b        0 -> 18476
     18474    01000482AH        00074H    ; LineNo: 116
        Coroutines.Allocate(t.cor, proc);
     18476    01000482CH        09805H    ldr      r0,[sp,#20]
     18478    01000482EH        06800H    ldr      r0,[r0]
     18480    010004830H        06A40H    ldr      r0,[r0,#36]
     18482    010004832H        09903H    ldr      r1,[sp,#12]
     18484    010004834H    0F7FFFEF2H    bl.w     Coroutines.Allocate
     18488    010004838H        0E000H    b        0 -> 18492
     18490    01000483AH        00075H    ; LineNo: 117
        res := NoError
      END
     18492    01000483CH        02000H    movs     r0,#0
     18494    01000483EH        09907H    ldr      r1,[sp,#28]
     18496    010004840H        06008H    str      r0,[r1]
    END
  END Allocate;
     18498    010004842H        0B008H    add      sp,#32
     18500    010004844H        0BD00H    pop      { pc }
     18502    010004846H        046C0H    nop
     18504    010004848H    0D0000000H    ; Const 0D0000000H -805306368
     18508    01000484CH    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Reallocate*(t: Thread; proc: PROC; VAR res: INTEGER);
  BEGIN
     18512    010004850H        0B507H    push     { r0, r1, r2, lr }
    res := Failed;
     18514    010004852H        02001H    movs     r0,#1
     18516    010004854H        09902H    ldr      r1,[sp,#8]
     18518    010004856H        06008H    str      r0,[r1]
    IF t.state = StateSuspended THEN
     18520    010004858H        09800H    ldr      r0,[sp]
     18522    01000485AH        06880H    ldr      r0,[r0,#8]
     18524    01000485CH        02801H    cmp      r0,#1
     18526    01000485EH        0D001H    beq.n    2 -> 18532
     18528    010004860H        0E016H    b        44 -> 18576
     18530    010004862H        046C0H    nop
      t.prio := 1;
     18532    010004864H        02001H    movs     r0,#1
     18534    010004866H        09900H    ldr      r1,[sp]
     18536    010004868H        06008H    str      r0,[r1]
      t.period := 0; t.delay := 0;
     18538    01000486AH        02000H    movs     r0,#0
     18540    01000486CH        09900H    ldr      r1,[sp]
     18542    01000486EH        060C8H    str      r0,[r1,#12]
     18544    010004870H        02000H    movs     r0,#0
     18546    010004872H        09900H    ldr      r1,[sp]
     18548    010004874H        06148H    str      r0,[r1,#20]
      t.devAddr := 0;
     18550    010004876H        02000H    movs     r0,#0
     18552    010004878H        09900H    ldr      r1,[sp]
     18554    01000487AH        06188H    str      r0,[r1,#24]
      Coroutines. Allocate(t.cor, proc);
     18556    01000487CH        09800H    ldr      r0,[sp]
     18558    01000487EH        06A40H    ldr      r0,[r0,#36]
     18560    010004880H        09901H    ldr      r1,[sp,#4]
     18562    010004882H    0F7FFFECBH    bl.w     Coroutines.Allocate
     18566    010004886H        0E000H    b        0 -> 18570
     18568    010004888H        00083H    ; LineNo: 131
      res := NoError
    END
     18570    01000488AH        02000H    movs     r0,#0
     18572    01000488CH        09902H    ldr      r1,[sp,#8]
     18574    01000488EH        06008H    str      r0,[r1]
  END Reallocate;
     18576    010004890H        0B003H    add      sp,#12
     18578    010004892H        0BD00H    pop      { pc }

  PROCEDURE Kernel.Enable*(t: Thread);
  BEGIN
     18580    010004894H        0B501H    push     { r0, lr }
    ASSERT(t # NIL, Errors.PreCond);
     18582    010004896H        09800H    ldr      r0,[sp]
     18584    010004898H        02800H    cmp      r0,#0
     18586    01000489AH        0D101H    bne.n    2 -> 18592
     18588    01000489CH        0DF65H    svc      101
     18590    01000489EH        0008BH    ; LineNo: 139
    t.state := StateEnabled
  END Enable;
     18592    0100048A0H        02000H    movs     r0,#0
     18594    0100048A2H        09900H    ldr      r1,[sp]
     18596    0100048A4H        06088H    str      r0,[r1,#8]
     18598    0100048A6H        0B001H    add      sp,#4
     18600    0100048A8H        0BD00H    pop      { pc }
     18602    0100048AAH        046C0H    nop

  PROCEDURE Kernel.SetPrio*(t: Thread; prio: INTEGER);
  BEGIN
     18604    0100048ACH        0B503H    push     { r0, r1, lr }
    t.prio := prio
  END SetPrio;
     18606    0100048AEH        09801H    ldr      r0,[sp,#4]
     18608    0100048B0H        09900H    ldr      r1,[sp]
     18610    0100048B2H        06008H    str      r0,[r1]
     18612    0100048B4H        0B002H    add      sp,#8
     18614    0100048B6H        0BD00H    pop      { pc }

  PROCEDURE Kernel.SetPeriod*(t: Thread; period, startAfter: INTEGER);
  BEGIN
     18616    0100048B8H        0B507H    push     { r0, r1, r2, lr }
    t.period := period;
     18618    0100048BAH        09801H    ldr      r0,[sp,#4]
     18620    0100048BCH        09900H    ldr      r1,[sp]
     18622    0100048BEH        060C8H    str      r0,[r1,#12]
    t.ticker := startAfter
  END SetPeriod;
     18624    0100048C0H        09802H    ldr      r0,[sp,#8]
     18626    0100048C2H        09900H    ldr      r1,[sp]
     18628    0100048C4H        06108H    str      r0,[r1,#16]
     18630    0100048C6H        0B003H    add      sp,#12
     18632    0100048C8H        0BD00H    pop      { pc }
     18634    0100048CAH        046C0H    nop

  PROCEDURE Kernel.Next*;
    VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     18636    0100048CCH        0B500H    push     { lr }
     18638    0100048CEH        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18640    0100048D0H        0480BH    ldr      r0,[pc,#44] -> 18688 ; Const 0D0000000H -805306368
     18642    0100048D2H        06801H    ldr      r1,[r0]
     18644    0100048D4H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     18646    0100048D6H        09800H    ldr      r0,[sp]
     18648    0100048D8H        02802H    cmp      r0,#2
     18650    0100048DAH        0D301H    bcc.n    2 -> 18656
     18652    0100048DCH        0DF01H    svc      1
     18654    0100048DEH        000A3H    ; LineNo: 163
     18656    0100048E0H        04908H    ldr      r1,[pc,#32] -> 18692 ; Global 02002FC94H
     18658    0100048E2H        00080H    lsls     r0,r0,#2
     18660    0100048E4H        01808H    adds     r0,r1,r0
     18662    0100048E6H        06800H    ldr      r0,[r0]
     18664    0100048E8H        09001H    str      r0,[sp,#4]
    Coroutines.Transfer(ctx.Ct.cor, ctx.loop)
     18666    0100048EAH        09801H    ldr      r0,[sp,#4]
     18668    0100048ECH        06C00H    ldr      r0,[r0,#64]
     18670    0100048EEH        06A40H    ldr      r0,[r0,#36]
     18672    0100048F0H        09901H    ldr      r1,[sp,#4]
     18674    0100048F2H        06D49H    ldr      r1,[r1,#84]
  END Next;
     18676    0100048F4H    0F7FFFEB4H    bl.w     Coroutines.Transfer
     18680    0100048F8H        0E000H    b        0 -> 18684
     18682    0100048FAH        000A4H    ; LineNo: 164
     18684    0100048FCH        0B002H    add      sp,#8
     18686    0100048FEH        0BD00H    pop      { pc }
     18688    010004900H    0D0000000H    ; Const 0D0000000H -805306368
     18692    010004904H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.NextQueued*(): Thread;
    VAR cid: INTEGER;
  BEGIN
     18696    010004908H        0B500H    push     { lr }
     18698    01000490AH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18700    01000490CH        04807H    ldr      r0,[pc,#28] -> 18732 ; Const 0D0000000H -805306368
     18702    01000490EH        06801H    ldr      r1,[r0]
     18704    010004910H        09100H    str      r1,[sp]
    RETURN coreCon[cid].ct
     18706    010004912H        09800H    ldr      r0,[sp]
     18708    010004914H        02802H    cmp      r0,#2
     18710    010004916H        0D301H    bcc.n    2 -> 18716
     18712    010004918H        0DF01H    svc      1
     18714    01000491AH        000ABH    ; LineNo: 171
     18716    01000491CH        04904H    ldr      r1,[pc,#16] -> 18736 ; Global 02002FC94H
     18718    01000491EH        00080H    lsls     r0,r0,#2
     18720    010004920H        01808H    adds     r0,r1,r0
     18722    010004922H        06800H    ldr      r0,[r0]
  END NextQueued;
     18724    010004924H        06C40H    ldr      r0,[r0,#68]
     18726    010004926H        0B001H    add      sp,#4
     18728    010004928H        0BD00H    pop      { pc }
     18730    01000492AH        046C0H    nop
     18732    01000492CH    0D0000000H    ; Const 0D0000000H -805306368
     18736    010004930H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.SuspendMe*;
    VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     18740    010004934H        0B500H    push     { lr }
     18742    010004936H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18744    010004938H        0480DH    ldr      r0,[pc,#52] -> 18800 ; Const 0D0000000H -805306368
     18746    01000493AH        06801H    ldr      r1,[r0]
     18748    01000493CH        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     18750    01000493EH        09800H    ldr      r0,[sp]
     18752    010004940H        02802H    cmp      r0,#2
     18754    010004942H        0D301H    bcc.n    2 -> 18760
     18756    010004944H        0DF01H    svc      1
     18758    010004946H        000B4H    ; LineNo: 180
     18760    010004948H        0490AH    ldr      r1,[pc,#40] -> 18804 ; Global 02002FC94H
     18762    01000494AH        00080H    lsls     r0,r0,#2
     18764    01000494CH        01808H    adds     r0,r1,r0
     18766    01000494EH        06800H    ldr      r0,[r0]
     18768    010004950H        09001H    str      r0,[sp,#4]
    ctx.Ct.state := StateSuspended;
     18770    010004952H        09801H    ldr      r0,[sp,#4]
     18772    010004954H        06C00H    ldr      r0,[r0,#64]
     18774    010004956H        02101H    movs     r1,#1
     18776    010004958H        06081H    str      r1,[r0,#8]
    Coroutines.Transfer(ctx.Ct.cor, ctx.loop)
     18778    01000495AH        09801H    ldr      r0,[sp,#4]
     18780    01000495CH        06C00H    ldr      r0,[r0,#64]
     18782    01000495EH        06A40H    ldr      r0,[r0,#36]
     18784    010004960H        09901H    ldr      r1,[sp,#4]
     18786    010004962H        06D49H    ldr      r1,[r1,#84]
  END SuspendMe;
     18788    010004964H    0F7FFFE7CH    bl.w     Coroutines.Transfer
     18792    010004968H        0E000H    b        0 -> 18796
     18794    01000496AH        000B6H    ; LineNo: 182
     18796    01000496CH        0B002H    add      sp,#8
     18798    01000496EH        0BD00H    pop      { pc }
     18800    010004970H    0D0000000H    ; Const 0D0000000H -805306368
     18804    010004974H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.DelayMe*(delay: INTEGER);
    VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     18808    010004978H        0B501H    push     { r0, lr }
     18810    01000497AH        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18812    01000497CH        0480DH    ldr      r0,[pc,#52] -> 18868 ; Const 0D0000000H -805306368
     18814    01000497EH        06801H    ldr      r1,[r0]
     18816    010004980H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     18818    010004982H        09800H    ldr      r0,[sp]
     18820    010004984H        02802H    cmp      r0,#2
     18822    010004986H        0D301H    bcc.n    2 -> 18828
     18824    010004988H        0DF01H    svc      1
     18826    01000498AH        000BEH    ; LineNo: 190
     18828    01000498CH        0490AH    ldr      r1,[pc,#40] -> 18872 ; Global 02002FC94H
     18830    01000498EH        00080H    lsls     r0,r0,#2
     18832    010004990H        01808H    adds     r0,r1,r0
     18834    010004992H        06800H    ldr      r0,[r0]
     18836    010004994H        09001H    str      r0,[sp,#4]
    ctx.Ct.delay := delay;
     18838    010004996H        09801H    ldr      r0,[sp,#4]
     18840    010004998H        06C00H    ldr      r0,[r0,#64]
     18842    01000499AH        09902H    ldr      r1,[sp,#8]
     18844    01000499CH        06141H    str      r1,[r0,#20]
    Coroutines.Transfer(ctx.Ct.cor, ctx.loop)
     18846    01000499EH        09801H    ldr      r0,[sp,#4]
     18848    0100049A0H        06C00H    ldr      r0,[r0,#64]
     18850    0100049A2H        06A40H    ldr      r0,[r0,#36]
     18852    0100049A4H        09901H    ldr      r1,[sp,#4]
     18854    0100049A6H        06D49H    ldr      r1,[r1,#84]
  END DelayMe;
     18856    0100049A8H    0F7FFFE5AH    bl.w     Coroutines.Transfer
     18860    0100049ACH        0E000H    b        0 -> 18864
     18862    0100049AEH        000C0H    ; LineNo: 192
     18864    0100049B0H        0B003H    add      sp,#12
     18866    0100049B2H        0BD00H    pop      { pc }
     18868    0100049B4H    0D0000000H    ; Const 0D0000000H -805306368
     18872    0100049B8H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.StartTimeout*(timeout: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     18876    0100049BCH        0B501H    push     { r0, lr }
     18878    0100049BEH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18880    0100049C0H        04808H    ldr      r0,[pc,#32] -> 18916 ; Const 0D0000000H -805306368
     18882    0100049C2H        06801H    ldr      r1,[r0]
     18884    0100049C4H        09100H    str      r1,[sp]
    coreCon[cid].Ct.delay := timeout
     18886    0100049C6H        09800H    ldr      r0,[sp]
     18888    0100049C8H        02802H    cmp      r0,#2
     18890    0100049CAH        0D301H    bcc.n    2 -> 18896
     18892    0100049CCH        0DF01H    svc      1
     18894    0100049CEH        000C8H    ; LineNo: 200
     18896    0100049D0H        04905H    ldr      r1,[pc,#20] -> 18920 ; Global 02002FC94H
     18898    0100049D2H        00080H    lsls     r0,r0,#2
     18900    0100049D4H        01808H    adds     r0,r1,r0
     18902    0100049D6H        06800H    ldr      r0,[r0]
     18904    0100049D8H        06C00H    ldr      r0,[r0,#64]
  END StartTimeout;
     18906    0100049DAH        09901H    ldr      r1,[sp,#4]
     18908    0100049DCH        06141H    str      r1,[r0,#20]
     18910    0100049DEH        0B002H    add      sp,#8
     18912    0100049E0H        0BD00H    pop      { pc }
     18914    0100049E2H        046C0H    nop
     18916    0100049E4H    0D0000000H    ; Const 0D0000000H -805306368
     18920    0100049E8H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.CancelTimeout*;
  BEGIN
     18924    0100049ECH        0B500H    push     { lr }
    StartTimeout(0)
     18926    0100049EEH        02000H    movs     r0,#0
  END CancelTimeout;
     18928    0100049F0H    0F7FFFFE4H    bl.w     Kernel.StartTimeout
     18932    0100049F4H        0E000H    b        0 -> 18936
     18934    0100049F6H        000CEH    ; LineNo: 206
     18936    0100049F8H        0BD00H    pop      { pc }
     18938    0100049FAH        046C0H    nop

  PROCEDURE Kernel.AwaitDeviceFlags*(addr: INTEGER; setFlags, clrFlags: SET);
    VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     18940    0100049FCH        0B507H    push     { r0, r1, r2, lr }
     18942    0100049FEH        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     18944    010004A00H        04811H    ldr      r0,[pc,#68] -> 19016 ; Const 0D0000000H -805306368
     18946    010004A02H        06801H    ldr      r1,[r0]
     18948    010004A04H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     18950    010004A06H        09800H    ldr      r0,[sp]
     18952    010004A08H        02802H    cmp      r0,#2
     18954    010004A0AH        0D301H    bcc.n    2 -> 18960
     18956    010004A0CH        0DF01H    svc      1
     18958    010004A0EH        000DDH    ; LineNo: 221
     18960    010004A10H        0490EH    ldr      r1,[pc,#56] -> 19020 ; Global 02002FC94H
     18962    010004A12H        00080H    lsls     r0,r0,#2
     18964    010004A14H        01808H    adds     r0,r1,r0
     18966    010004A16H        06800H    ldr      r0,[r0]
     18968    010004A18H        09001H    str      r0,[sp,#4]
    ctx.Ct.devAddr := addr;
     18970    010004A1AH        09801H    ldr      r0,[sp,#4]
     18972    010004A1CH        06C00H    ldr      r0,[r0,#64]
     18974    010004A1EH        09902H    ldr      r1,[sp,#8]
     18976    010004A20H        06181H    str      r1,[r0,#24]
    ctx.Ct.devFlagsSet := setFlags;
     18978    010004A22H        09801H    ldr      r0,[sp,#4]
     18980    010004A24H        06C00H    ldr      r0,[r0,#64]
     18982    010004A26H        09903H    ldr      r1,[sp,#12]
     18984    010004A28H        061C1H    str      r1,[r0,#28]
    ctx.Ct.devFlagsClr := clrFlags;
     18986    010004A2AH        09801H    ldr      r0,[sp,#4]
     18988    010004A2CH        06C00H    ldr      r0,[r0,#64]
     18990    010004A2EH        09904H    ldr      r1,[sp,#16]
     18992    010004A30H        06201H    str      r1,[r0,#32]
    Coroutines.Transfer(ctx.Ct.cor, ctx.loop)
     18994    010004A32H        09801H    ldr      r0,[sp,#4]
     18996    010004A34H        06C00H    ldr      r0,[r0,#64]
     18998    010004A36H        06A40H    ldr      r0,[r0,#36]
     19000    010004A38H        09901H    ldr      r1,[sp,#4]
     19002    010004A3AH        06D49H    ldr      r1,[r1,#84]
  END AwaitDeviceFlags;
     19004    010004A3CH    0F7FFFE10H    bl.w     Coroutines.Transfer
     19008    010004A40H        0E000H    b        0 -> 19012
     19010    010004A42H        000E1H    ; LineNo: 225
     19012    010004A44H        0B005H    add      sp,#20
     19014    010004A46H        0BD00H    pop      { pc }
     19016    010004A48H    0D0000000H    ; Const 0D0000000H -805306368
     19020    010004A4CH    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.CancelAwaitDeviceFlags*;
    VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     19024    010004A50H        0B500H    push     { lr }
     19026    010004A52H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19028    010004A54H        04809H    ldr      r0,[pc,#36] -> 19068 ; Const 0D0000000H -805306368
     19030    010004A56H        06801H    ldr      r1,[r0]
     19032    010004A58H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     19034    010004A5AH        09800H    ldr      r0,[sp]
     19036    010004A5CH        02802H    cmp      r0,#2
     19038    010004A5EH        0D301H    bcc.n    2 -> 19044
     19040    010004A60H        0DF01H    svc      1
     19042    010004A62H        000E9H    ; LineNo: 233
     19044    010004A64H        04906H    ldr      r1,[pc,#24] -> 19072 ; Global 02002FC94H
     19046    010004A66H        00080H    lsls     r0,r0,#2
     19048    010004A68H        01808H    adds     r0,r1,r0
     19050    010004A6AH        06800H    ldr      r0,[r0]
     19052    010004A6CH        09001H    str      r0,[sp,#4]
    ctx.Ct.devAddr := 0
     19054    010004A6EH        09801H    ldr      r0,[sp,#4]
     19056    010004A70H        06C00H    ldr      r0,[r0,#64]
  END CancelAwaitDeviceFlags;
     19058    010004A72H        02100H    movs     r1,#0
     19060    010004A74H        06181H    str      r1,[r0,#24]
     19062    010004A76H        0B002H    add      sp,#8
     19064    010004A78H        0BD00H    pop      { pc }
     19066    010004A7AH        046C0H    nop
     19068    010004A7CH    0D0000000H    ; Const 0D0000000H -805306368
     19072    010004A80H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Trigger*(): INTEGER;
    VAR cid: INTEGER;
  BEGIN
     19076    010004A84H        0B500H    push     { lr }
     19078    010004A86H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19080    010004A88H        04807H    ldr      r0,[pc,#28] -> 19112 ; Const 0D0000000H -805306368
     19082    010004A8AH        06801H    ldr      r1,[r0]
     19084    010004A8CH        09100H    str      r1,[sp]
    RETURN coreCon[cid].Ct.retCode
     19086    010004A8EH        09800H    ldr      r0,[sp]
     19088    010004A90H        02802H    cmp      r0,#2
     19090    010004A92H        0D301H    bcc.n    2 -> 19096
     19092    010004A94H        0DF01H    svc      1
     19094    010004A96H        000F1H    ; LineNo: 241
     19096    010004A98H        04904H    ldr      r1,[pc,#16] -> 19116 ; Global 02002FC94H
     19098    010004A9AH        00080H    lsls     r0,r0,#2
     19100    010004A9CH        01808H    adds     r0,r1,r0
     19102    010004A9EH        06800H    ldr      r0,[r0]
     19104    010004AA0H        06C00H    ldr      r0,[r0,#64]
  END Trigger;
     19106    010004AA2H        06A80H    ldr      r0,[r0,#40]
     19108    010004AA4H        0B001H    add      sp,#4
     19110    010004AA6H        0BD00H    pop      { pc }
     19112    010004AA8H    0D0000000H    ; Const 0D0000000H -805306368
     19116    010004AACH    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.ChangePrio*(prio: INTEGER);
    VAR cid: INTEGER;
  BEGIN
     19120    010004AB0H        0B501H    push     { r0, lr }
     19122    010004AB2H        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19124    010004AB4H        04808H    ldr      r0,[pc,#32] -> 19160 ; Const 0D0000000H -805306368
     19126    010004AB6H        06801H    ldr      r1,[r0]
     19128    010004AB8H        09100H    str      r1,[sp]
    coreCon[cid].Ct.prio := prio
     19130    010004ABAH        09800H    ldr      r0,[sp]
     19132    010004ABCH        02802H    cmp      r0,#2
     19134    010004ABEH        0D301H    bcc.n    2 -> 19140
     19136    010004AC0H        0DF01H    svc      1
     19138    010004AC2H        000FAH    ; LineNo: 250
     19140    010004AC4H        04905H    ldr      r1,[pc,#20] -> 19164 ; Global 02002FC94H
     19142    010004AC6H        00080H    lsls     r0,r0,#2
     19144    010004AC8H        01808H    adds     r0,r1,r0
     19146    010004ACAH        06800H    ldr      r0,[r0]
     19148    010004ACCH        06C00H    ldr      r0,[r0,#64]
  END ChangePrio;
     19150    010004ACEH        09901H    ldr      r1,[sp,#4]
     19152    010004AD0H        06001H    str      r1,[r0]
     19154    010004AD2H        0B002H    add      sp,#8
     19156    010004AD4H        0BD00H    pop      { pc }
     19158    010004AD6H        046C0H    nop
     19160    010004AD8H    0D0000000H    ; Const 0D0000000H -805306368
     19164    010004ADCH    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.ChangePeriod*(period, startAfter: INTEGER);
     VAR cid: INTEGER; ctx: CoreContext;
  BEGIN
     19168    010004AE0H        0B503H    push     { r0, r1, lr }
     19170    010004AE2H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19172    010004AE4H        0480BH    ldr      r0,[pc,#44] -> 19220 ; Const 0D0000000H -805306368
     19174    010004AE6H        06801H    ldr      r1,[r0]
     19176    010004AE8H        09100H    str      r1,[sp]
    ctx := coreCon[cid];
     19178    010004AEAH        09800H    ldr      r0,[sp]
     19180    010004AECH        02802H    cmp      r0,#2
     19182    010004AEEH        0D301H    bcc.n    2 -> 19188
     19184    010004AF0H        0DF01H    svc      1
     19186    010004AF2H        00102H    ; LineNo: 258
     19188    010004AF4H        04908H    ldr      r1,[pc,#32] -> 19224 ; Global 02002FC94H
     19190    010004AF6H        00080H    lsls     r0,r0,#2
     19192    010004AF8H        01808H    adds     r0,r1,r0
     19194    010004AFAH        06800H    ldr      r0,[r0]
     19196    010004AFCH        09001H    str      r0,[sp,#4]
    ctx.Ct.period := period;
     19198    010004AFEH        09801H    ldr      r0,[sp,#4]
     19200    010004B00H        06C00H    ldr      r0,[r0,#64]
     19202    010004B02H        09902H    ldr      r1,[sp,#8]
     19204    010004B04H        060C1H    str      r1,[r0,#12]
    ctx.Ct.ticker := startAfter
     19206    010004B06H        09801H    ldr      r0,[sp,#4]
     19208    010004B08H        06C00H    ldr      r0,[r0,#64]
  END ChangePeriod;
     19210    010004B0AH        09903H    ldr      r1,[sp,#12]
     19212    010004B0CH        06101H    str      r1,[r0,#16]
     19214    010004B0EH        0B004H    add      sp,#16
     19216    010004B10H        0BD00H    pop      { pc }
     19218    010004B12H        046C0H    nop
     19220    010004B14H    0D0000000H    ; Const 0D0000000H -805306368
     19224    010004B18H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Ct*(): Thread;
    VAR cid: INTEGER;
  BEGIN
     19228    010004B1CH        0B500H    push     { lr }
     19230    010004B1EH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19232    010004B20H        04807H    ldr      r0,[pc,#28] -> 19264 ; Const 0D0000000H -805306368
     19234    010004B22H        06801H    ldr      r1,[r0]
     19236    010004B24H        09100H    str      r1,[sp]
    RETURN coreCon[cid].Ct
     19238    010004B26H        09800H    ldr      r0,[sp]
     19240    010004B28H        02802H    cmp      r0,#2
     19242    010004B2AH        0D301H    bcc.n    2 -> 19248
     19244    010004B2CH        0DF01H    svc      1
     19246    010004B2EH        0010BH    ; LineNo: 267
     19248    010004B30H        04904H    ldr      r1,[pc,#16] -> 19268 ; Global 02002FC94H
     19250    010004B32H        00080H    lsls     r0,r0,#2
     19252    010004B34H        01808H    adds     r0,r1,r0
     19254    010004B36H        06800H    ldr      r0,[r0]
  END Ct;
     19256    010004B38H        06C00H    ldr      r0,[r0,#64]
     19258    010004B3AH        0B001H    add      sp,#4
     19260    010004B3CH        0BD00H    pop      { pc }
     19262    010004B3EH        046C0H    nop
     19264    010004B40H    0D0000000H    ; Const 0D0000000H -805306368
     19268    010004B44H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Tid*(): INTEGER;
    VAR cid: INTEGER;
  BEGIN
     19272    010004B48H        0B500H    push     { lr }
     19274    010004B4AH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19276    010004B4CH        04807H    ldr      r0,[pc,#28] -> 19308 ; Const 0D0000000H -805306368
     19278    010004B4EH        06801H    ldr      r1,[r0]
     19280    010004B50H        09100H    str      r1,[sp]
    RETURN coreCon[cid].Ct.tid
     19282    010004B52H        09800H    ldr      r0,[sp]
     19284    010004B54H        02802H    cmp      r0,#2
     19286    010004B56H        0D301H    bcc.n    2 -> 19292
     19288    010004B58H        0DF01H    svc      1
     19290    010004B5AH        00113H    ; LineNo: 275
     19292    010004B5CH        04904H    ldr      r1,[pc,#16] -> 19312 ; Global 02002FC94H
     19294    010004B5EH        00080H    lsls     r0,r0,#2
     19296    010004B60H        01808H    adds     r0,r1,r0
     19298    010004B62H        06800H    ldr      r0,[r0]
     19300    010004B64H        06C00H    ldr      r0,[r0,#64]
  END Tid;
     19302    010004B66H        06840H    ldr      r0,[r0,#4]
     19304    010004B68H        0B001H    add      sp,#4
     19306    010004B6AH        0BD00H    pop      { pc }
     19308    010004B6CH    0D0000000H    ; Const 0D0000000H -805306368
     19312    010004B70H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Prio*(t: Thread): INTEGER;
    RETURN t.prio
     19316    010004B74H        0B501H    push     { r0, lr }
  END Prio;
     19318    010004B76H        09800H    ldr      r0,[sp]
     19320    010004B78H        06800H    ldr      r0,[r0]
     19322    010004B7AH        0B001H    add      sp,#4
     19324    010004B7CH        0BD00H    pop      { pc }
     19326    010004B7EH        046C0H    nop

  PROCEDURE Kernel.loopc;
    VAR tid, cid: INTEGER; t, t0: Thread; ctx: CoreContext; devFlags: SET;
  BEGIN
     19328    010004B80H        0B500H    push     { lr }
     19330    010004B82H        0B086H    sub      sp,#24
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19332    010004B84H        0486FH    ldr      r0,[pc,#444] -> 19780 ; Const 0D0000000H -805306368
     19334    010004B86H        06801H    ldr      r1,[r0]
     19336    010004B88H        09101H    str      r1,[sp,#4]
    Memory.ResetMainStack(cid, 128);  
     19338    010004B8AH        09801H    ldr      r0,[sp,#4]
     19340    010004B8CH        02180H    movs     r1,#128
     19342    010004B8EH    0F7FCFF4FH    bl.w     Memory.ResetMainStack
     19346    010004B92H        0E000H    b        0 -> 19350
     19348    010004B94H        00122H    ; LineNo: 290
    ctx := coreCon[cid];
     19350    010004B96H        09801H    ldr      r0,[sp,#4]
     19352    010004B98H        02802H    cmp      r0,#2
     19354    010004B9AH        0D301H    bcc.n    2 -> 19360
     19356    010004B9CH        0DF01H    svc      1
     19358    010004B9EH        00123H    ; LineNo: 291
     19360    010004BA0H        04969H    ldr      r1,[pc,#420] -> 19784 ; Global 02002FC94H
     19362    010004BA2H        00080H    lsls     r0,r0,#2
     19364    010004BA4H        01808H    adds     r0,r1,r0
     19366    010004BA6H        06800H    ldr      r0,[r0]
     19368    010004BA8H        09004H    str      r0,[sp,#16]
    ctx.Ct := NIL;
     19370    010004BAAH        02000H    movs     r0,#0
     19372    010004BACH        09904H    ldr      r1,[sp,#16]
     19374    010004BAEH        06408H    str      r0,[r1,#64]
    REPEAT
      IF SysTick.Tick() THEN
     19376    010004BB0H    0F7FFFD64H    bl.w     SysTick.Tick
     19380    010004BB4H        0E000H    b        0 -> 19384
     19382    010004BB6H        00126H    ; LineNo: 294
     19384    010004BB8H        02101H    movs     r1,#1
     19386    010004BBAH        04208H    tst      r0,r1
     19388    010004BBCH        0D101H    bne.n    2 -> 19394
     19390    010004BBEH        0E0B1H    b        354 -> 19748
     19392    010004BC0H        046C0H    nop
        tid := 0;
     19394    010004BC2H        02000H    movs     r0,#0
     19396    010004BC4H        09000H    str      r0,[sp]
        WHILE tid < ctx.numThreads DO
     19398    010004BC6H        09800H    ldr      r0,[sp]
     19400    010004BC8H        09904H    ldr      r1,[sp,#16]
     19402    010004BCAH        06CC9H    ldr      r1,[r1,#76]
     19404    010004BCCH        04288H    cmp      r0,r1
     19406    010004BCEH        0DB01H    blt.n    2 -> 19412
     19408    010004BD0H        0E0A8H    b        336 -> 19748
     19410    010004BD2H        046C0H    nop
          t := ctx.threads[tid];
     19412    010004BD4H        09800H    ldr      r0,[sp]
     19414    010004BD6H        02810H    cmp      r0,#16
     19416    010004BD8H        0D301H    bcc.n    2 -> 19422
     19418    010004BDAH        0DF01H    svc      1
     19420    010004BDCH        00129H    ; LineNo: 297
     19422    010004BDEH        09904H    ldr      r1,[sp,#16]
     19424    010004BE0H        00080H    lsls     r0,r0,#2
     19426    010004BE2H        01808H    adds     r0,r1,r0
     19428    010004BE4H        06800H    ldr      r0,[r0]
     19430    010004BE6H        09002H    str      r0,[sp,#8]
          t0 := NIL;
     19432    010004BE8H        02000H    movs     r0,#0
     19434    010004BEAH        09003H    str      r0,[sp,#12]
          IF t.state = StateEnabled THEN
     19436    010004BECH        09802H    ldr      r0,[sp,#8]
     19438    010004BEEH        06880H    ldr      r0,[r0,#8]
     19440    010004BF0H        02800H    cmp      r0,#0
     19442    010004BF2H        0D001H    beq.n    2 -> 19448
     19444    010004BF4H        0E087H    b        270 -> 19718
     19446    010004BF6H        046C0H    nop
            t.retCode := TrigNone;
     19448    010004BF8H        02000H    movs     r0,#0
     19450    010004BFAH        09902H    ldr      r1,[sp,#8]
     19452    010004BFCH        06288H    str      r0,[r1,#40]
            IF (t.delay <= 0) & (t.period = 0) & (t.devAddr = 0) THEN  
     19454    010004BFEH        09802H    ldr      r0,[sp,#8]
     19456    010004C00H        06940H    ldr      r0,[r0,#20]
     19458    010004C02H        02800H    cmp      r0,#0
     19460    010004C04H        0DD01H    ble.n    2 -> 19466
     19462    010004C06H        0E010H    b        32 -> 19498
     19464    010004C08H        046C0H    nop
     19466    010004C0AH        09802H    ldr      r0,[sp,#8]
     19468    010004C0CH        068C0H    ldr      r0,[r0,#12]
     19470    010004C0EH        02800H    cmp      r0,#0
     19472    010004C10H        0D001H    beq.n    2 -> 19478
     19474    010004C12H        0E00AH    b        20 -> 19498
     19476    010004C14H        046C0H    nop
     19478    010004C16H        09802H    ldr      r0,[sp,#8]
     19480    010004C18H        06980H    ldr      r0,[r0,#24]
     19482    010004C1AH        02800H    cmp      r0,#0
     19484    010004C1CH        0D001H    beq.n    2 -> 19490
     19486    010004C1EH        0E004H    b        8 -> 19498
     19488    010004C20H        046C0H    nop
              t0 := t;
     19490    010004C22H        09802H    ldr      r0,[sp,#8]
     19492    010004C24H        09003H    str      r0,[sp,#12]
            ELSE
              IF t.period > 0 THEN  
     19494    010004C26H        0E06EH    b        220 -> 19718
     19496    010004C28H        046C0H    nop
     19498    010004C2AH        09802H    ldr      r0,[sp,#8]
     19500    010004C2CH        068C0H    ldr      r0,[r0,#12]
     19502    010004C2EH        02800H    cmp      r0,#0
     19504    010004C30H        0DC01H    bgt.n    2 -> 19510
     19506    010004C32H        0E017H    b        46 -> 19556
     19508    010004C34H        046C0H    nop
                DEC(t.ticker, ctx.loopPeriod);
     19510    010004C36H        09804H    ldr      r0,[sp,#16]
     19512    010004C38H        06D00H    ldr      r0,[r0,#80]
     19514    010004C3AH        09902H    ldr      r1,[sp,#8]
     19516    010004C3CH        03110H    adds     r1,#16
     19518    010004C3EH        0680AH    ldr      r2,[r1]
     19520    010004C40H        01A12H    subs     r2,r2,r0
     19522    010004C42H        0600AH    str      r2,[r1]
                IF t.ticker <= 0 THEN
     19524    010004C44H        09802H    ldr      r0,[sp,#8]
     19526    010004C46H        06900H    ldr      r0,[r0,#16]
     19528    010004C48H        02800H    cmp      r0,#0
     19530    010004C4AH        0DD01H    ble.n    2 -> 19536
     19532    010004C4CH        0E00AH    b        20 -> 19556
     19534    010004C4EH        046C0H    nop
                  t.ticker := t.ticker + t.period;
     19536    010004C50H        09802H    ldr      r0,[sp,#8]
     19538    010004C52H        06900H    ldr      r0,[r0,#16]
     19540    010004C54H        09902H    ldr      r1,[sp,#8]
     19542    010004C56H        068C9H    ldr      r1,[r1,#12]
     19544    010004C58H        01840H    adds     r0,r0,r1
     19546    010004C5AH        09902H    ldr      r1,[sp,#8]
     19548    010004C5CH        06108H    str      r0,[r1,#16]
                  t.retCode := TrigPeriod
                END
     19550    010004C5EH        02001H    movs     r0,#1
     19552    010004C60H        09902H    ldr      r1,[sp,#8]
     19554    010004C62H        06288H    str      r0,[r1,#40]
              END;
              IF t.delay > 0 THEN  
     19556    010004C64H        09802H    ldr      r0,[sp,#8]
     19558    010004C66H        06940H    ldr      r0,[r0,#20]
     19560    010004C68H        02800H    cmp      r0,#0
     19562    010004C6AH        0DC01H    bgt.n    2 -> 19568
     19564    010004C6CH        0E012H    b        36 -> 19604
     19566    010004C6EH        046C0H    nop
                DEC(t.delay, ctx.loopPeriod);
     19568    010004C70H        09804H    ldr      r0,[sp,#16]
     19570    010004C72H        06D00H    ldr      r0,[r0,#80]
     19572    010004C74H        09902H    ldr      r1,[sp,#8]
     19574    010004C76H        03114H    adds     r1,#20
     19576    010004C78H        0680AH    ldr      r2,[r1]
     19578    010004C7AH        01A12H    subs     r2,r2,r0
     19580    010004C7CH        0600AH    str      r2,[r1]
                IF t.delay <= 0 THEN
     19582    010004C7EH        09802H    ldr      r0,[sp,#8]
     19584    010004C80H        06940H    ldr      r0,[r0,#20]
     19586    010004C82H        02800H    cmp      r0,#0
     19588    010004C84H        0DD01H    ble.n    2 -> 19594
     19590    010004C86H        0E005H    b        10 -> 19604
     19592    010004C88H        046C0H    nop
                  t0 := t;
     19594    010004C8AH        09802H    ldr      r0,[sp,#8]
     19596    010004C8CH        09003H    str      r0,[sp,#12]
                  t.retCode := TrigDelay
                END
     19598    010004C8EH        02002H    movs     r0,#2
     19600    010004C90H        09902H    ldr      r1,[sp,#8]
     19602    010004C92H        06288H    str      r0,[r1,#40]
              END;
              IF t.devAddr # 0 THEN  
     19604    010004C94H        09802H    ldr      r0,[sp,#8]
     19606    010004C96H        06980H    ldr      r0,[r0,#24]
     19608    010004C98H        02800H    cmp      r0,#0
     19610    010004C9AH        0D101H    bne.n    2 -> 19616
     19612    010004C9CH        0E01FH    b        62 -> 19678
     19614    010004C9EH        046C0H    nop
                SYSTEM.GET(t.devAddr, devFlags);
     19616    010004CA0H        09802H    ldr      r0,[sp,#8]
     19618    010004CA2H        06980H    ldr      r0,[r0,#24]
     19620    010004CA4H        06801H    ldr      r1,[r0]
     19622    010004CA6H        09105H    str      r1,[sp,#20]
                IF (t.devFlagsSet * devFlags # {}) OR (devFlags * t.devFlagsClr # t.devFlagsClr) THEN
     19624    010004CA8H        09802H    ldr      r0,[sp,#8]
     19626    010004CAAH        069C0H    ldr      r0,[r0,#28]
     19628    010004CACH        09905H    ldr      r1,[sp,#20]
     19630    010004CAEH        04008H    ands     r0,r1
     19632    010004CB0H        02100H    movs     r1,#0
     19634    010004CB2H        04288H    cmp      r0,r1
     19636    010004CB4H        0D001H    beq.n    2 -> 19642
     19638    010004CB6H        0E00AH    b        20 -> 19662
     19640    010004CB8H        046C0H    nop
     19642    010004CBAH        09805H    ldr      r0,[sp,#20]
     19644    010004CBCH        09902H    ldr      r1,[sp,#8]
     19646    010004CBEH        06A09H    ldr      r1,[r1,#32]
     19648    010004CC0H        04008H    ands     r0,r1
     19650    010004CC2H        09902H    ldr      r1,[sp,#8]
     19652    010004CC4H        06A09H    ldr      r1,[r1,#32]
     19654    010004CC6H        04288H    cmp      r0,r1
     19656    010004CC8H        0D101H    bne.n    2 -> 19662
     19658    010004CCAH        0E008H    b        16 -> 19678
     19660    010004CCCH        046C0H    nop
                  t0 := t;
     19662    010004CCEH        09802H    ldr      r0,[sp,#8]
     19664    010004CD0H        09003H    str      r0,[sp,#12]
                  t.devAddr := 0;
     19666    010004CD2H        02000H    movs     r0,#0
     19668    010004CD4H        09902H    ldr      r1,[sp,#8]
     19670    010004CD6H        06188H    str      r0,[r1,#24]
                  t.retCode := TrigDevice
                END
     19672    010004CD8H        02003H    movs     r0,#3
     19674    010004CDAH        09902H    ldr      r1,[sp,#8]
     19676    010004CDCH        06288H    str      r0,[r1,#40]
              END;
              IF t.retCode = TrigPeriod THEN  
     19678    010004CDEH        09802H    ldr      r0,[sp,#8]
     19680    010004CE0H        06A80H    ldr      r0,[r0,#40]
     19682    010004CE2H        02801H    cmp      r0,#1
     19684    010004CE4H        0D001H    beq.n    2 -> 19690
     19686    010004CE6H        0E00EH    b        28 -> 19718
     19688    010004CE8H        046C0H    nop
                IF (t.delay <= 0) & (t.devAddr = 0) THEN  
     19690    010004CEAH        09802H    ldr      r0,[sp,#8]
     19692    010004CECH        06940H    ldr      r0,[r0,#20]
     19694    010004CEEH        02800H    cmp      r0,#0
     19696    010004CF0H        0DD01H    ble.n    2 -> 19702
     19698    010004CF2H        0E008H    b        16 -> 19718
     19700    010004CF4H        046C0H    nop
     19702    010004CF6H        09802H    ldr      r0,[sp,#8]
     19704    010004CF8H        06980H    ldr      r0,[r0,#24]
     19706    010004CFAH        02800H    cmp      r0,#0
     19708    010004CFCH        0D001H    beq.n    2 -> 19714
     19710    010004CFEH        0E002H    b        4 -> 19718
     19712    010004D00H        046C0H    nop
                  t0 := t
                END
     19714    010004D02H        09802H    ldr      r0,[sp,#8]
     19716    010004D04H        09003H    str      r0,[sp,#12]
              END
            END
          END;
          IF t0 # NIL THEN
     19718    010004D06H        09803H    ldr      r0,[sp,#12]
     19720    010004D08H        02800H    cmp      r0,#0
     19722    010004D0AH        0D101H    bne.n    2 -> 19728
     19724    010004D0CH        0E006H    b        12 -> 19740
     19726    010004D0EH        046C0H    nop
            slotIn(t, ctx)
     19728    010004D10H        09802H    ldr      r0,[sp,#8]
     19730    010004D12H        09904H    ldr      r1,[sp,#16]
          END;
     19732    010004D14H    0F7FFFCF2H    bl.w     Kernel.slotIn
     19736    010004D18H        0E000H    b        0 -> 19740
     19738    010004D1AH        0014FH    ; LineNo: 335
          INC(tid)
        END
     19740    010004D1CH        09800H    ldr      r0,[sp]
     19742    010004D1EH        03001H    adds     r0,#1
     19744    010004D20H        09000H    str      r0,[sp]
     19746    010004D22H        0E750H    b        -352 -> 19398
      END;
      WHILE ctx.ct # NIL DO
     19748    010004D24H        09804H    ldr      r0,[sp,#16]
     19750    010004D26H        06C40H    ldr      r0,[r0,#68]
     19752    010004D28H        02800H    cmp      r0,#0
     19754    010004D2AH        0D101H    bne.n    2 -> 19760
     19756    010004D2CH        0E026H    b        76 -> 19836
     19758    010004D2EH        046C0H    nop
        t := ctx.ct;
     19760    010004D30H        09804H    ldr      r0,[sp,#16]
     19762    010004D32H        06C40H    ldr      r0,[r0,#68]
     19764    010004D34H        09002H    str      r0,[sp,#8]
        ctx.ct := ctx.ct.next; EXCL(ctx.queued, t.tid);  
     19766    010004D36H        09804H    ldr      r0,[sp,#16]
     19768    010004D38H        06C40H    ldr      r0,[r0,#68]
     19770    010004D3AH        06AC0H    ldr      r0,[r0,#44]
     19772    010004D3CH        09904H    ldr      r1,[sp,#16]
     19774    010004D3EH        06448H    str      r0,[r1,#68]
     19776    010004D40H    0F000F804H    bl.w     Kernel.loopc + 460
     19780    010004D44H    0D0000000H    ; Const 0D0000000H -805306368
     19784    010004D48H    02002FC94H    ; Global 02002FC94H
     19788    010004D4CH        09802H    ldr      r0,[sp,#8]
     19790    010004D4EH        06840H    ldr      r0,[r0,#4]
     19792    010004D50H        02101H    movs     r1,#1
     19794    010004D52H        04081H    lsls     r1,r0
     19796    010004D54H        09A04H    ldr      r2,[sp,#16]
     19798    010004D56H        03248H    adds     r2,#72
     19800    010004D58H        06813H    ldr      r3,[r2]
     19802    010004D5AH        0438BH    bics     r3,r1
     19804    010004D5CH        06013H    str      r3,[r2]
        ctx.Ct := t;
     19806    010004D5EH        09802H    ldr      r0,[sp,#8]
     19808    010004D60H        09904H    ldr      r1,[sp,#16]
     19810    010004D62H        06408H    str      r0,[r1,#64]
        Coroutines.Transfer(ctx.loop, t.cor);
     19812    010004D64H        09804H    ldr      r0,[sp,#16]
     19814    010004D66H        06D40H    ldr      r0,[r0,#84]
     19816    010004D68H        09902H    ldr      r1,[sp,#8]
     19818    010004D6AH        06A49H    ldr      r1,[r1,#36]
     19820    010004D6CH    0F7FFFC78H    bl.w     Coroutines.Transfer
     19824    010004D70H        0E000H    b        0 -> 19828
     19826    010004D72H        00164H    ; LineNo: 356
        ctx.Ct := NIL
      END;
     19828    010004D74H        02000H    movs     r0,#0
     19830    010004D76H        09904H    ldr      r1,[sp,#16]
     19832    010004D78H        06408H    str      r0,[r1,#64]
     19834    010004D7AH        0E7D3H    b        -90 -> 19748
    UNTIL FALSE
  END loopc;
     19836    010004D7CH        04280H    cmp      r0,r0
     19838    010004D7EH        0D100H    bne.n    0 -> 19842
     19840    010004D80H        0E716H    b        -468 -> 19376
     19842    010004D82H        0B006H    add      sp,#24
     19844    010004D84H        0BD00H    pop      { pc }
     19846    010004D86H        046C0H    nop

  PROCEDURE Kernel.Run*;
    CONST SP = 13; R11 = 11;
    VAR cid: INTEGER;
  BEGIN
     19848    010004D88H        0B500H    push     { lr }
     19850    010004D8AH        0B081H    sub      sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19852    010004D8CH        04815H    ldr      r0,[pc,#84] -> 19940 ; Const 0D0000000H -805306368
     19854    010004D8EH        06801H    ldr      r1,[r0]
     19856    010004D90H        09100H    str      r1,[sp]
    SYSTEM.LDREG(R11, SYSTEM.REG(SP));
     19858    010004D92H        04668H    mov      r0,sp
     19860    010004D94H        04683H    mov      r11,r0
    SYSTEM.EMIT(MCU.MSR_PSP_R11);
     19862    010004D96H    0F38B8809H    .word 0x8809F38B /* EMIT */
    SYSTEM.LDREG(R11, ORD({MCU.CONTROL_SPSEL}));
     19866    010004D9AH        02002H    movs     r0,#2
     19868    010004D9CH        04683H    mov      r11,r0
    SYSTEM.EMIT(MCU.MSR_CTL_R11);
     19870    010004D9EH    0F38B8814H    .word 0x8814F38B /* EMIT */
    SYSTEM.EMIT(MCU.ISB);
     19874    010004DA2H    0F3BF8F6FH    isb
    SysTick.Enable;
     19878    010004DA6H    0F7FFFC75H    bl.w     SysTick.Enable
     19882    010004DAAH        0E000H    b        0 -> 19886
     19884    010004DACH        0017CH    ; LineNo: 380
    Coroutines.Transfer(coreCon[cid].jump, coreCon[cid].loop)
     19886    010004DAEH        09800H    ldr      r0,[sp]
     19888    010004DB0H        02802H    cmp      r0,#2
     19890    010004DB2H        0D301H    bcc.n    2 -> 19896
     19892    010004DB4H        0DF01H    svc      1
     19894    010004DB6H        0017DH    ; LineNo: 381
     19896    010004DB8H        0490BH    ldr      r1,[pc,#44] -> 19944 ; Global 02002FC94H
     19898    010004DBAH        00080H    lsls     r0,r0,#2
     19900    010004DBCH        01808H    adds     r0,r1,r0
     19902    010004DBEH        06800H    ldr      r0,[r0]
     19904    010004DC0H        06D80H    ldr      r0,[r0,#88]
     19906    010004DC2H        09900H    ldr      r1,[sp]
     19908    010004DC4H        02902H    cmp      r1,#2
     19910    010004DC6H        0D301H    bcc.n    2 -> 19916
     19912    010004DC8H        0DF01H    svc      1
     19914    010004DCAH        0017DH    ; LineNo: 381
     19916    010004DCCH        04A06H    ldr      r2,[pc,#24] -> 19944 ; Global 02002FC94H
     19918    010004DCEH        00089H    lsls     r1,r1,#2
     19920    010004DD0H        01851H    adds     r1,r2,r1
     19922    010004DD2H        06809H    ldr      r1,[r1]
     19924    010004DD4H        06D49H    ldr      r1,[r1,#84]
  END Run;
     19926    010004DD6H    0F7FFFC43H    bl.w     Coroutines.Transfer
     19930    010004DDAH        0E000H    b        0 -> 19934
     19932    010004DDCH        0017DH    ; LineNo: 381
     19934    010004DDEH        0B001H    add      sp,#4
     19936    010004DE0H        0BD00H    pop      { pc }
     19938    010004DE2H        046C0H    nop
     19940    010004DE4H    0D0000000H    ; Const 0D0000000H -805306368
     19944    010004DE8H    02002FC94H    ; Global 02002FC94H

  PROCEDURE Kernel.Install*(millisecsPerTick: INTEGER);
    VAR i, stkAddr: INTEGER; cid: INTEGER; ctx: CoreContext;
  BEGIN
     19948    010004DECH        0B501H    push     { r0, lr }
     19950    010004DEEH        0B084H    sub      sp,#16
    SYSTEM.GET(MCU.SIO_CPUID, cid);
     19952    010004DF0H        04869H    ldr      r0,[pc,#420] -> 20376 ; Const 0D0000000H -805306368
     19954    010004DF2H        06801H    ldr      r1,[r0]
     19956    010004DF4H        09102H    str      r1,[sp,#8]
    NEW(coreCon[cid]); ASSERT(coreCon[cid] # NIL, Errors.HeapOverflow);
     19958    010004DF6H        09802H    ldr      r0,[sp,#8]
     19960    010004DF8H        02802H    cmp      r0,#2
     19962    010004DFAH        0D301H    bcc.n    2 -> 19968
     19964    010004DFCH        0DF01H    svc      1
     19966    010004DFEH        00189H    ; LineNo: 393
     19968    010004E00H        0496BH    ldr      r1,[pc,#428] -> 20400 ; Global 02002FC94H
     19970    010004E02H        00080H    lsls     r0,r0,#2
     19972    010004E04H        01808H    adds     r0,r1,r0
     19974    010004E06H        04965H    ldr      r1,[pc,#404] -> 20380 ; Const 0FFFFF8DCH -1828
     19976    010004E08H        0467AH    mov      r2,pc
     19978    010004E0AH        01889H    adds     r1,r1,r2
     19980    010004E0CH    0F7FCFAECH    bl.w     MAU.New
     19984    010004E10H        0E000H    b        0 -> 19988
     19986    010004E12H        00189H    ; LineNo: 393
     19988    010004E14H        09802H    ldr      r0,[sp,#8]
     19990    010004E16H        02802H    cmp      r0,#2
     19992    010004E18H        0D301H    bcc.n    2 -> 19998
     19994    010004E1AH        0DF01H    svc      1
     19996    010004E1CH        00189H    ; LineNo: 393
     19998    010004E1EH        04964H    ldr      r1,[pc,#400] -> 20400 ; Global 02002FC94H
     20000    010004E20H        00080H    lsls     r0,r0,#2
     20002    010004E22H        01808H    adds     r0,r1,r0
     20004    010004E24H        06800H    ldr      r0,[r0]
     20006    010004E26H        02800H    cmp      r0,#0
     20008    010004E28H        0D101H    bne.n    2 -> 20014
     20010    010004E2AH        0DF6CH    svc      108
     20012    010004E2CH        00189H    ; LineNo: 393
    ctx := coreCon[cid];
     20014    010004E2EH        09802H    ldr      r0,[sp,#8]
     20016    010004E30H        02802H    cmp      r0,#2
     20018    010004E32H        0D301H    bcc.n    2 -> 20024
     20020    010004E34H        0DF01H    svc      1
     20022    010004E36H        0018AH    ; LineNo: 394
     20024    010004E38H        0495DH    ldr      r1,[pc,#372] -> 20400 ; Global 02002FC94H
     20026    010004E3AH        00080H    lsls     r0,r0,#2
     20028    010004E3CH        01808H    adds     r0,r1,r0
     20030    010004E3EH        06800H    ldr      r0,[r0]
     20032    010004E40H        09003H    str      r0,[sp,#12]
    ctx.Ct := NIL; ctx.ct := NIL;
     20034    010004E42H        02000H    movs     r0,#0
     20036    010004E44H        09903H    ldr      r1,[sp,#12]
     20038    010004E46H        06408H    str      r0,[r1,#64]
     20040    010004E48H        02000H    movs     r0,#0
     20042    010004E4AH        09903H    ldr      r1,[sp,#12]
     20044    010004E4CH        06448H    str      r0,[r1,#68]
    ctx.queued := {};
     20046    010004E4EH        02000H    movs     r0,#0
     20048    010004E50H        09903H    ldr      r1,[sp,#12]
     20050    010004E52H        06488H    str      r0,[r1,#72]
    ctx.numThreads := 0;
     20052    010004E54H        02000H    movs     r0,#0
     20054    010004E56H        09903H    ldr      r1,[sp,#12]
     20056    010004E58H        064C8H    str      r0,[r1,#76]
    ctx.loopPeriod := millisecsPerTick;
     20058    010004E5AH        09804H    ldr      r0,[sp,#16]
     20060    010004E5CH        09903H    ldr      r1,[sp,#12]
     20062    010004E5EH        06508H    str      r0,[r1,#80]
    NEW(ctx.jump); ASSERT(ctx.jump # NIL, Errors.HeapOverflow);
     20064    010004E60H        09803H    ldr      r0,[sp,#12]
     20066    010004E62H        03058H    adds     r0,#88
     20068    010004E64H        04951H    ldr      r1,[pc,#324] -> 20396 ; Global 01000459CH
     20070    010004E66H    0F7FCFABFH    bl.w     MAU.New
     20074    010004E6AH        0E000H    b        0 -> 20078
     20076    010004E6CH        0018FH    ; LineNo: 399
     20078    010004E6EH        09803H    ldr      r0,[sp,#12]
     20080    010004E70H        06D80H    ldr      r0,[r0,#88]
     20082    010004E72H        02800H    cmp      r0,#0
     20084    010004E74H        0D101H    bne.n    2 -> 20090
     20086    010004E76H        0DF6CH    svc      108
     20088    010004E78H        0018FH    ; LineNo: 399
    NEW(ctx.loop); ASSERT(ctx.loop # NIL, Errors.HeapOverflow);
     20090    010004E7AH        09803H    ldr      r0,[sp,#12]
     20092    010004E7CH        03054H    adds     r0,#84
     20094    010004E7EH        0494BH    ldr      r1,[pc,#300] -> 20396 ; Global 01000459CH
     20096    010004E80H    0F7FCFAB2H    bl.w     MAU.New
     20100    010004E84H        0E000H    b        0 -> 20104
     20102    010004E86H        00190H    ; LineNo: 400
     20104    010004E88H        09803H    ldr      r0,[sp,#12]
     20106    010004E8AH        06D40H    ldr      r0,[r0,#84]
     20108    010004E8CH        02800H    cmp      r0,#0
     20110    010004E8EH        0D101H    bne.n    2 -> 20116
     20112    010004E90H        0DF6CH    svc      108
     20114    010004E92H        00190H    ; LineNo: 400
    Memory.AllocLoopStack(stkAddr, LoopStackSize); ASSERT(stkAddr # 0, Errors.StorageOverflow);
     20116    010004E94H        0A801H    add      r0,sp,#4
     20118    010004E96H        02101H    movs     r1,#1
     20120    010004E98H        00209H    lsls     r1,r1,#8
     20122    010004E9AH    0F7FCFD65H    bl.w     Memory.AllocLoopStack
     20126    010004E9EH        0E000H    b        0 -> 20130
     20128    010004EA0H        00191H    ; LineNo: 401
     20130    010004EA2H        09801H    ldr      r0,[sp,#4]
     20132    010004EA4H        02800H    cmp      r0,#0
     20134    010004EA6H        0D101H    bne.n    2 -> 20140
     20136    010004EA8H        0DF6EH    svc      110
     20138    010004EAAH        00191H    ; LineNo: 401
    Coroutines.Init(ctx.loop, stkAddr, LoopStackSize, LoopCorId);
     20140    010004EACH        09803H    ldr      r0,[sp,#12]
     20142    010004EAEH        06D40H    ldr      r0,[r0,#84]
     20144    010004EB0H        09901H    ldr      r1,[sp,#4]
     20146    010004EB2H        02201H    movs     r2,#1
     20148    010004EB4H        00212H    lsls     r2,r2,#8
     20150    010004EB6H        04B3AH    ldr      r3,[pc,#232] -> 20384 ; Const 0FFFFFFFFH -1
     20152    010004EB8H    0F7FFFBC0H    bl.w     Coroutines.Init
     20156    010004EBCH        0E000H    b        0 -> 20160
     20158    010004EBEH        00192H    ; LineNo: 402
    Coroutines.Allocate(ctx.loop, loopc);
     20160    010004EC0H        09803H    ldr      r0,[sp,#12]
     20162    010004EC2H        06D40H    ldr      r0,[r0,#84]
     20164    010004EC4H        04937H    ldr      r1,[pc,#220] -> 20388 ; Const 0FFFFFCB6H -842
     20166    010004EC6H        04479H    add      r1,pc
     20168    010004EC8H    0F7FFFBA8H    bl.w     Coroutines.Allocate
     20172    010004ECCH        0E000H    b        0 -> 20176
     20174    010004ECEH        00193H    ; LineNo: 403
    i := 0;
     20176    010004ED0H        02000H    movs     r0,#0
     20178    010004ED2H        09000H    str      r0,[sp]
    WHILE i < MaxNumThreads DO
     20180    010004ED4H        09800H    ldr      r0,[sp]
     20182    010004ED6H        02810H    cmp      r0,#16
     20184    010004ED8H        0DB01H    blt.n    2 -> 20190
     20186    010004EDAH        0E053H    b        166 -> 20356
     20188    010004EDCH        046C0H    nop
      NEW(ctx.threads[i]); ASSERT(ctx.threads[i] # NIL, Errors.HeapOverflow);
     20190    010004EDEH        09800H    ldr      r0,[sp]
     20192    010004EE0H        02810H    cmp      r0,#16
     20194    010004EE2H        0D301H    bcc.n    2 -> 20200
     20196    010004EE4H        0DF01H    svc      1
     20198    010004EE6H        00199H    ; LineNo: 409
     20200    010004EE8H        09903H    ldr      r1,[sp,#12]
     20202    010004EEAH        00080H    lsls     r0,r0,#2
     20204    010004EECH        01808H    adds     r0,r1,r0
     20206    010004EEEH        0492EH    ldr      r1,[pc,#184] -> 20392 ; Const 0FFFFF7E0H -2080
     20208    010004EF0H        0467AH    mov      r2,pc
     20210    010004EF2H        01889H    adds     r1,r1,r2
     20212    010004EF4H    0F7FCFA78H    bl.w     MAU.New
     20216    010004EF8H        0E000H    b        0 -> 20220
     20218    010004EFAH        00199H    ; LineNo: 409
     20220    010004EFCH        09800H    ldr      r0,[sp]
     20222    010004EFEH        02810H    cmp      r0,#16
     20224    010004F00H        0D301H    bcc.n    2 -> 20230
     20226    010004F02H        0DF01H    svc      1
     20228    010004F04H        00199H    ; LineNo: 409
     20230    010004F06H        09903H    ldr      r1,[sp,#12]
     20232    010004F08H        00080H    lsls     r0,r0,#2
     20234    010004F0AH        01808H    adds     r0,r1,r0
     20236    010004F0CH        06800H    ldr      r0,[r0]
     20238    010004F0EH        02800H    cmp      r0,#0
     20240    010004F10H        0D101H    bne.n    2 -> 20246
     20242    010004F12H        0DF6CH    svc      108
     20244    010004F14H        00199H    ; LineNo: 409
      ctx.threads[i].state := StateSuspended;
     20246    010004F16H        09800H    ldr      r0,[sp]
     20248    010004F18H        02810H    cmp      r0,#16
     20250    010004F1AH        0D301H    bcc.n    2 -> 20256
     20252    010004F1CH        0DF01H    svc      1
     20254    010004F1EH        0019AH    ; LineNo: 410
     20256    010004F20H        09903H    ldr      r1,[sp,#12]
     20258    010004F22H        00080H    lsls     r0,r0,#2
     20260    010004F24H        01808H    adds     r0,r1,r0
     20262    010004F26H        06800H    ldr      r0,[r0]
     20264    010004F28H        02101H    movs     r1,#1
     20266    010004F2AH        06081H    str      r1,[r0,#8]
      ctx.threads[i].tid := i;
     20268    010004F2CH        09800H    ldr      r0,[sp]
     20270    010004F2EH        02810H    cmp      r0,#16
     20272    010004F30H        0D301H    bcc.n    2 -> 20278
     20274    010004F32H        0DF01H    svc      1
     20276    010004F34H        0019BH    ; LineNo: 411
     20278    010004F36H        09903H    ldr      r1,[sp,#12]
     20280    010004F38H        00080H    lsls     r0,r0,#2
     20282    010004F3AH        01808H    adds     r0,r1,r0
     20284    010004F3CH        06800H    ldr      r0,[r0]
     20286    010004F3EH        09900H    ldr      r1,[sp]
     20288    010004F40H        06041H    str      r1,[r0,#4]
      NEW(ctx.threads[i].cor); ASSERT(ctx.threads[i].cor # NIL, Errors.HeapOverflow);
     20290    010004F42H        09800H    ldr      r0,[sp]
     20292    010004F44H        02810H    cmp      r0,#16
     20294    010004F46H        0D301H    bcc.n    2 -> 20300
     20296    010004F48H        0DF01H    svc      1
     20298    010004F4AH        0019CH    ; LineNo: 412
     20300    010004F4CH        09903H    ldr      r1,[sp,#12]
     20302    010004F4EH        00080H    lsls     r0,r0,#2
     20304    010004F50H        01808H    adds     r0,r1,r0
     20306    010004F52H        06800H    ldr      r0,[r0]
     20308    010004F54H        03024H    adds     r0,#36
     20310    010004F56H        04915H    ldr      r1,[pc,#84] -> 20396 ; Global 01000459CH
     20312    010004F58H    0F7FCFA46H    bl.w     MAU.New
     20316    010004F5CH        0E000H    b        0 -> 20320
     20318    010004F5EH        0019CH    ; LineNo: 412
     20320    010004F60H        09800H    ldr      r0,[sp]
     20322    010004F62H        02810H    cmp      r0,#16
     20324    010004F64H        0D301H    bcc.n    2 -> 20330
     20326    010004F66H        0DF01H    svc      1
     20328    010004F68H        0019CH    ; LineNo: 412
     20330    010004F6AH        09903H    ldr      r1,[sp,#12]
     20332    010004F6CH        00080H    lsls     r0,r0,#2
     20334    010004F6EH        01808H    adds     r0,r1,r0
     20336    010004F70H        06800H    ldr      r0,[r0]
     20338    010004F72H        06A40H    ldr      r0,[r0,#36]
     20340    010004F74H        02800H    cmp      r0,#0
     20342    010004F76H        0D101H    bne.n    2 -> 20348
     20344    010004F78H        0DF6CH    svc      108
     20346    010004F7AH        0019CH    ; LineNo: 412
      INC(i)
    END;
     20348    010004F7CH        09800H    ldr      r0,[sp]
     20350    010004F7EH        03001H    adds     r0,#1
     20352    010004F80H        09000H    str      r0,[sp]
     20354    010004F82H        0E7A7H    b        -178 -> 20180
    SysTick.Init(millisecsPerTick * SloMo)
     20356    010004F84H        09804H    ldr      r0,[sp,#16]
     20358    010004F86H        02101H    movs     r1,#1
     20360    010004F88H        04348H    muls     r0,r1
  END Install;
     20362    010004F8AH    0F7FFFB8BH    bl.w     SysTick.Init
     20366    010004F8EH        0E000H    b        0 -> 20370
     20368    010004F90H        001A0H    ; LineNo: 416
     20370    010004F92H        0B005H    add      sp,#20
     20372    010004F94H        0BD00H    pop      { pc }
     20374    010004F96H        046C0H    nop
     20376    010004F98H    0D0000000H    ; Const 0D0000000H -805306368
     20380    010004F9CH    0FFFFF8DCH    ; Const 0FFFFF8DCH -1828
     20384    010004FA0H    0FFFFFFFFH    ; Const 0FFFFFFFFH -1
     20388    010004FA4H    0FFFFFCB6H    ; Const 0FFFFFCB6H -842
     20392    010004FA8H    0FFFFF7E0H    ; Const 0FFFFF7E0H -2080
     20396    010004FACH    01000459CH    ; Global 01000459CH
     20400    010004FB0H    02002FC94H    ; Global 02002FC94H

PROCEDURE Kernel..init;
BEGIN
     20404    010004FB4H        0B500H    push     { lr }
  ASSERT(MaxNumThreads <= 32, Errors.ProgError);
     20406    010004FB6H        02010H    movs     r0,#16
     20408    010004FB8H        02820H    cmp      r0,#32
     20410    010004FBAH        0DD01H    ble.n    2 -> 20416
     20412    010004FBCH        0DF68H    svc      104
     20414    010004FBEH        001A4H    ; LineNo: 420
  Done := SuspendMe; Yield := Next
     20416    010004FC0H        04804H    ldr      r0,[pc,#16] -> 20436 ; Const 0FFFFF96EH -1682
     20418    010004FC2H        04478H    add      r0,pc
     20420    010004FC4H        04905H    ldr      r1,[pc,#20] -> 20444 ; Global 02002FC90H
     20422    010004FC6H        06008H    str      r0,[r1]
END .init;
END Kernel.
     20424    010004FC8H        04803H    ldr      r0,[pc,#12] -> 20440 ; Const 0FFFFF8FEH -1794
     20426    010004FCAH        04478H    add      r0,pc
     20428    010004FCCH        04904H    ldr      r1,[pc,#16] -> 20448 ; Global 02002FC8CH
     20430    010004FCEH        06008H    str      r0,[r1]
     20432    010004FD0H        0BD00H    pop      { pc }
     20434    010004FD2H        046C0H    nop
     20436    010004FD4H    0FFFFF96EH    ; Const 0FFFFF96EH -1682
     20440    010004FD8H    0FFFFF8FEH    ; Const 0FFFFF8FEH -1794
     20444    010004FDCH    02002FC90H    ; Global 02002FC90H
     20448    010004FE0H    02002FC8CH    ; Global 02002FC8CH

MODULE LEDext;
     20452    010004FE4H        00000H    ; Pad

  PROCEDURE LEDext.SetLedBits*(v, highBit, lowBit: INTEGER);
    VAR i, numBits: INTEGER; setMask, clearMask: INTEGER;
  BEGIN
     20456    010004FE8H        0B507H    push     { r0, r1, r2, lr }
     20458    010004FEAH        0B084H    sub      sp,#16
    setMask := 0; clearMask := 0;
     20460    010004FECH        02000H    movs     r0,#0
     20462    010004FEEH        09002H    str      r0,[sp,#8]
     20464    010004FF0H        02000H    movs     r0,#0
     20466    010004FF2H        09003H    str      r0,[sp,#12]
    i := 0; numBits := highBit - lowBit;
     20468    010004FF4H        02000H    movs     r0,#0
     20470    010004FF6H        09000H    str      r0,[sp]
     20472    010004FF8H        09805H    ldr      r0,[sp,#20]
     20474    010004FFAH        09906H    ldr      r1,[sp,#24]
     20476    010004FFCH        01A40H    subs     r0,r0,r1
     20478    010004FFEH        09001H    str      r0,[sp,#4]
    WHILE i <= numBits DO
     20480    010005000H        09800H    ldr      r0,[sp]
     20482    010005002H        09901H    ldr      r1,[sp,#4]
     20484    010005004H        04288H    cmp      r0,r1
     20486    010005006H        0DD01H    ble.n    2 -> 20492
     20488    010005008H        0E030H    b        96 -> 20588
     20490    01000500AH        046C0H    nop
      IF i IN BITS(v) THEN
     20492    01000500CH        09804H    ldr      r0,[sp,#16]
     20494    01000500EH        09900H    ldr      r1,[sp]
     20496    010005010H        02201H    movs     r2,#1
     20498    010005012H        0408AH    lsls     r2,r1
     20500    010005014H        04210H    tst      r0,r2
     20502    010005016H        0D101H    bne.n    2 -> 20508
     20504    010005018H        0E013H    b        38 -> 20546
     20506    01000501AH        046C0H    nop
        INCL(BITS(setMask), LED[i + lowBit])
     20508    01000501CH        09800H    ldr      r0,[sp]
     20510    01000501EH        09906H    ldr      r1,[sp,#24]
     20512    010005020H        01840H    adds     r0,r0,r1
     20514    010005022H        02808H    cmp      r0,#8
     20516    010005024H        0D301H    bcc.n    2 -> 20522
     20518    010005026H        0DF01H    svc      1
     20520    010005028H        00040H    ; LineNo: 64
     20522    01000502AH        04916H    ldr      r1,[pc,#88] -> 20612 ; Global 02002FC6CH
     20524    01000502CH        00080H    lsls     r0,r0,#2
     20526    01000502EH        01808H    adds     r0,r1,r0
      ELSE
     20528    010005030H        06800H    ldr      r0,[r0]
     20530    010005032H        02101H    movs     r1,#1
     20532    010005034H        04081H    lsls     r1,r0
     20534    010005036H        0AA02H    add      r2,sp,#8
     20536    010005038H        06813H    ldr      r3,[r2]
     20538    01000503AH        0430BH    orrs     r3,r1
     20540    01000503CH        06013H    str      r3,[r2]
        INCL(BITS(clearMask), LED[i + lowBit])
     20542    01000503EH        0E011H    b        34 -> 20580
     20544    010005040H        046C0H    nop
     20546    010005042H        09800H    ldr      r0,[sp]
     20548    010005044H        09906H    ldr      r1,[sp,#24]
     20550    010005046H        01840H    adds     r0,r0,r1
     20552    010005048H        02808H    cmp      r0,#8
     20554    01000504AH        0D301H    bcc.n    2 -> 20560
     20556    01000504CH        0DF01H    svc      1
     20558    01000504EH        00042H    ; LineNo: 66
     20560    010005050H        0490CH    ldr      r1,[pc,#48] -> 20612 ; Global 02002FC6CH
     20562    010005052H        00080H    lsls     r0,r0,#2
     20564    010005054H        01808H    adds     r0,r1,r0
      END;
     20566    010005056H        06800H    ldr      r0,[r0]
     20568    010005058H        02101H    movs     r1,#1
     20570    01000505AH        04081H    lsls     r1,r0
     20572    01000505CH        0AA03H    add      r2,sp,#12
     20574    01000505EH        06813H    ldr      r3,[r2]
     20576    010005060H        0430BH    orrs     r3,r1
     20578    010005062H        06013H    str      r3,[r2]
      INC(i)
    END;
     20580    010005064H        09800H    ldr      r0,[sp]
     20582    010005066H        03001H    adds     r0,#1
     20584    010005068H        09000H    str      r0,[sp]
     20586    01000506AH        0E7C9H    b        -110 -> 20480
    GPIO.Clear(BITS(clearMask));
     20588    01000506CH        09803H    ldr      r0,[sp,#12]
     20590    01000506EH    0F7FBFFD5H    bl.w     GPIO.Clear
     20594    010005072H        0E000H    b        0 -> 20598
     20596    010005074H        00046H    ; LineNo: 70
    GPIO.Set(BITS(setMask))
     20598    010005076H        09802H    ldr      r0,[sp,#8]
  END SetLedBits;
     20600    010005078H    0F7FBFFC8H    bl.w     GPIO.Set
     20604    01000507CH        0E000H    b        0 -> 20608
     20606    01000507EH        00047H    ; LineNo: 71
     20608    010005080H        0B007H    add      sp,#28
     20610    010005082H        0BD00H    pop      { pc }
     20612    010005084H    02002FC6CH    ; Global 02002FC6CH

  PROCEDURE LEDext.SetValue*(v: INTEGER);
  BEGIN
     20616    010005088H        0B501H    push     { r0, lr }
    SetLedBits(v, 7, 0)
     20618    01000508AH        09800H    ldr      r0,[sp]
     20620    01000508CH        02107H    movs     r1,#7
     20622    01000508EH        02200H    movs     r2,#0
  END SetValue;
     20624    010005090H    0F7FFFFAAH    bl.w     LEDext.SetLedBits
     20628    010005094H        0E000H    b        0 -> 20632
     20630    010005096H        0004DH    ; LineNo: 77
     20632    010005098H        0B001H    add      sp,#4
     20634    01000509AH        0BD00H    pop      { pc }

  PROCEDURE LEDext.init;
    VAR i: INTEGER; en: INTEGER;
  BEGIN
     20636    01000509CH        0B500H    push     { lr }
     20638    01000509EH        0B082H    sub      sp,#8
    LED[0] := LEDpinNo0;
     20640    0100050A0H        04827H    ldr      r0,[pc,#156] -> 20800 ; Global 02002FC6CH
     20642    0100050A2H        02102H    movs     r1,#2
     20644    0100050A4H        06001H    str      r1,[r0]
    LED[1] := LEDpinNo1;
     20646    0100050A6H        04826H    ldr      r0,[pc,#152] -> 20800 ; Global 02002FC6CH
     20648    0100050A8H        02103H    movs     r1,#3
     20650    0100050AAH        06041H    str      r1,[r0,#4]
    LED[2] := LEDpinNo2;
     20652    0100050ACH        04824H    ldr      r0,[pc,#144] -> 20800 ; Global 02002FC6CH
     20654    0100050AEH        02106H    movs     r1,#6
     20656    0100050B0H        06081H    str      r1,[r0,#8]
    LED[3] := LEDpinNo3;
     20658    0100050B2H        04823H    ldr      r0,[pc,#140] -> 20800 ; Global 02002FC6CH
     20660    0100050B4H        02107H    movs     r1,#7
     20662    0100050B6H        060C1H    str      r1,[r0,#12]
    LED[4] := LEDpinNo4;
     20664    0100050B8H        04821H    ldr      r0,[pc,#132] -> 20800 ; Global 02002FC6CH
     20666    0100050BAH        02108H    movs     r1,#8
     20668    0100050BCH        06101H    str      r1,[r0,#16]
    LED[5] := LEDpinNo5;
     20670    0100050BEH        04820H    ldr      r0,[pc,#128] -> 20800 ; Global 02002FC6CH
     20672    0100050C0H        02109H    movs     r1,#9
     20674    0100050C2H        06141H    str      r1,[r0,#20]
    LED[6] := LEDpinNo6;
     20676    0100050C4H        0481EH    ldr      r0,[pc,#120] -> 20800 ; Global 02002FC6CH
     20678    0100050C6H        0210EH    movs     r1,#14
     20680    0100050C8H        06181H    str      r1,[r0,#24]
    LED[7] := LEDpinNo7;
     20682    0100050CAH        0481DH    ldr      r0,[pc,#116] -> 20800 ; Global 02002FC6CH
     20684    0100050CCH        0210FH    movs     r1,#15
     20686    0100050CEH        061C1H    str      r1,[r0,#28]
    GPIO.SetFunction(LEDpinNoPico, GPIO.Fsio);
     20688    0100050D0H        02019H    movs     r0,#25
     20690    0100050D2H        02105H    movs     r1,#5
     20692    0100050D4H    0F7FBFEB6H    bl.w     GPIO.SetFunction
     20696    0100050D8H        0E000H    b        0 -> 20700
     20698    0100050DAH        0005CH    ; LineNo: 92
    GPIO.OutputEnable({LEDpinNoPico});
     20700    0100050DCH        02001H    movs     r0,#1
     20702    0100050DEH        00640H    lsls     r0,r0,#25
     20704    0100050E0H    0F7FBFFDAH    bl.w     GPIO.OutputEnable
     20708    0100050E4H        0E000H    b        0 -> 20712
     20710    0100050E6H        0005DH    ; LineNo: 93
    i := 0;
     20712    0100050E8H        02000H    movs     r0,#0
     20714    0100050EAH        09000H    str      r0,[sp]
    WHILE i < NumLeds DO
     20716    0100050ECH        09800H    ldr      r0,[sp]
     20718    0100050EEH        02808H    cmp      r0,#8
     20720    0100050F0H        0DB01H    blt.n    2 -> 20726
     20722    0100050F2H        0E022H    b        68 -> 20794
     20724    0100050F4H        046C0H    nop
      GPIO.SetFunction(LED[i], GPIO.Fsio);
     20726    0100050F6H        09800H    ldr      r0,[sp]
     20728    0100050F8H        02808H    cmp      r0,#8
     20730    0100050FAH        0D301H    bcc.n    2 -> 20736
     20732    0100050FCH        0DF01H    svc      1
     20734    0100050FEH        00060H    ; LineNo: 96
     20736    010005100H        0490FH    ldr      r1,[pc,#60] -> 20800 ; Global 02002FC6CH
     20738    010005102H        00080H    lsls     r0,r0,#2
     20740    010005104H        01808H    adds     r0,r1,r0
     20742    010005106H        06800H    ldr      r0,[r0]
     20744    010005108H        02105H    movs     r1,#5
     20746    01000510AH    0F7FBFE9BH    bl.w     GPIO.SetFunction
     20750    01000510EH        0E000H    b        0 -> 20754
     20752    010005110H        00060H    ; LineNo: 96
      GPIO.OutputEnable(BITS(ORD({LED[i]})));
     20754    010005112H        09800H    ldr      r0,[sp]
     20756    010005114H        02808H    cmp      r0,#8
     20758    010005116H        0D301H    bcc.n    2 -> 20764
     20760    010005118H        0DF01H    svc      1
     20762    01000511AH        00061H    ; LineNo: 97
     20764    01000511CH        04908H    ldr      r1,[pc,#32] -> 20800 ; Global 02002FC6CH
     20766    01000511EH        00080H    lsls     r0,r0,#2
     20768    010005120H        01808H    adds     r0,r1,r0
     20770    010005122H        06800H    ldr      r0,[r0]
     20772    010005124H        02101H    movs     r1,#1
     20774    010005126H        04081H    lsls     r1,r0
     20776    010005128H        04608H    mov      r0,r1
     20778    01000512AH    0F7FBFFB5H    bl.w     GPIO.OutputEnable
     20782    01000512EH        0E000H    b        0 -> 20786
     20784    010005130H        00061H    ; LineNo: 97
      INC(i)
    END
     20786    010005132H        09800H    ldr      r0,[sp]
     20788    010005134H        03001H    adds     r0,#1
     20790    010005136H        09000H    str      r0,[sp]
     20792    010005138H        0E7D8H    b        -80 -> 20716
  END init;
     20794    01000513AH        0B002H    add      sp,#8
     20796    01000513CH        0BD00H    pop      { pc }
     20798    01000513EH        046C0H    nop
     20800    010005140H    02002FC6CH    ; Global 02002FC6CH

PROCEDURE LEDext..init;
BEGIN
     20804    010005144H        0B500H    push     { lr }
  init
END .init;
END LEDext.
     20806    010005146H    0F7FFFFA9H    bl.w     LEDext.init
     20810    01000514AH        0E000H    b        0 -> 20814
     20812    01000514CH        00067H    ; LineNo: 103
     20814    01000514EH        0BD00H    pop      { pc }

MODULE Exceptions;
     20816    010005150H        00000H    ; Pad

  PROCEDURE Exceptions.EnableInt*(irqMask: SET);
  BEGIN
     20820    010005154H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.M0PLUS_NVIC_ISER, irqMask)
  END EnableInt;
     20822    010005156H        04802H    ldr      r0,[pc,#8] -> 20832 ; Const 0E000E100H -536813312
     20824    010005158H        09900H    ldr      r1,[sp]
     20826    01000515AH        06001H    str      r1,[r0]
     20828    01000515CH        0B001H    add      sp,#4
     20830    01000515EH        0BD00H    pop      { pc }
     20832    010005160H    0E000E100H    ; Const 0E000E100H -536813312

  PROCEDURE Exceptions.GetEnabledInt*(VAR en: SET);
  BEGIN
     20836    010005164H        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.M0PLUS_NVIC_ISER, en)
  END GetEnabledInt;
     20838    010005166H        04803H    ldr      r0,[pc,#12] -> 20852 ; Const 0E000E100H -536813312
     20840    010005168H        06801H    ldr      r1,[r0]
     20842    01000516AH        09A00H    ldr      r2,[sp]
     20844    01000516CH        06011H    str      r1,[r2]
     20846    01000516EH        0B001H    add      sp,#4
     20848    010005170H        0BD00H    pop      { pc }
     20850    010005172H        046C0H    nop
     20852    010005174H    0E000E100H    ; Const 0E000E100H -536813312

  PROCEDURE Exceptions.DisableInt*(irqMask: SET);
  BEGIN
     20856    010005178H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.M0PLUS_NVIC_ICER, irqMask)
  END DisableInt;
     20858    01000517AH        04802H    ldr      r0,[pc,#8] -> 20868 ; Const 0E000E180H -536813184
     20860    01000517CH        09900H    ldr      r1,[sp]
     20862    01000517EH        06001H    str      r1,[r0]
     20864    010005180H        0B001H    add      sp,#4
     20866    010005182H        0BD00H    pop      { pc }
     20868    010005184H    0E000E180H    ; Const 0E000E180H -536813184

  PROCEDURE Exceptions.SetPendingInt*(irqMask: SET);
  BEGIN
     20872    010005188H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.M0PLUS_NVIC_ISPR, irqMask)
  END SetPendingInt;
     20874    01000518AH        04802H    ldr      r0,[pc,#8] -> 20884 ; Const 0E000E200H -536813056
     20876    01000518CH        09900H    ldr      r1,[sp]
     20878    01000518EH        06001H    str      r1,[r0]
     20880    010005190H        0B001H    add      sp,#4
     20882    010005192H        0BD00H    pop      { pc }
     20884    010005194H    0E000E200H    ; Const 0E000E200H -536813056

  PROCEDURE Exceptions.GetPendingInt*(VAR pend: SET);
  BEGIN
     20888    010005198H        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.M0PLUS_NVIC_ISPR, pend)
  END GetPendingInt;
     20890    01000519AH        04803H    ldr      r0,[pc,#12] -> 20904 ; Const 0E000E200H -536813056
     20892    01000519CH        06801H    ldr      r1,[r0]
     20894    01000519EH        09A00H    ldr      r2,[sp]
     20896    0100051A0H        06011H    str      r1,[r2]
     20898    0100051A2H        0B001H    add      sp,#4
     20900    0100051A4H        0BD00H    pop      { pc }
     20902    0100051A6H        046C0H    nop
     20904    0100051A8H    0E000E200H    ; Const 0E000E200H -536813056

  PROCEDURE Exceptions.ClearPendingInt*(irqMask: SET);
  BEGIN
     20908    0100051ACH        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.M0PLUS_NVIC_ICPR, irqMask)
  END ClearPendingInt;
     20910    0100051AEH        04802H    ldr      r0,[pc,#8] -> 20920 ; Const 0E000E280H -536812928
     20912    0100051B0H        09900H    ldr      r1,[sp]
     20914    0100051B2H        06001H    str      r1,[r0]
     20916    0100051B4H        0B001H    add      sp,#4
     20918    0100051B6H        0BD00H    pop      { pc }
     20920    0100051B8H    0E000E280H    ; Const 0E000E280H -536812928

  PROCEDURE Exceptions.SetIntPrio*(irqNo, prio: INTEGER);
    VAR addr, x: INTEGER;
  BEGIN
     20924    0100051BCH        0B503H    push     { r0, r1, lr }
     20926    0100051BEH        0B082H    sub      sp,#8
    addr := MCU.M0PLUS_NVIC_IPR + ((irqNo DIV 4) * 4);
     20928    0100051C0H        09802H    ldr      r0,[sp,#8]
     20930    0100051C2H        01080H    asrs     r0,r0,#2
     20932    0100051C4H        00080H    lsls     r0,r0,#2
     20934    0100051C6H        0490AH    ldr      r1,[pc,#40] -> 20976 ; Const 0E000E400H -536812544
     20936    0100051C8H        01840H    adds     r0,r0,r1
     20938    0100051CAH        09000H    str      r0,[sp]
    SYSTEM.GET(addr, x);
     20940    0100051CCH        09800H    ldr      r0,[sp]
     20942    0100051CEH        06801H    ldr      r1,[r0]
     20944    0100051D0H        09101H    str      r1,[sp,#4]
    x := x + LSL(LSL(prio, 6), (irqNo MOD 4) * 8);
     20946    0100051D2H        09803H    ldr      r0,[sp,#12]
     20948    0100051D4H        00180H    lsls     r0,r0,#6
     20950    0100051D6H        09902H    ldr      r1,[sp,#8]
     20952    0100051D8H        00789H    lsls     r1,r1,#30
     20954    0100051DAH        00F89H    lsrs     r1,r1,#30
     20956    0100051DCH        000C9H    lsls     r1,r1,#3
     20958    0100051DEH        04088H    lsls     r0,r1
     20960    0100051E0H        09901H    ldr      r1,[sp,#4]
     20962    0100051E2H        01808H    adds     r0,r1,r0
     20964    0100051E4H        09001H    str      r0,[sp,#4]
    SYSTEM.PUT(addr, x)
  END SetIntPrio;
     20966    0100051E6H        09800H    ldr      r0,[sp]
     20968    0100051E8H        09901H    ldr      r1,[sp,#4]
     20970    0100051EAH        06001H    str      r1,[r0]
     20972    0100051ECH        0B004H    add      sp,#16
     20974    0100051EEH        0BD00H    pop      { pc }
     20976    0100051F0H    0E000E400H    ; Const 0E000E400H -536812544

  PROCEDURE Exceptions.GetIntPrio*(irqNo: INTEGER; VAR prio: INTEGER);
    VAR addr: INTEGER;
  BEGIN
     20980    0100051F4H        0B503H    push     { r0, r1, lr }
     20982    0100051F6H        0B081H    sub      sp,#4
    addr := MCU.M0PLUS_NVIC_IPR + ((irqNo DIV 4) * 4);
     20984    0100051F8H        09801H    ldr      r0,[sp,#4]
     20986    0100051FAH        01080H    asrs     r0,r0,#2
     20988    0100051FCH        00080H    lsls     r0,r0,#2
     20990    0100051FEH        04904H    ldr      r1,[pc,#16] -> 21008 ; Const 0E000E400H -536812544
     20992    010005200H        01840H    adds     r0,r0,r1
     20994    010005202H        09000H    str      r0,[sp]
    SYSTEM.GET(addr, prio)
  END GetIntPrio;
     20996    010005204H        09800H    ldr      r0,[sp]
     20998    010005206H        06801H    ldr      r1,[r0]
     21000    010005208H        09A02H    ldr      r2,[sp,#8]
     21002    01000520AH        06011H    str      r1,[r2]
     21004    01000520CH        0B003H    add      sp,#12
     21006    01000520EH        0BD00H    pop      { pc }
     21008    010005210H    0E000E400H    ; Const 0E000E400H -536812544

  PROCEDURE Exceptions.InstallIntHandler*(irqNo: INTEGER; handler: PROCEDURE);
    VAR vectAddr, vtor: INTEGER;
  BEGIN
     21012    010005214H        0B503H    push     { r0, r1, lr }
     21014    010005216H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.M0PLUS_VTOR, vtor);
     21016    010005218H        04808H    ldr      r0,[pc,#32] -> 21052 ; Const 0E000ED08H -536810232
     21018    01000521AH        06801H    ldr      r1,[r0]
     21020    01000521CH        09101H    str      r1,[sp,#4]
    vectAddr := vtor + MCU.IrqZeroHandlerOffset + (4 * irqNo);
     21022    01000521EH        09801H    ldr      r0,[sp,#4]
     21024    010005220H        03040H    adds     r0,#64
     21026    010005222H        09902H    ldr      r1,[sp,#8]
     21028    010005224H        00089H    lsls     r1,r1,#2
     21030    010005226H        01840H    adds     r0,r0,r1
     21032    010005228H        09000H    str      r0,[sp]
    INCL(SYSTEM.VAL(SET, handler), 0);  
     21034    01000522AH        09803H    ldr      r0,[sp,#12]
     21036    01000522CH        02101H    movs     r1,#1
     21038    01000522EH        04308H    orrs     r0,r1
     21040    010005230H        09003H    str      r0,[sp,#12]
    SYSTEM.PUT(vectAddr, handler)
  END InstallIntHandler;
     21042    010005232H        09800H    ldr      r0,[sp]
     21044    010005234H        09903H    ldr      r1,[sp,#12]
     21046    010005236H        06001H    str      r1,[r0]
     21048    010005238H        0B004H    add      sp,#16
     21050    01000523AH        0BD00H    pop      { pc }
     21052    01000523CH    0E000ED08H    ; Const 0E000ED08H -536810232

  PROCEDURE Exceptions.SetSysExcPrio*(excNo, prio: INTEGER);
    VAR addr, x: INTEGER;
  BEGIN
     21056    010005240H        0B503H    push     { r0, r1, lr }
     21058    010005242H        0B082H    sub      sp,#8
    ASSERT(excNo IN SysExcNo, Errors.PreCond);
     21060    010005244H        02019H    movs     r0,#25
     21062    010005246H        002C0H    lsls     r0,r0,#11
     21064    010005248H        09902H    ldr      r1,[sp,#8]
     21066    01000524AH        02201H    movs     r2,#1
     21068    01000524CH        0408AH    lsls     r2,r1
     21070    01000524EH        04210H    tst      r0,r2
     21072    010005250H        0D101H    bne.n    2 -> 21078
     21074    010005252H        0DF65H    svc      101
     21076    010005254H        00086H    ; LineNo: 134
    addr := MCU.M0PLUS_SHPR - 04H + (excNo DIV 4) * 4;
     21078    010005256H        09802H    ldr      r0,[sp,#8]
     21080    010005258H        01080H    asrs     r0,r0,#2
     21082    01000525AH        00080H    lsls     r0,r0,#2
     21084    01000525CH        0490AH    ldr      r1,[pc,#40] -> 21128 ; Const 0E000ED14H -536810220
     21086    01000525EH        01840H    adds     r0,r0,r1
     21088    010005260H        09000H    str      r0,[sp]
    SYSTEM.GET(addr, x);
     21090    010005262H        09800H    ldr      r0,[sp]
     21092    010005264H        06801H    ldr      r1,[r0]
     21094    010005266H        09101H    str      r1,[sp,#4]
    x := x + LSL(LSL(prio, 6), (excNo MOD 4) * 8);
     21096    010005268H        09803H    ldr      r0,[sp,#12]
     21098    01000526AH        00180H    lsls     r0,r0,#6
     21100    01000526CH        09902H    ldr      r1,[sp,#8]
     21102    01000526EH        00789H    lsls     r1,r1,#30
     21104    010005270H        00F89H    lsrs     r1,r1,#30
     21106    010005272H        000C9H    lsls     r1,r1,#3
     21108    010005274H        04088H    lsls     r0,r1
     21110    010005276H        09901H    ldr      r1,[sp,#4]
     21112    010005278H        01808H    adds     r0,r1,r0
     21114    01000527AH        09001H    str      r0,[sp,#4]
    SYSTEM.PUT(addr, x)
  END SetSysExcPrio;
     21116    01000527CH        09800H    ldr      r0,[sp]
     21118    01000527EH        09901H    ldr      r1,[sp,#4]
     21120    010005280H        06001H    str      r1,[r0]
     21122    010005282H        0B004H    add      sp,#16
     21124    010005284H        0BD00H    pop      { pc }
     21126    010005286H        046C0H    nop
     21128    010005288H    0E000ED14H    ; Const 0E000ED14H -536810220

  PROCEDURE Exceptions.GetSysExcPrio*(excNo: INTEGER; VAR prio: INTEGER);
    VAR addr: INTEGER;
  BEGIN
     21132    01000528CH        0B503H    push     { r0, r1, lr }
     21134    01000528EH        0B081H    sub      sp,#4
    ASSERT(excNo IN SysExcNo, Errors.PreCond);
     21136    010005290H        02019H    movs     r0,#25
     21138    010005292H        002C0H    lsls     r0,r0,#11
     21140    010005294H        09901H    ldr      r1,[sp,#4]
     21142    010005296H        02201H    movs     r2,#1
     21144    010005298H        0408AH    lsls     r2,r1
     21146    01000529AH        04210H    tst      r0,r2
     21148    01000529CH        0D101H    bne.n    2 -> 21154
     21150    01000529EH        0DF65H    svc      101
     21152    0100052A0H        00091H    ; LineNo: 145
    addr := MCU.M0PLUS_SHPR - 04H + (excNo DIV 4) * 4;
     21154    0100052A2H        09801H    ldr      r0,[sp,#4]
     21156    0100052A4H        01080H    asrs     r0,r0,#2
     21158    0100052A6H        00080H    lsls     r0,r0,#2
     21160    0100052A8H        04904H    ldr      r1,[pc,#16] -> 21180 ; Const 0E000ED14H -536810220
     21162    0100052AAH        01840H    adds     r0,r0,r1
     21164    0100052ACH        09000H    str      r0,[sp]
    SYSTEM.GET(addr, prio);
     21166    0100052AEH        09800H    ldr      r0,[sp]
     21168    0100052B0H        06801H    ldr      r1,[r0]
     21170    0100052B2H        09A02H    ldr      r2,[sp,#8]
     21172    0100052B4H        06011H    str      r1,[r2]
  END GetSysExcPrio;
     21174    0100052B6H        0B003H    add      sp,#12
     21176    0100052B8H        0BD00H    pop      { pc }
     21178    0100052BAH        046C0H    nop
     21180    0100052BCH    0E000ED14H    ; Const 0E000ED14H -536810220

  PROCEDURE Exceptions.InstallExcHandler*(vectOffset: INTEGER; handler: PROCEDURE);
    VAR vtor, vectAddr: INTEGER;
  BEGIN
     21184    0100052C0H        0B503H    push     { r0, r1, lr }
     21186    0100052C2H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.M0PLUS_VTOR, vtor);
     21188    0100052C4H        04807H    ldr      r0,[pc,#28] -> 21220 ; Const 0E000ED08H -536810232
     21190    0100052C6H        06801H    ldr      r1,[r0]
     21192    0100052C8H        09100H    str      r1,[sp]
    vectAddr := vtor + vectOffset;
     21194    0100052CAH        09800H    ldr      r0,[sp]
     21196    0100052CCH        09902H    ldr      r1,[sp,#8]
     21198    0100052CEH        01840H    adds     r0,r0,r1
     21200    0100052D0H        09001H    str      r0,[sp,#4]
    INCL(SYSTEM.VAL(SET, handler), 0);  
     21202    0100052D2H        09803H    ldr      r0,[sp,#12]
     21204    0100052D4H        02101H    movs     r1,#1
     21206    0100052D6H        04308H    orrs     r0,r1
     21208    0100052D8H        09003H    str      r0,[sp,#12]
    SYSTEM.PUT(vectAddr, handler)
  END InstallExcHandler;
     21210    0100052DAH        09801H    ldr      r0,[sp,#4]
     21212    0100052DCH        09903H    ldr      r1,[sp,#12]
     21214    0100052DEH        06001H    str      r1,[r0]
     21216    0100052E0H        0B004H    add      sp,#16
     21218    0100052E2H        0BD00H    pop      { pc }
     21220    0100052E4H    0E000ED08H    ; Const 0E000ED08H -536810232

  PROCEDURE Exceptions.SetNMI*(cid: INTEGER; irqMask: SET);
  BEGIN
     21224    0100052E8H        0B503H    push     { r0, r1, lr }
    ASSERT(cid IN {0 .. 1}, Errors.PreCond);
     21226    0100052EAH        02003H    movs     r0,#3
     21228    0100052ECH        09900H    ldr      r1,[sp]
     21230    0100052EEH        02201H    movs     r2,#1
     21232    0100052F0H        0408AH    lsls     r2,r1
     21234    0100052F2H        04210H    tst      r0,r2
     21236    0100052F4H        0D101H    bne.n    2 -> 21242
     21238    0100052F6H        0DF65H    svc      101
     21240    0100052F8H        000A5H    ; LineNo: 165
    CASE cid OF
      0: SYSTEM.PUT(MCU.SYSCFG_PROC0_NMI_MASK, irqMask)
     21242    0100052FAH        09800H    ldr      r0,[sp]
     21244    0100052FCH        04601H    mov      r1,r0
     21246    0100052FEH        046C0H    nop
     21248    010005300H        02901H    cmp      r1,#1
     21250    010005302H        0DD01H    ble.n    2 -> 21256
     21252    010005304H        0DF04H    svc      4
     21254    010005306H        000A6H    ; LineNo: 166
     21256    010005308H        00049H    lsls     r1,r1,#1
     21258    01000530AH        046C0H    nop
     21260    01000530CH        04A01H    ldr      r2,[pc,#4] -> 21268 ; Const 019H 25
     21262    01000530EH        01852H    adds     r2,r2,r1
     21264    010005310H        0447AH    add      r2,pc
     21266    010005312H        04710H    bx       r2
     21268    010005314H        00019H    ; Const 019H 25
    | 1: SYSTEM.PUT(MCU.SYSCFG_PROC1_NMI_MASK, irqMask)
     21272    010005318H        04806H    ldr      r0,[pc,#24] -> 21300 ; Const 040004000H 1073758208
     21274    01000531AH        09901H    ldr      r1,[sp,#4]
     21276    01000531CH        06001H    str      r1,[r0]
     21278    01000531EH        0E007H    b        14 -> 21296
     21280    010005320H        046C0H    nop
    END
     21282    010005322H        04805H    ldr      r0,[pc,#20] -> 21304 ; Const 040004004H 1073758212
     21284    010005324H        09901H    ldr      r1,[sp,#4]
     21286    010005326H        06001H    str      r1,[r0]
     21288    010005328H        0E002H    b        4 -> 21296
     21290    01000532AH        046C0H    nop
  END SetNMI;
     21292    01000532CH        0E7F4H    b        -24 -> 21272 ldr      r0,[pc,#24] -> 21300 ; Const 040004000H 1073758208
     21294    01000532EH        0E7F8H    b        -16 -> 21282 ldr      r0,[pc,#20] -> 21304 ; Const 040004004H 1073758212
     21296    010005330H        0B002H    add      sp,#8
     21298    010005332H        0BD00H    pop      { pc }
     21300    010005334H    040004000H    ; Const 040004000H 1073758208
     21304    010005338H    040004004H    ; Const 040004004H 1073758212

PROCEDURE Exceptions..init;
END .init;
END Exceptions;
     21308    01000533CH        0B500H    push     { lr }
     21310    01000533EH        0BD00H    pop      { pc }

MODULE Timers;
     21312    010005340H        00000H    ; Pad

  PROCEDURE Timers.GetTime*(VAR timeH, timeL: INTEGER);
    VAR t0: INTEGER; done: BOOLEAN;
  BEGIN
     21316    010005344H        0B503H    push     { r0, r1, lr }
     21318    010005346H        0B082H    sub      sp,#8
    SYSTEM.GET(MCU.TIMER_TIMERAWH, timeH);
     21320    010005348H        04810H    ldr      r0,[pc,#64] -> 21388 ; Const 040054024H 1074085924
     21322    01000534AH        06801H    ldr      r1,[r0]
     21324    01000534CH        09A02H    ldr      r2,[sp,#8]
     21326    01000534EH        06011H    str      r1,[r2]
    done := FALSE;
     21328    010005350H        02000H    movs     r0,#0
     21330    010005352H        0A901H    add      r1,sp,#4
     21332    010005354H        07008H    strb     r0,[r1]
    REPEAT
      SYSTEM.GET(MCU.TIMER_TIMERAWL, timeL);
     21334    010005356H        0480EH    ldr      r0,[pc,#56] -> 21392 ; Const 040054028H 1074085928
     21336    010005358H        06801H    ldr      r1,[r0]
     21338    01000535AH        09A03H    ldr      r2,[sp,#12]
     21340    01000535CH        06011H    str      r1,[r2]
      SYSTEM.GET(MCU.TIMER_TIMERAWH, t0);
     21342    01000535EH        0480BH    ldr      r0,[pc,#44] -> 21388 ; Const 040054024H 1074085924
     21344    010005360H        06801H    ldr      r1,[r0]
     21346    010005362H        09100H    str      r1,[sp]
      done := t0 = timeH;
     21348    010005364H        09800H    ldr      r0,[sp]
     21350    010005366H        09902H    ldr      r1,[sp,#8]
     21352    010005368H        06809H    ldr      r1,[r1]
     21354    01000536AH        04288H    cmp      r0,r1
     21356    01000536CH        0D001H    beq.n    2 -> 21362
     21358    01000536EH        02000H    movs     r0,#0
     21360    010005370H        0E000H    b        0 -> 21364
     21362    010005372H        02001H    movs     r0,#1
     21364    010005374H        0A901H    add      r1,sp,#4
     21366    010005376H        07008H    strb     r0,[r1]
      timeH := t0
    UNTIL done
     21368    010005378H        09800H    ldr      r0,[sp]
     21370    01000537AH        09902H    ldr      r1,[sp,#8]
     21372    01000537CH        06008H    str      r0,[r1]
  END GetTime;
     21374    01000537EH        0A801H    add      r0,sp,#4
     21376    010005380H        07800H    ldrb     r0,[r0]
     21378    010005382H        02101H    movs     r1,#1
     21380    010005384H        04208H    tst      r0,r1
     21382    010005386H        0D0E6H    beq.n    -52 -> 21334 ldr      r0,[pc,#56] -> 21392 ; Const 040054028H 1074085928
     21384    010005388H        0B004H    add      sp,#16
     21386    01000538AH        0BD00H    pop      { pc }
     21388    01000538CH    040054024H    ; Const 040054024H 1074085924
     21392    010005390H    040054028H    ; Const 040054028H 1074085928

  PROCEDURE Timers.GetTimeL*(VAR timeL: INTEGER);
  BEGIN
     21396    010005394H        0B501H    push     { r0, lr }
    SYSTEM.GET(MCU.TIMER_TIMERAWL, timeL)
  END GetTimeL;
     21398    010005396H        04803H    ldr      r0,[pc,#12] -> 21412 ; Const 040054028H 1074085928
     21400    010005398H        06801H    ldr      r1,[r0]
     21402    01000539AH        09A00H    ldr      r2,[sp]
     21404    01000539CH        06011H    str      r1,[r2]
     21406    01000539EH        0B001H    add      sp,#4
     21408    0100053A0H        0BD00H    pop      { pc }
     21410    0100053A2H        046C0H    nop
     21412    0100053A4H    040054028H    ; Const 040054028H 1074085928

  PROCEDURE Timers.InstallAlarmIntHandler*(alarmNo: INTEGER; handler: PROCEDURE);
  BEGIN
     21416    0100053A8H        0B503H    push     { r0, r1, lr }
    Exceptions.InstallIntHandler(Exceptions.TIMER_IRQ_0 + alarmNo, handler)
     21418    0100053AAH        09800H    ldr      r0,[sp]
     21420    0100053ACH        03000H    adds     r0,#0
     21422    0100053AEH        09901H    ldr      r1,[sp,#4]
  END InstallAlarmIntHandler;
     21424    0100053B0H    0F7FFFF30H    bl.w     Exceptions.InstallIntHandler
     21428    0100053B4H        0E000H    b        0 -> 21432
     21430    0100053B6H        0002CH    ; LineNo: 44
     21432    0100053B8H        0B002H    add      sp,#8
     21434    0100053BAH        0BD00H    pop      { pc }

  PROCEDURE Timers.SetAlarmIntPrio*(alarmNo, prio: INTEGER);
  BEGIN
     21436    0100053BCH        0B503H    push     { r0, r1, lr }
    Exceptions.SetIntPrio(Exceptions.TIMER_IRQ_0 + alarmNo, prio)
     21438    0100053BEH        09800H    ldr      r0,[sp]
     21440    0100053C0H        03000H    adds     r0,#0
     21442    0100053C2H        09901H    ldr      r1,[sp,#4]
  END SetAlarmIntPrio;
     21444    0100053C4H    0F7FFFEFAH    bl.w     Exceptions.SetIntPrio
     21448    0100053C8H        0E000H    b        0 -> 21452
     21450    0100053CAH        00032H    ; LineNo: 50
     21452    0100053CCH        0B002H    add      sp,#8
     21454    0100053CEH        0BD00H    pop      { pc }

  PROCEDURE Timers.EnableAlarmInt*(alarmNo: INTEGER);
  BEGIN
     21456    0100053D0H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.TIMER_INTE + MCU.ASET, {alarmNo})
     21458    0100053D2H        09800H    ldr      r0,[sp]
     21460    0100053D4H        02101H    movs     r1,#1
     21462    0100053D6H        04081H    lsls     r1,r0
     21464    0100053D8H        04608H    mov      r0,r1
  END EnableAlarmInt;
     21466    0100053DAH        04902H    ldr      r1,[pc,#8] -> 21476 ; Const 040056038H 1074094136
     21468    0100053DCH        06008H    str      r0,[r1]
     21470    0100053DEH        0B001H    add      sp,#4
     21472    0100053E0H        0BD00H    pop      { pc }
     21474    0100053E2H        046C0H    nop
     21476    0100053E4H    040056038H    ; Const 040056038H 1074094136

  PROCEDURE Timers.DeassertAlarmInt*(alarmNo: INTEGER);
  BEGIN
     21480    0100053E8H        0B501H    push     { r0, lr }
    SYSTEM.PUT(MCU.TIMER_INTR + MCU.ACLR, {alarmNo})
     21482    0100053EAH        09800H    ldr      r0,[sp]
     21484    0100053ECH        02101H    movs     r1,#1
     21486    0100053EEH        04081H    lsls     r1,r0
     21488    0100053F0H        04608H    mov      r0,r1
  END DeassertAlarmInt;
     21490    0100053F2H        04902H    ldr      r1,[pc,#8] -> 21500 ; Const 040057034H 1074098228
     21492    0100053F4H        06008H    str      r0,[r1]
     21494    0100053F6H        0B001H    add      sp,#4
     21496    0100053F8H        0BD00H    pop      { pc }
     21498    0100053FAH        046C0H    nop
     21500    0100053FCH    040057034H    ; Const 040057034H 1074098228

  PROCEDURE Timers.SetTime*(timeH, timeL: INTEGER);
  BEGIN
     21504    010005400H        0B503H    push     { r0, r1, lr }
    SYSTEM.PUT(MCU.TIMER_TIMELW, timeL);
     21506    010005402H        04804H    ldr      r0,[pc,#16] -> 21524 ; Const 040054004H 1074085892
     21508    010005404H        09901H    ldr      r1,[sp,#4]
     21510    010005406H        06001H    str      r1,[r0]
    SYSTEM.PUT(MCU.TIMER_TIMEHW, timeH)
  END SetTime;
     21512    010005408H        04803H    ldr      r0,[pc,#12] -> 21528 ; Const 040054000H 1074085888
     21514    01000540AH        09900H    ldr      r1,[sp]
     21516    01000540CH        06001H    str      r1,[r0]
     21518    01000540EH        0B002H    add      sp,#8
     21520    010005410H        0BD00H    pop      { pc }
     21522    010005412H        046C0H    nop
     21524    010005414H    040054004H    ; Const 040054004H 1074085892
     21528    010005418H    040054000H    ; Const 040054000H 1074085888

PROCEDURE Timers..init;
END .init;
END Timers;
     21532    01000541CH        0B500H    push     { lr }
     21534    01000541EH        0BD00H    pop      { pc }

MODULE DebugEvalImp;
     21536    010005420H        00000H    ; Pad
     21540    010005424H        00004H    ; Type (size)
     21544    010005428H        00000H    ; Type
     21548    01000542CH        00000H    ; Type
     21552    010005430H        00000H    ; Type
     21556    010005434H        00000H    ; Type

PROCEDURE DebugEvalImp..init
BEGIN
     21560    010005438H        0B500H    push     { lr }
  x := 42
END .init;
END DebugEvalImp.
     21562    01000543AH        0202AH    movs     r0,#42
     21564    01000543CH        04901H    ldr      r1,[pc,#4] -> 21572 ; Global 02002FC68H
     21566    01000543EH        06008H    str      r0,[r1]
     21568    010005440H        0BD00H    pop      { pc }
     21570    010005442H        046C0H    nop
     21572    010005444H    02002FC68H    ; Global 02002FC68H

MODULE DebugEval;
     21576    010005448H        00000H    ; Pad
     21580    01000544CH        0000CH    ; Type (size)
     21584    010005450H    01000544CH    ; Type (ref)
     21588    010005454H        00000H    ; Type
     21592    010005458H        00000H    ; Type
     21596    01000545CH        00000H    ; Type
     21600    010005460H        00014H    ; Type (size)
     21604    010005464H    01000544CH    ; Type (ref)
     21608    010005468H    010005460H    ; Type (ref)
     21612    01000546CH        00000H    ; Type
     21616    010005470H        00000H    ; Type
     21620    010005474H        0001CH    ; Type (size)
     21624    010005478H    01000544CH    ; Type (ref)
     21628    01000547CH    010005460H    ; Type (ref)
     21632    010005480H    010005474H    ; Type (ref)
     21636    010005484H        00000H    ; Type

  PROCEDURE DebugEval.writeThreadInfo(tid, cid: INTEGER);
  BEGIN Out.String("c"); Out.Int(cid, 0);
     21640    010005488H        0B503H    push     { r0, r1, lr }
     21642    01000548AH        046C0H    nop
     21644    01000548CH        0A000H    adr      r0,pc,#0 -> 21648
     21646    01000548EH        0E001H    b        2 -> 21652
     21648    010005490H        00063H    ; String: "c..."
     21652    010005494H        02102H    movs     r1,#2
     21654    010005496H    0F7FEFDF3H    bl.w     Out.String
     21658    01000549AH        0E000H    b        0 -> 21662
     21660    01000549CH        0002FH    ; LineNo: 47
     21662    01000549EH        09801H    ldr      r0,[sp,#4]
     21664    0100054A0H        02100H    movs     r1,#0
     21666    0100054A2H    0F7FEFE1FH    bl.w     Out.Int
     21670    0100054A6H        0E000H    b        0 -> 21674
     21672    0100054A8H        0002FH    ; LineNo: 47
    Out.String("-t"); Out.Int(tid, 0);
     21674    0100054AAH        046C0H    nop
     21676    0100054ACH        0A000H    adr      r0,pc,#0 -> 21680
     21678    0100054AEH        0E001H    b        2 -> 21684
     21680    0100054B0H        0742DH    ; String: "-t.."
     21684    0100054B4H        02103H    movs     r1,#3
     21686    0100054B6H    0F7FEFDE3H    bl.w     Out.String
     21690    0100054BAH        0E000H    b        0 -> 21694
     21692    0100054BCH        00030H    ; LineNo: 48
     21694    0100054BEH        09800H    ldr      r0,[sp]
     21696    0100054C0H        02100H    movs     r1,#0
     21698    0100054C2H    0F7FEFE0FH    bl.w     Out.Int
     21702    0100054C6H        0E000H    b        0 -> 21706
     21704    0100054C8H        00030H    ; LineNo: 48
  END writeThreadInfo;
     21706    0100054CAH        0B002H    add      sp,#8
     21708    0100054CCH        0BD00H    pop      { pc }
     21710    0100054CEH        046C0H    nop

  PROCEDURE DebugEval.testType(r: R1);
  BEGIN
     21712    0100054D0H        0B503H    push     { r0, r1, lr }
    IF r IS R2 THEN
     21714    0100054D2H        0A800H    add      r0,sp,#0
     21716    0100054D4H        068C0H    ldr      r0,[r0,#12]
     21718    0100054D6H        04904H    ldr      r1,[pc,#16] -> 21736 ; Const 0FFFFFF98H -104
     21720    0100054D8H        0467AH    mov      r2,pc
     21722    0100054DAH        01889H    adds     r1,r1,r2
     21724    0100054DCH        04288H    cmp      r0,r1
     21726    0100054DEH        0D001H    beq.n    2 -> 21732
     21728    0100054E0H        0E000H    b        0 -> 21732
     21730    0100054E2H        046C0H    nop
    END
  END testType;
     21732    0100054E4H        0B002H    add      sp,#8
     21734    0100054E6H        0BD00H    pop      { pc }
     21736    0100054E8H    0FFFFFF98H    ; Const 0FFFFFF98H -104

  PROCEDURE DebugEval.t0c;
    CONST Big2 = 0D00001H;
    VAR ledNo: INTEGER;
  BEGIN
     21740    0100054ECH        0B500H    push     { lr }
     21742    0100054EEH        0B081H    sub      sp,#4
    SYSTEM.PUT(LEDext.SET, {LEDext.LEDpico});
     21744    0100054F0H        04816H    ldr      r0,[pc,#88] -> 21836 ; Const 0D0000014H -805306348
     21746    0100054F2H        02101H    movs     r1,#1
     21748    0100054F4H        00649H    lsls     r1,r1,#25
     21750    0100054F6H        06001H    str      r1,[r0]
    ledNo := 0;
     21752    0100054F8H        02000H    movs     r0,#0
     21754    0100054FAH        09000H    str      r0,[sp]
    x := Big0;
     21756    0100054FCH        04814H    ldr      r0,[pc,#80] -> 21840 ; Const 0F0000000H -268435456
     21758    0100054FEH        04918H    ldr      r1,[pc,#96] -> 21856 ; Global 02002FC54H
     21760    010005500H        06008H    str      r0,[r1]
    x := x + Big1;
     21762    010005502H        04817H    ldr      r0,[pc,#92] -> 21856 ; Global 02002FC54H
     21764    010005504H        06800H    ldr      r0,[r0]
     21766    010005506H        02107H    movs     r1,#7
     21768    010005508H        00649H    lsls     r1,r1,#25
     21770    01000550AH        01840H    adds     r0,r0,r1
     21772    01000550CH        04914H    ldr      r1,[pc,#80] -> 21856 ; Global 02002FC54H
     21774    01000550EH        06008H    str      r0,[r1]
    x := x + Big2;
     21776    010005510H        04813H    ldr      r0,[pc,#76] -> 21856 ; Global 02002FC54H
     21778    010005512H        06800H    ldr      r0,[r0]
     21780    010005514H        0490FH    ldr      r1,[pc,#60] -> 21844 ; Const 0D00001H 13631489
     21782    010005516H        01840H    adds     r0,r0,r1
     21784    010005518H        04911H    ldr      r1,[pc,#68] -> 21856 ; Global 02002FC54H
     21786    01000551AH        06008H    str      r0,[r1]
    y := Neg;
     21788    01000551CH        0480EH    ldr      r0,[pc,#56] -> 21848 ; Const 0FFFFFFD6H -42
     21790    01000551EH        04911H    ldr      r1,[pc,#68] -> 21860 ; Global 02002FC4CH
     21792    010005520H        06008H    str      r0,[r1]
    REPEAT
      LEDext.SetValue(ledNo);
     21794    010005522H        09800H    ldr      r0,[sp]
     21796    010005524H    0F7FFFDB0H    bl.w     LEDext.SetValue
     21800    010005528H        0E000H    b        0 -> 21804
     21802    01000552AH        0004CH    ; LineNo: 76
      INC(ledNo);
     21804    01000552CH        09800H    ldr      r0,[sp]
     21806    01000552EH        03001H    adds     r0,#1
     21808    010005530H        09000H    str      r0,[sp]
      SYSTEM.PUT(LEDext.XOR, {LEDext.LEDpico});
     21810    010005532H        0480AH    ldr      r0,[pc,#40] -> 21852 ; Const 0D000001CH -805306340
     21812    010005534H        02101H    movs     r1,#1
     21814    010005536H        00649H    lsls     r1,r1,#25
     21816    010005538H        06001H    str      r1,[r0]
      Kernel.Next
    UNTIL FALSE
     21818    01000553AH    0F7FFF9C7H    bl.w     Kernel.Next
     21822    01000553EH        0E000H    b        0 -> 21826
     21824    010005540H        0004FH    ; LineNo: 79
  END t0c;
     21826    010005542H        04280H    cmp      r0,r0
     21828    010005544H        0D0EDH    beq.n    -38 -> 21794
     21830    010005546H        0B001H    add      sp,#4
     21832    010005548H        0BD00H    pop      { pc }
     21834    01000554AH        046C0H    nop
     21836    01000554CH    0D0000014H    ; Const 0D0000014H -805306348
     21840    010005550H    0F0000000H    ; Const 0F0000000H -268435456
     21844    010005554H      0D00001H    ; Const 0D00001H 13631489
     21848    010005558H    0FFFFFFD6H    ; Const 0FFFFFFD6H -42
     21852    01000555CH    0D000001CH    ; Const 0D000001CH -805306340
     21856    010005560H    02002FC54H    ; Global 02002FC54H
     21860    010005564H    02002FC4CH    ; Global 02002FC4CH

  PROCEDURE DebugEval.t1c;
    VAR tid, cid, cnt, before, timeL: INTEGER;
  BEGIN
     21864    010005568H        0B500H    push     { lr }
     21866    01000556AH        0B085H    sub      sp,#20
    tid := Kernel.Tid();
     21868    01000556CH    0F7FFFAECH    bl.w     Kernel.Tid
     21872    010005570H        0E000H    b        0 -> 21876
     21874    010005572H        00057H    ; LineNo: 87
     21876    010005574H        09000H    str      r0,[sp]
    cnt := 0;
     21878    010005576H        02000H    movs     r0,#0
     21880    010005578H        09002H    str      r0,[sp,#8]
    Timers.GetTimeL(before);
     21882    01000557AH        0A803H    add      r0,sp,#12
     21884    01000557CH    0F7FFFF0AH    bl.w     Timers.GetTimeL
     21888    010005580H        0E000H    b        0 -> 21892
     21890    010005582H        00059H    ; LineNo: 89
    REPEAT
      Kernel.Next;
     21892    010005584H    0F7FFF9A2H    bl.w     Kernel.Next
     21896    010005588H        0E000H    b        0 -> 21900
     21898    01000558AH        0005BH    ; LineNo: 91
      Timers.GetTimeL(timeL);
     21900    01000558CH        0A804H    add      r0,sp,#16
     21902    01000558EH    0F7FFFF01H    bl.w     Timers.GetTimeL
     21906    010005592H        0E000H    b        0 -> 21910
     21908    010005594H        0005CH    ; LineNo: 92
      writeThreadInfo(tid, cid);
     21910    010005596H        09800H    ldr      r0,[sp]
     21912    010005598H        09901H    ldr      r1,[sp,#4]
     21914    01000559AH    0F7FFFF75H    bl.w     DebugEval.writeThreadInfo
     21918    01000559EH        0E000H    b        0 -> 21922
     21920    0100055A0H        0005DH    ; LineNo: 93
      Out.Int(cnt, 8); Out.Int(timeL - before, 8); Out.Ln;
     21922    0100055A2H        09802H    ldr      r0,[sp,#8]
     21924    0100055A4H        02108H    movs     r1,#8
     21926    0100055A6H    0F7FEFD9DH    bl.w     Out.Int
     21930    0100055AAH        0E000H    b        0 -> 21934
     21932    0100055ACH        0005EH    ; LineNo: 94
     21934    0100055AEH        09804H    ldr      r0,[sp,#16]
     21936    0100055B0H        09903H    ldr      r1,[sp,#12]
     21938    0100055B2H        01A40H    subs     r0,r0,r1
     21940    0100055B4H        02108H    movs     r1,#8
     21942    0100055B6H    0F7FEFD95H    bl.w     Out.Int
     21946    0100055BAH        0E000H    b        0 -> 21950
     21948    0100055BCH        0005EH    ; LineNo: 94
     21950    0100055BEH    0F7FEFD79H    bl.w     Out.Ln
     21954    0100055C2H        0E000H    b        0 -> 21958
     21956    0100055C4H        0005EH    ; LineNo: 94
      before := timeL;
     21958    0100055C6H        09804H    ldr      r0,[sp,#16]
     21960    0100055C8H        09003H    str      r0,[sp,#12]
      INC(cnt)
    UNTIL FALSE
     21962    0100055CAH        09802H    ldr      r0,[sp,#8]
     21964    0100055CCH        03001H    adds     r0,#1
     21966    0100055CEH        09002H    str      r0,[sp,#8]
  END t1c;
     21968    0100055D0H        04280H    cmp      r0,r0
     21970    0100055D2H        0D0D7H    beq.n    -82 -> 21892
     21972    0100055D4H        0B005H    add      sp,#20
     21974    0100055D6H        0BD00H    pop      { pc }

  PROCEDURE DebugEval.run;
    VAR res: INTEGER;
  BEGIN
     21976    0100055D8H        0B500H    push     { lr }
     21978    0100055DAH        0B081H    sub      sp,#4
    Kernel.Install(MillisecsPerTick);
     21980    0100055DCH        0200AH    movs     r0,#10
     21982    0100055DEH    0F7FFFC05H    bl.w     Kernel.Install
     21986    0100055E2H        0E000H    b        0 -> 21990
     21988    0100055E4H        00069H    ; LineNo: 105
    Kernel.Allocate(t0c, ThreadStackSize, t0, tid0, res); ASSERT(res = Kernel.OK);
     21990    0100055E6H        046C0H    nop
     21992    0100055E8H        04821H    ldr      r0,[pc,#132] -> 22128 ; Const 0FFFFFEFEH -258
     21994    0100055EAH        04478H    add      r0,pc
     21996    0100055ECH        02101H    movs     r1,#1
     21998    0100055EEH        00289H    lsls     r1,r1,#10
     22000    0100055F0H        04A21H    ldr      r2,[pc,#132] -> 22136 ; Global 02002FC64H
     22002    0100055F2H        04B22H    ldr      r3,[pc,#136] -> 22140 ; Global 02002FC5CH
     22004    0100055F4H        0466CH    mov      r4,sp
     22006    0100055F6H    0F7FFF8C1H    bl.w     Kernel.Allocate
     22010    0100055FAH        0E000H    b        0 -> 22014
     22012    0100055FCH        0006AH    ; LineNo: 106
     22014    0100055FEH        09800H    ldr      r0,[sp]
     22016    010005600H        02800H    cmp      r0,#0
     22018    010005602H        0D001H    beq.n    2 -> 22024
     22020    010005604H        0DF00H    svc      0
     22022    010005606H        0006AH    ; LineNo: 106
    Kernel.SetPeriod(t0, 250, 0); Kernel.Enable(t0);
     22024    010005608H        0481BH    ldr      r0,[pc,#108] -> 22136 ; Global 02002FC64H
     22026    01000560AH        06800H    ldr      r0,[r0]
     22028    01000560CH        021FAH    movs     r1,#250
     22030    01000560EH        02200H    movs     r2,#0
     22032    010005610H    0F7FFF952H    bl.w     Kernel.SetPeriod
     22036    010005614H        0E000H    b        0 -> 22040
     22038    010005616H        0006BH    ; LineNo: 107
     22040    010005618H        04817H    ldr      r0,[pc,#92] -> 22136 ; Global 02002FC64H
     22042    01000561AH        06800H    ldr      r0,[r0]
     22044    01000561CH    0F7FFF93AH    bl.w     Kernel.Enable
     22048    010005620H        0E000H    b        0 -> 22052
     22050    010005622H        0006BH    ; LineNo: 107
    Kernel.Allocate(t1c, ThreadStackSize, t1, tid1, res); ASSERT(res = Kernel.OK);
     22052    010005624H        04813H    ldr      r0,[pc,#76] -> 22132 ; Const 0FFFFFF3EH -194
     22054    010005626H        04478H    add      r0,pc
     22056    010005628H        02101H    movs     r1,#1
     22058    01000562AH        00289H    lsls     r1,r1,#10
     22060    01000562CH        04A14H    ldr      r2,[pc,#80] -> 22144 ; Global 02002FC60H
     22062    01000562EH        04B15H    ldr      r3,[pc,#84] -> 22148 ; Global 02002FC58H
     22064    010005630H        0466CH    mov      r4,sp
     22066    010005632H    0F7FFF8A3H    bl.w     Kernel.Allocate
     22070    010005636H        0E000H    b        0 -> 22074
     22072    010005638H        0006CH    ; LineNo: 108
     22074    01000563AH        09800H    ldr      r0,[sp]
     22076    01000563CH        02800H    cmp      r0,#0
     22078    01000563EH        0D001H    beq.n    2 -> 22084
     22080    010005640H        0DF00H    svc      0
     22082    010005642H        0006CH    ; LineNo: 108
    Kernel.SetPeriod(t1, 1000, 0); Kernel.Enable(t1);
     22084    010005644H        0480EH    ldr      r0,[pc,#56] -> 22144 ; Global 02002FC60H
     22086    010005646H        06800H    ldr      r0,[r0]
     22088    010005648H        0217DH    movs     r1,#125
     22090    01000564AH        000C9H    lsls     r1,r1,#3
     22092    01000564CH        02200H    movs     r2,#0
     22094    01000564EH    0F7FFF933H    bl.w     Kernel.SetPeriod
     22098    010005652H        0E000H    b        0 -> 22102
     22100    010005654H        0006DH    ; LineNo: 109
     22102    010005656H        0480AH    ldr      r0,[pc,#40] -> 22144 ; Global 02002FC60H
     22104    010005658H        06800H    ldr      r0,[r0]
     22106    01000565AH    0F7FFF91BH    bl.w     Kernel.Enable
     22110    01000565EH        0E000H    b        0 -> 22114
     22112    010005660H        0006DH    ; LineNo: 109
    Kernel.Run
  END run;
     22114    010005662H    0F7FFFB91H    bl.w     Kernel.Run
     22118    010005666H        0E000H    b        0 -> 22122
     22120    010005668H        0006EH    ; LineNo: 110
     22122    01000566AH        0B001H    add      sp,#4
     22124    01000566CH        0BD00H    pop      { pc }
     22126    01000566EH        046C0H    nop
     22128    010005670H    0FFFFFEFEH    ; Const 0FFFFFEFEH -258
     22132    010005674H    0FFFFFF3EH    ; Const 0FFFFFF3EH -194
     22136    010005678H    02002FC64H    ; Global 02002FC64H
     22140    01000567CH    02002FC5CH    ; Global 02002FC5CH
     22144    010005680H    02002FC60H    ; Global 02002FC60H
     22148    010005684H    02002FC58H    ; Global 02002FC58H

PROCEDURE DebugEval..init;
BEGIN
     22152    010005688H        0B500H    push     { lr }
  run
END .init;
END DebugEval.
     22154    01000568AH    0F7FFFFA5H    bl.w     DebugEval.run
     22158    01000568EH        0E000H    b        0 -> 22162
     22160    010005690H        00073H    ; LineNo: 115
     22162    010005692H        0BD00H    pop      { pc }
     22164    010005694H    0F7FAFEB6H    bl.w     LinkOptions..init
     22168    010005698H    0F7FAFEBCH    bl.w     MCU2..init
     22172    01000569CH    0F7FAFEF0H    bl.w     Config..init
     22176    0100056A0H    0F7FAFF30H    bl.w     StartUp..init
     22180    0100056A4H    0F7FBF8ECH    bl.w     Error..init
     22184    0100056A8H    0F7FBFBBEH    bl.w     Errors..init
     22188    0100056ACH    0F7FBFD2CH    bl.w     GPIO..init
     22192    0100056B0H    0F7FBFE92H    bl.w     Clocks..init
     22196    0100056B4H    0F7FBFF24H    bl.w     MAU..init
     22200    0100056B8H    0F7FCFA4EH    bl.w     Memory..init
     22204    0100056BCH    0F7FCFA62H    bl.w     LED..init
     22208    0100056C0H    0F7FCFF16H    bl.w     RuntimeErrors..init
     22212    0100056C4H    0F7FCFF66H    bl.w     TextIO..init
     22216    0100056C8H    0F7FDFB44H    bl.w     Texts..init
     22220    0100056CCH    0F7FDFD2EH    bl.w     ResData..init
     22224    0100056D0H    0F7FEF944H    bl.w     RuntimeErrorsOu..init
     22228    0100056D4H    0F7FEFB6AH    bl.w     UARTdev..init
     22232    0100056D8H    0F7FEFC86H    bl.w     Terminals..init
     22236    0100056DCH    0F7FEFD68H    bl.w     Out..init
     22240    0100056E0H    0F7FEFDBEH    bl.w     In..init
     22244    0100056E4H    0F7FEFEBEH    bl.w     UARTstr..init
     22248    0100056E8H    0F7FEFF50H    bl.w     Main..init
     22252    0100056ECH    0F7FEFFC2H    bl.w     Coroutines..init
     22256    0100056F0H    0F7FEFFECH    bl.w     SysTick..init
     22260    0100056F4H    0F7FFFC5EH    bl.w     Kernel..init
     22264    0100056F8H    0F7FFFD24H    bl.w     LEDext..init
     22268    0100056FCH    0F7FFFE1EH    bl.w     Exceptions..init
     22272    010005700H    0F7FFFE8CH    bl.w     Timers..init
     22276    010005704H    0F7FFFE98H    bl.w     DebugEvalImp..init
     22280    010005708H    0F7FFFFBEH    bl.w     DebugEval..init
     22284    01000570CH    0F7FFFFFEH    bl.w     DebugEval..init + 132
     22288    010005710H    05237424FH    
     22292    010005714H        00001H    
     22296    010005718H    06665722EH    ".ref"
     22300    01000571CH        00000H    
     22304    010005720H        00000H    
     22308    010005724H        019B0H    
     22312    010005728H        00000H    
     22316    01000572CH    06B6E694CH    "Link"
     22320    010005730H    06974704FH    "Opti"
     22324    010005734H      0736E6FH    "ons"
     22328    010005738H        00000H    
     22332    01000573CH    010000340H    
     22336    010005740H        00001H    
     22340    010005744H    065646F43H    "Code"
     22344    010005748H    072617453H    "Star"
     22348    01000574CH    064644174H    "tAdd"
     22352    010005750H      0736572H    "res"
     22356    010005754H    010000344H    
     22360    010005758H        00002H    
     22364    01000575CH    074696E49H    "Init"
     22368    010005760H    072617400H    
     22372    010005764H    064644174H    "tAdd"
     22376    010005768H      0736572H    "res"
     22380    01000576CH    010000348H    
     22384    010005770H        00003H    
     22388    010005774H    0696E692EH    ".ini"
     22392    010005778H    072610074H    "t"
     22396    01000577CH    064644174H    "tAdd"
     22400    010005780H      0736572H    "res"
     22404    010005784H    010000404H    
     22408    010005788H        00000H    
     22412    01000578CH    03255434DH    "MCU2"
     22416    010005790H        00000H    
     22420    010005794H        00000H    
     22424    010005798H        00000H    
     22428    01000579CH    010000410H    
     22432    0100057A0H        00001H    
     22436    0100057A4H    0696E692EH    ".ini"
     22440    0100057A8H        00074H    "t"
     22444    0100057ACH        00000H    
     22448    0100057B0H        00000H    
     22452    0100057B4H    010000414H    
     22456    0100057B8H        00000H    
     22460    0100057BCH    0666E6F43H    "Conf"
     22464    0100057C0H        06769H    "ig"
     22468    0100057C4H        00000H    
     22472    0100057C8H        00000H    
     22476    0100057CCH    010000418H    
     22480    0100057D0H        00001H    
     22484    0100057D4H    074696E69H    "init"
     22488    0100057D8H    069747000H    
     22492    0100057DCH      0736E6FH    "ons"
     22496    0100057E0H        00000H    
     22500    0100057E4H    01000041CH    
     22504    0100057E8H        00002H    
     22508    0100057ECH    0696E692EH    ".ini"
     22512    0100057F0H    069740074H    "t"
     22516    0100057F4H      0736E6FH    "ons"
     22520    0100057F8H        00000H    
     22524    0100057FCH    010000480H    
     22528    010005800H        00000H    
     22532    010005804H    072617453H    "Star"
     22536    010005808H      0705574H    "tUp"
     22540    01000580CH        00000H    
     22544    010005810H        00000H    
     22548    010005814H    01000048CH    
     22552    010005818H        00001H    
     22556    01000581CH    069617741H    "Awai"
     22560    010005820H    0776F5074H    "tPow"
     22564    010005824H    06E4F7265H    "erOn"
     22568    010005828H      0736552H    "Res"
     22572    01000582CH    010000490H    
     22576    010005830H        00002H    
     22580    010005834H    0656C6552H    "Rele"
     22584    010005838H    052657361H    "aseR"
     22588    01000583CH    074657365H    "eset"
     22592    010005840H      0736500H    
     22596    010005844H    0100004B0H    
     22600    010005848H        00003H    
     22604    01000584CH    069617741H    "Awai"
     22608    010005850H    06C655274H    "tRel"
     22612    010005854H    065736165H    "ease"
     22616    010005858H      06E6F44H    "Don"
     22620    01000585CH    0100004E4H    
     22624    010005860H        00004H    
     22628    010005864H    0696E692EH    ".ini"
     22632    010005868H    06C650074H    "t"
     22636    01000586CH    065736165H    "ease"
     22640    010005870H      06E6F44H    "Don"
     22644    010005874H    010000504H    
     22648    010005878H        00000H    
     22652    01000587CH    06F727245H    "Erro"
     22656    010005880H        00072H    "r"
     22660    010005884H        00000H    
     22664    010005888H        00000H    
     22668    01000588CH    010000508H    
     22672    010005890H        00001H    
     22676    010005894H    04D647453H    "StdM"
     22680    010005898H        06773H    "sg"
     22684    01000589CH        00000H    
     22688    0100058A0H        00000H    
     22692    0100058A4H    01000050CH    
     22696    0100058A8H        00002H    
     22700    0100058ACH    0696E692EH    ".ini"
     22704    0100058B0H        00074H    "t"
     22708    0100058B4H        00000H    
     22712    0100058B8H        00000H    
     22716    0100058BCH    010000880H    
     22720    0100058C0H        00000H    
     22724    0100058C4H    06F727245H    "Erro"
     22728    0100058C8H        07372H    "rs"
     22732    0100058CCH        00000H    
     22736    0100058D0H        00000H    
     22740    0100058D4H    010000898H    
     22744    0100058D8H        00001H    
     22748    0100058DCH    06C756166H    "faul"
     22752    0100058E0H    073654D74H    "tMes"
     22756    0100058E4H    065676173H    "sage"
     22760    0100058E8H        00000H    
     22764    0100058ECH    01000089CH    
     22768    0100058F0H        00002H    
     22772    0100058F4H    06F727265H    "erro"
     22776    0100058F8H    073654D72H    "rMes"
     22780    0100058FCH    065676173H    "sage"
     22784    010005900H        00000H    
     22788    010005904H    0100009C4H    
     22792    010005908H        00003H    
     22796    01000590CH      067734DH    "Msg"
     22800    010005910H    073654D72H    "rMes"
     22804    010005914H    065676173H    "sage"
     22808    010005918H        00000H    
     22812    01000591CH    010000D9CH    
     22816    010005920H        00004H    
     22820    010005924H    045746547H    "GetE"
     22824    010005928H    070656378H    "xcep"
     22828    01000592CH    06E6F6974H    "tion"
     22832    010005930H      0707954H    "Typ"
     22836    010005934H    010000DC8H    
     22840    010005938H        00005H    
     22844    01000593CH    0696E692EH    ".ini"
     22848    010005940H    070650074H    "t"
     22852    010005944H    06E6F6974H    "tion"
     22856    010005948H      0707954H    "Typ"
     22860    01000594CH    010000E28H    
     22864    010005950H        00000H    
     22868    010005954H    04F495047H    "GPIO"
     22872    010005958H        00000H    
     22876    01000595CH        00000H    
     22880    010005960H        00000H    
     22884    010005964H    010000E2CH    
     22888    010005968H        00001H    
     22892    01000596CH    046746553H    "SetF"
     22896    010005970H    074636E75H    "unct"
     22900    010005974H      06E6F69H    "ion"
     22904    010005978H        00000H    
     22908    01000597CH    010000E44H    
     22912    010005980H        00002H    
     22916    010005984H    049746553H    "SetI"
     22920    010005988H    07265766EH    "nver"
     22924    01000598CH    073726574H    "ters"
     22928    010005990H        00000H    
     22932    010005994H    010000E8CH    
     22936    010005998H        00003H    
     22940    01000599CH    0666E6F43H    "Conf"
     22944    0100059A0H    072756769H    "igur"
     22948    0100059A4H    064615065H    "ePad"
     22952    0100059A8H        00000H    
     22956    0100059ACH    010000EC0H    
     22960    0100059B0H        00004H    
     22964    0100059B4H    050746547H    "GetP"
     22968    0100059B8H    061426461H    "adBa"
     22972    0100059BCH    066436573H    "seCf"
     22976    0100059C0H        00067H    "g"
     22980    0100059C4H    010000FA8H    
     22984    0100059C8H        00005H    
     22988    0100059CCH    061736944H    "Disa"
     22992    0100059D0H    04F656C62H    "bleO"
     22996    0100059D4H    075707475H    "utpu"
     23000    0100059D8H        00074H    "t"
     23004    0100059DCH    010000FD4H    
     23008    0100059E0H        00006H    
     23012    0100059E4H    061736944H    "Disa"
     23016    0100059E8H    049656C62H    "bleI"
     23020    0100059ECH    07475706EH    "nput"
     23024    0100059F0H        00000H    
     23028    0100059F4H    010000FF0H    
     23032    0100059F8H        00007H    
     23036    0100059FCH      0746553H    "Set"
     23040    010005A00H    049656C62H    "bleI"
     23044    010005A04H    07475706EH    "nput"
     23048    010005A08H        00000H    
     23052    010005A0CH    01000100CH    
     23056    010005A10H        00008H    
     23060    010005A14H    061656C43H    "Clea"
     23064    010005A18H    049650072H    "r"
     23068    010005A1CH    07475706EH    "nput"
     23072    010005A20H        00000H    
     23076    010005A24H    01000101CH    
     23080    010005A28H        00009H    
     23084    010005A2CH    067676F54H    "Togg"
     23088    010005A30H    04900656CH    "le"
     23092    010005A34H    07475706EH    "nput"
     23096    010005A38H        00000H    
     23100    010005A3CH    01000102CH    
     23104    010005A40H        0000AH    
     23108    010005A44H      0746547H    "Get"
     23112    010005A48H    04900656CH    "le"
     23116    010005A4CH    07475706EH    "nput"
     23120    010005A50H        00000H    
     23124    010005A54H    01000103CH    
     23128    010005A58H        0000BH    
     23132    010005A5CH      0747550H    "Put"
     23136    010005A60H    04900656CH    "le"
     23140    010005A64H    07475706EH    "nput"
     23144    010005A68H        00000H    
     23148    010005A6CH    010001050H    
     23152    010005A70H        0000CH    
     23156    010005A74H    042746547H    "GetB"
     23160    010005A78H      06B6361H    "ack"
     23164    010005A7CH    07475706EH    "nput"
     23168    010005A80H        00000H    
     23172    010005A84H    010001060H    
     23176    010005A88H        0000DH    
     23180    010005A8CH    063656843H    "Chec"
     23184    010005A90H      06B006BH    "k"
     23188    010005A94H    07475706EH    "nput"
     23192    010005A98H        00000H    
     23196    010005A9CH    010001074H    
     23200    010005AA0H        0000EH    
     23204    010005AA4H    07074754FH    "Outp"
     23208    010005AA8H    06E457475H    "utEn"
     23212    010005AACH    0656C6261H    "able"
     23216    010005AB0H        00000H    
     23220    010005AB4H    010001098H    
     23224    010005AB8H        0000FH    
     23228    010005ABCH    07074754FH    "Outp"
     23232    010005AC0H    069447475H    "utDi"
     23236    010005AC4H    06C626173H    "sabl"
     23240    010005AC8H        00065H    "e"
     23244    010005ACCH    0100010A8H    
     23248    010005AD0H        00010H    
     23252    010005AD4H    07074754FH    "Outp"
     23256    010005AD8H    06E457475H    "utEn"
     23260    010005ADCH    067676F54H    "Togg"
     23264    010005AE0H        0656CH    "le"
     23268    010005AE4H    0100010B8H    
     23272    010005AE8H        00011H    
     23276    010005AECH    04F746547H    "GetO"
     23280    010005AF0H    075707475H    "utpu"
     23284    010005AF4H    0616E4574H    "tEna"
     23288    010005AF8H      0656C62H    "ble"
     23292    010005AFCH    0100010C8H    
     23296    010005B00H        00012H    
     23300    010005B04H    074696E69H    "init"
     23304    010005B08H    075707400H    
     23308    010005B0CH    0616E4574H    "tEna"
     23312    010005B10H      0656C62H    "ble"
     23316    010005B14H    0100010DCH    
     23320    010005B18H        00013H    
     23324    010005B1CH    0696E692EH    ".ini"
     23328    010005B20H    075700074H    "t"
     23332    010005B24H    0616E4574H    "tEna"
     23336    010005B28H      0656C62H    "ble"
     23340    010005B2CH    010001108H    
     23344    010005B30H        00000H    
     23348    010005B34H    0636F6C43H    "Cloc"
     23352    010005B38H        0736BH    "ks"
     23356    010005B3CH        00000H    
     23360    010005B40H        00000H    
     23364    010005B44H    010001114H    
     23368    010005B48H        00001H    
     23372    010005B4CH    0696E6F4DH    "Moni"
     23376    010005B50H      0726F74H    "tor"
     23380    010005B54H        00000H    
     23384    010005B58H        00000H    
     23388    010005B5CH    010001118H    
     23392    010005B60H        00002H    
     23396    010005B64H    062616E45H    "Enab"
     23400    010005B68H    06C43656CH    "leCl"
     23404    010005B6CH    0576B636FH    "ockW"
     23408    010005B70H      0656B61H    "ake"
     23412    010005B74H    01000115CH    
     23416    010005B78H        00003H    
     23420    010005B7CH    061736944H    "Disa"
     23424    010005B80H    043656C62H    "bleC"
     23428    010005B84H    06B636F6CH    "lock"
     23432    010005B88H      06B6157H    "Wak"
     23436    010005B8CH    010001178H    
     23440    010005B90H        00004H    
     23444    010005B94H    062616E45H    "Enab"
     23448    010005B98H    06C43656CH    "leCl"
     23452    010005B9CH    0536B636FH    "ockS"
     23456    010005BA0H      065656CH    "lee"
     23460    010005BA4H    010001194H    
     23464    010005BA8H        00005H    
     23468    010005BACH    061736944H    "Disa"
     23472    010005BB0H    043656C62H    "bleC"
     23476    010005BB4H    06B636F6CH    "lock"
     23480    010005BB8H      0656C53H    "Sle"
     23484    010005BBCH    0100011B0H    
     23488    010005BC0H        00006H    
     23492    010005BC4H    045746547H    "GetE"
     23496    010005BC8H    06C62616EH    "nabl"
     23500    010005BCCH    06B006465H    "ed"
     23504    010005BD0H      0656C53H    "Sle"
     23508    010005BD4H    0100011CCH    
     23512    010005BD8H        00007H    
     23516    010005BDCH    072617473H    "star"
     23520    010005BE0H    0534F5874H    "tXOS"
     23524    010005BE4H    06B000043H    "C"
     23528    010005BE8H      0656C53H    "Sle"
     23532    010005BECH    0100011ECH    
     23536    010005BF0H        00008H    
     23540    010005BF4H    072617473H    "star"
     23544    010005BF8H    073795374H    "tSys"
     23548    010005BFCH      04C4C50H    "PLL"
     23552    010005C00H      0656C53H    "Sle"
     23556    010005C04H    01000123CH    
     23560    010005C08H        00009H    
     23564    010005C0CH    072617473H    "star"
     23568    010005C10H    062735574H    "tUsb"
     23572    010005C14H      04C4C50H    "PLL"
     23576    010005C18H      0656C53H    "Sle"
     23580    010005C1CH    0100012B4H    
     23584    010005C20H        0000AH    
     23588    010005C24H    06E6E6F63H    "conn"
     23592    010005C28H    043746365H    "ectC"
     23596    010005C2CH    06B636F6CH    "lock"
     23600    010005C30H      0650073H    "s"
     23604    010005C34H    01000132CH    
     23608    010005C38H        0000BH    
     23612    010005C3CH    072617473H    "star"
     23616    010005C40H    063695474H    "tTic"
     23620    010005C44H    06F6C436BH    "kClo"
     23624    010005C48H        06B63H    "ck"
     23628    010005C4CH    010001390H    
     23632    010005C50H        0000CH    
     23636    010005C54H    074696E69H    "init"
     23640    010005C58H    063695400H    
     23644    010005C5CH    06F6C436BH    "kClo"
     23648    010005C60H        06B63H    "ck"
     23652    010005C64H    0100013ACH    
     23656    010005C68H        0000DH    
     23660    010005C6CH    0696E692EH    ".ini"
     23664    010005C70H    063690074H    "t"
     23668    010005C74H    06F6C436BH    "kClo"
     23672    010005C78H        06B63H    "ck"
     23676    010005C7CH    0100013D8H    
     23680    010005C80H        00000H    
     23684    010005C84H      055414DH    "MAU"
     23688    010005C88H        00000H    
     23692    010005C8CH        00000H    
     23696    010005C90H        00000H    
     23700    010005C94H    0100013E4H    
     23704    010005C98H        00001H    
     23708    010005C9CH      077654EH    "New"
     23712    010005CA0H    06974704FH    "Opti"
     23716    010005CA4H      0736E6FH    "ons"
     23720    010005CA8H        00000H    
     23724    010005CACH    0100013E8H    
     23728    010005CB0H        00002H    
     23732    010005CB4H    070736944H    "Disp"
     23736    010005CB8H      065736FH    "ose"
     23740    010005CBCH      0736E6FH    "ons"
     23744    010005CC0H        00000H    
     23748    010005CC4H    01000140CH    
     23752    010005CC8H        00003H    
     23756    010005CCCH    04E746553H    "SetN"
     23760    010005CD0H        07765H    "ew"
     23764    010005CD4H      0736E6FH    "ons"
     23768    010005CD8H        00000H    
     23772    010005CDCH    010001430H    
     23776    010005CE0H        00004H    
     23780    010005CE4H    044746553H    "SetD"
     23784    010005CE8H    06F707369H    "ispo"
     23788    010005CECH        06573H    "se"
     23792    010005CF0H        00000H    
     23796    010005CF4H    010001440H    
     23800    010005CF8H        00005H    
     23804    010005CFCH    06F6C6C41H    "Allo"
     23808    010005D00H    065746163H    "cate"
     23812    010005D04H        06500H    
     23816    010005D08H        00000H    
     23820    010005D0CH    010001450H    
     23824    010005D10H        00006H    
     23828    010005D14H    06C616544H    "Deal"
     23832    010005D18H    061636F6CH    "loca"
     23836    010005D1CH        06574H    "te"
     23840    010005D20H        00000H    
     23844    010005D24H    0100014BCH    
     23848    010005D28H        00007H    
     23852    010005D2CH    0696E692EH    ".ini"
     23856    010005D30H    061630074H    "t"
     23860    010005D34H        06574H    
     23864    010005D38H        00000H    
     23868    010005D3CH    010001500H    
     23872    010005D40H        00000H    
     23876    010005D44H    06F6D654DH    "Memo"
     23880    010005D48H        07972H    "ry"
     23884    010005D4CH        00000H    
     23888    010005D50H        00000H    
     23892    010005D54H    010001548H    
     23896    010005D58H        00001H    
     23900    010005D5CH    06F6C6C41H    "Allo"
     23904    010005D60H    065746163H    "cate"
     23908    010005D64H        00000H    
     23912    010005D68H        00000H    
     23916    010005D6CH    01000159CH    
     23920    010005D70H        00002H    
     23924    010005D74H    06C616544H    "Deal"
     23928    010005D78H    061636F6CH    "loca"
     23932    010005D7CH        06574H    "te"
     23936    010005D80H        00000H    
     23940    010005D84H    010001634H    
     23944    010005D88H        00003H    
     23948    010005D8CH    06B636F4CH    "Lock"
     23952    010005D90H    070616548H    "Heap"
     23956    010005D94H        00073H    "s"
     23960    010005D98H        00000H    
     23964    010005D9CH    0100016A0H    
     23968    010005DA0H        00004H    
     23972    010005DA4H    074696E69H    "init"
     23976    010005DA8H    063617453H    "Stac"
     23980    010005DACH    06568436BH    "kChe"
     23984    010005DB0H        06B63H    "ck"
     23988    010005DB4H    0100016B8H    
     23992    010005DB8H        00005H    
     23996    010005DBCH    063656863H    "chec"
     24000    010005DC0H    06174536BH    "kSta"
     24004    010005DC4H    073556B63H    "ckUs"
     24008    010005DC8H      0656761H    "age"
     24012    010005DCCH    0100016DCH    
     24016    010005DD0H        00006H    
     24020    010005DD4H    063656843H    "Chec"
     24024    010005DD8H    06F6F4C6BH    "kLoo"
     24028    010005DDCH    061745370H    "pSta"
     24032    010005DE0H      0556B63H    "ckU"
     24036    010005DE4H    010001720H    
     24040    010005DE8H        00007H    
     24044    010005DECH    063656843H    "Chec"
     24048    010005DF0H    07268546BH    "kThr"
     24052    010005DF4H    053646165H    "eadS"
     24056    010005DF8H      0636174H    "tac"
     24060    010005DFCH    01000178CH    
     24064    010005E00H        00008H    
     24068    010005E04H    06F6C6C61H    "allo"
     24072    010005E08H    061745363H    "cSta"
     24076    010005E0CH    053006B63H    "ck"
     24080    010005E10H      0636174H    "tac"
     24084    010005E14H    010001810H    
     24088    010005E18H        00009H    
     24092    010005E1CH    06F6C6C41H    "Allo"
     24096    010005E20H    072685463H    "cThr"
     24100    010005E24H    053646165H    "eadS"
     24104    010005E28H      0636174H    "tac"
     24108    010005E2CH    0100018B8H    
     24112    010005E30H        0000AH    
     24116    010005E34H    06F6C6C41H    "Allo"
     24120    010005E38H    06F6F4C63H    "cLoo"
     24124    010005E3CH    061745370H    "pSta"
     24128    010005E40H        06B63H    "ck"
     24132    010005E44H    010001968H    
     24136    010005E48H        0000BH    
     24140    010005E4CH    062616E45H    "Enab"
     24144    010005E50H    07453656CH    "leSt"
     24148    010005E54H    0436B6361H    "ackC"
     24152    010005E58H      0636568H    "hec"
     24156    010005E5CH    010001A00H    
     24160    010005E60H        0000CH    
     24164    010005E64H    065736552H    "Rese"
     24168    010005E68H    069614D74H    "tMai"
     24172    010005E6CH    06174536EH    "nSta"
     24176    010005E70H        06B63H    "ck"
     24180    010005E74H    010001A30H    
     24184    010005E78H        0000DH    
     24188    010005E7CH    074696E69H    "init"
     24192    010005E80H    069614D00H    
     24196    010005E84H    06174536EH    "nSta"
     24200    010005E88H        06B63H    "ck"
     24204    010005E8CH    010001A78H    
     24208    010005E90H        0000EH    
     24212    010005E94H    0696E692EH    ".ini"
     24216    010005E98H    069610074H    "t"
     24220    010005E9CH    06174536EH    "nSta"
     24224    010005EA0H        06B63H    "ck"
     24228    010005EA4H    010001B58H    
     24232    010005EA8H        00000H    
     24236    010005EACH      044454CH    "LED"
     24240    010005EB0H        00000H    
     24244    010005EB4H        00000H    
     24248    010005EB8H        00000H    
     24252    010005EBCH    010001B64H    
     24256    010005EC0H        00001H    
     24260    010005EC4H    074696E69H    "init"
     24264    010005EC8H        00000H    
     24268    010005ECCH        00000H    
     24272    010005ED0H        00000H    
     24276    010005ED4H    010001B68H    
     24280    010005ED8H        00002H    
     24284    010005EDCH    0696E692EH    ".ini"
     24288    010005EE0H        00074H    "t"
     24292    010005EE4H        00000H    
     24296    010005EE8H        00000H    
     24300    010005EECH    010001B84H    
     24304    010005EF0H        00000H    
     24308    010005EF4H    0746E7552H    "Runt"
     24312    010005EF8H    045656D69H    "imeE"
     24316    010005EFCH    0726F7272H    "rror"
     24320    010005F00H        00073H    "s"
     24324    010005F04H    010001B90H    
     24328    010005F08H        00001H    
     24332    010005F0CH    0544C4148H    "HALT"
     24336    010005F10H        07900H    
     24340    010005F14H        00000H    
     24344    010005F18H        00000H    
     24348    010005F1CH    010001C34H    
     24352    010005F20H        00002H    
     24356    010005F24H    048746567H    "getH"
     24360    010005F28H    057666C61H    "alfW"
     24364    010005F2CH      064726FH    "ord"
     24368    010005F30H        00000H    
     24372    010005F34H    010001C5CH    
     24376    010005F38H        00003H    
     24380    010005F3CH    04C427369H    "isBL"
     24384    010005F40H    057666C00H    
     24388    010005F44H      064726FH    "ord"
     24392    010005F48H        00000H    
     24396    010005F4CH    010001C88H    
     24400    010005F50H        00004H    
     24404    010005F54H    04C427369H    "isBL"
     24408    010005F58H    057660058H    "X"
     24412    010005F5CH      064726FH    "ord"
     24416    010005F60H        00000H    
     24420    010005F64H    010001CACH    
     24424    010005F68H        00005H    
     24428    010005F6CH    04E746567H    "getN"
     24432    010005F70H    04C747865H    "extL"
     24436    010005F74H      0640052H    "R"
     24440    010005F78H        00000H    
     24444    010005F7CH    010001CE0H    
     24448    010005F80H        00006H    
     24452    010005F84H    063617453H    "Stac"
     24456    010005F88H    06172746BH    "ktra"
     24460    010005F8CH        06563H    "ce"
     24464    010005F90H        00000H    
     24468    010005F94H    010001D90H    
     24472    010005F98H        00007H    
     24476    010005F9CH    072747865H    "extr"
     24480    010005FA0H    045746361H    "actE"
     24484    010005FA4H    0726F7272H    "rror"
     24488    010005FA8H        00000H    
     24492    010005FACH    010001E44H    
     24496    010005FB0H        00008H    
     24500    010005FB4H    072747865H    "extr"
     24504    010005FB8H    046746361H    "actF"
     24508    010005FBCH    0746C7561H    "ault"
     24512    010005FC0H        00000H    
     24516    010005FC4H    010001E9CH    
     24520    010005FC8H        00009H    
     24524    010005FCCH    064616572H    "read"
     24528    010005FD0H    073676552H    "Regs"
     24532    010005FD4H    0746C7500H    
     24536    010005FD8H        00000H    
     24540    010005FDCH    010001EB8H    
     24544    010005FE0H        0000AH    
     24548    010005FE4H    063617274H    "trac"
     24552    010005FE8H    061745365H    "eSta"
     24556    010005FECH    074007472H    "rt"
     24560    010005FF0H        00000H    
     24564    010005FF4H    010001F14H    
     24568    010005FF8H        0000BH    
     24572    010005FFCH    063617473H    "stac"
     24576    010006000H    06172466BH    "kFra"
     24580    010006004H    06142656DH    "meBa"
     24584    010006008H        06573H    "se"
     24588    01000600CH    010001F38H    
     24592    010006010H        0000CH    
     24596    010006014H    06F727265H    "erro"
     24600    010006018H    06E614872H    "rHan"
     24604    01000601CH    072656C64H    "dler"
     24608    010006020H        06500H    
     24612    010006024H    010001F60H    
     24616    010006028H        0000DH    
     24620    01000602CH    06C756166H    "faul"
     24624    010006030H    06E614874H    "tHan"
     24628    010006034H    072656C64H    "dler"
     24632    010006038H        06500H    
     24636    01000603CH    010002134H    
     24640    010006040H        0000EH    
     24644    010006044H    048746553H    "SetH"
     24648    010006048H    06C646E61H    "andl"
     24652    01000604CH    072007265H    "er"
     24656    010006050H        06500H    
     24660    010006054H    0100022ACH    
     24664    010006058H        0000FH    
     24668    01000605CH    048746553H    "SetH"
     24672    010006060H      0746C61H    "alt"
     24676    010006064H    072007265H    "er"
     24680    010006068H        06500H    
     24684    01000606CH    0100022C8H    
     24688    010006070H        00010H    
     24692    010006074H    053746553H    "SetS"
     24696    010006078H    06B636174H    "tack"
     24700    01000607CH    063617274H    "trac"
     24704    010006080H      06E4F65H    "eOn"
     24708    010006084H    0100022E4H    
     24712    010006088H        00011H    
     24716    01000608CH    053746553H    "SetS"
     24720    010006090H    06B636174H    "tack"
     24724    010006094H    065526465H    "edRe"
     24728    010006098H      04F7367H    "gsO"
     24732    01000609CH    010002308H    
     24736    0100060A0H        00012H    
     24740    0100060A4H    043746553H    "SetC"
     24744    0100060A8H    065727275H    "urre"
     24748    0100060ACH    06552746EH    "ntRe"
     24752    0100060B0H      04F7367H    "gsO"
     24756    0100060B4H    01000232CH    
     24760    0100060B8H        00013H    
     24764    0100060BCH    074736E69H    "inst"
     24768    0100060C0H      06C6C61H    "all"
     24772    0100060C4H    06552746EH    "ntRe"
     24776    0100060C8H      04F7367H    "gsO"
     24780    0100060CCH    010002350H    
     24784    0100060D0H        00014H    
     24788    0100060D4H    04F64656CH    "ledO"
     24792    0100060D8H    0646E416EH    "nAnd"
     24796    0100060DCH    0746C6148H    "Halt"
     24800    0100060E0H      04F7300H    
     24804    0100060E4H    010002364H    
     24808    0100060E8H        00015H    
     24812    0100060ECH    074696E69H    "init"
     24816    0100060F0H    0646E4100H    
     24820    0100060F4H    0746C6148H    "Halt"
     24824    0100060F8H      04F7300H    
     24828    0100060FCH    010002378H    
     24832    010006100H        00016H    
     24836    010006104H    0696E692EH    ".ini"
     24840    010006108H    0646E0074H    "t"
     24844    01000610CH    0746C6148H    "Halt"
     24848    010006110H      04F7300H    
     24852    010006114H    0100024F0H    
     24856    010006118H        00000H    
     24860    01000611CH    074786554H    "Text"
     24864    010006120H        04F49H    "IO"
     24868    010006124H        00000H    
     24872    010006128H        00000H    
     24876    01000612CH    0100024FCH    
     24880    010006130H        00001H    
     24884    010006134H    06E65704FH    "Open"
     24888    010006138H    074697257H    "Writ"
     24892    01000613CH        07265H    "er"
     24896    010006140H        00000H    
     24900    010006144H    01000253CH    
     24904    010006148H        00002H    
     24908    01000614CH    074736E49H    "Inst"
     24912    010006150H    0466C6C61H    "allF"
     24916    010006154H    06873756CH    "lush"
     24920    010006158H      074754FH    "Out"
     24924    01000615CH    010002560H    
     24928    010006160H        00003H    
     24932    010006164H    06E65704FH    "Open"
     24936    010006168H    064616552H    "Read"
     24940    01000616CH    068007265H    "er"
     24944    010006170H      074754FH    "Out"
     24948    010006174H    010002578H    
     24952    010006178H        00004H    
     24956    01000617CH    0696E692EH    ".ini"
     24960    010006180H    064610074H    "t"
     24964    010006184H    068007265H    "er"
     24968    010006188H      074754FH    "Out"
     24972    01000618CH    010002594H    
     24976    010006190H        00000H    
     24980    010006194H    074786554H    "Text"
     24984    010006198H        00073H    "s"
     24988    01000619CH        00000H    
     24992    0100061A0H        00000H    
     24996    0100061A4H    010002598H    
     25000    0100061A8H        00001H    
     25004    0100061ACH    054746E49H    "IntT"
     25008    0100061B0H    07274536FH    "oStr"
     25012    0100061B4H      0676E69H    "ing"
     25016    0100061B8H        00000H    
     25020    0100061BCH    0100025C0H    
     25024    0100061C0H        00002H    
     25028    0100061C4H    054746E49H    "IntT"
     25032    0100061C8H    07865486FH    "oHex"
     25036    0100061CCH    069727453H    "Stri"
     25040    0100061D0H        0676EH    "ng"
     25044    0100061D4H    010002718H    
     25048    0100061D8H        00003H    
     25052    0100061DCH    054746E49H    "IntT"
     25056    0100061E0H    06E69426FH    "oBin"
     25060    0100061E4H    069727453H    "Stri"
     25064    0100061E8H        0676EH    "ng"
     25068    0100061ECH    0100027F4H    
     25072    0100061F0H        00004H    
     25076    0100061F4H    074697257H    "Writ"
     25080    0100061F8H    06E690065H    "e"
     25084    0100061FCH    069727453H    "Stri"
     25088    010006200H        0676EH    "ng"
     25092    010006204H    0100028B8H    
     25096    010006208H        00005H    
     25100    01000620CH    074697257H    "Writ"
     25104    010006210H    072745365H    "eStr"
     25108    010006214H      0676E69H    "ing"
     25112    010006218H        0676EH    
     25116    01000621CH    0100028E8H    
     25120    010006220H        00006H    
     25124    010006224H    074697257H    "Writ"
     25128    010006228H      06E4C65H    "eLn"
     25132    01000622CH      0676E69H    "ing"
     25136    010006230H        0676EH    
     25140    010006234H    010002940H    
     25144    010006238H        00007H    
     25148    01000623CH    074697277H    "writ"
     25152    010006240H    06D754E65H    "eNum"
     25156    010006244H    069727453H    "Stri"
     25160    010006248H        0676EH    "ng"
     25164    01000624CH    010002968H    
     25168    010006250H        00008H    
     25172    010006254H    074697257H    "Writ"
     25176    010006258H    0746E4965H    "eInt"
     25180    01000625CH    069727400H    
     25184    010006260H        0676EH    
     25188    010006264H    0100029CCH    
     25192    010006268H        00009H    
     25196    01000626CH    074697257H    "Writ"
     25200    010006270H    078654865H    "eHex"
     25204    010006274H    069727400H    
     25208    010006278H        0676EH    
     25212    01000627CH    0100029FCH    
     25216    010006280H        0000AH    
     25220    010006284H    074697257H    "Writ"
     25224    010006288H    06E694265H    "eBin"
     25228    01000628CH    069727400H    
     25232    010006290H        0676EH    
     25236    010006294H    010002A2CH    
     25240    010006298H        0000BH    
     25244    01000629CH    061656C63H    "clea"
     25248    0100062A0H    066654C6EH    "nLef"
     25252    0100062A4H    069720074H    "t"
     25256    0100062A8H        0676EH    
     25260    0100062ACH    010002A5CH    
     25264    0100062B0H        0000CH    
     25268    0100062B4H    061656C63H    "clea"
     25272    0100062B8H    06769526EH    "nRig"
     25276    0100062BCH    069007468H    "ht"
     25280    0100062C0H        0676EH    
     25284    0100062C4H    010002B28H    
     25288    0100062C8H        0000DH    
     25292    0100062CCH    054727453H    "StrT"
     25296    0100062D0H    0746E496FH    "oInt"
     25300    0100062D4H    069007400H    
     25304    0100062D8H        0676EH    
     25308    0100062DCH    010002B5CH    
     25312    0100062E0H        0000EH    
     25316    0100062E4H    064616552H    "Read"
     25320    0100062E8H    069727453H    "Stri"
     25324    0100062ECH    06900676EH    "ng"
     25328    0100062F0H        0676EH    
     25332    0100062F4H    010002C88H    
     25336    0100062F8H        0000FH    
     25340    0100062FCH    064616552H    "Read"
     25344    010006300H      0746E49H    "Int"
     25348    010006304H    06900676EH    "ng"
     25352    010006308H        0676EH    
     25356    01000630CH    010002CCCH    
     25360    010006310H        00010H    
     25364    010006314H    073756C46H    "Flus"
     25368    010006318H    074754F68H    "hOut"
     25372    01000631CH    069006700H    
     25376    010006320H        0676EH    
     25380    010006324H    010002D28H    
     25384    010006328H        00011H    
     25388    01000632CH    0696E692EH    ".ini"
     25392    010006330H    074750074H    "t"
     25396    010006334H    069006700H    
     25400    010006338H        0676EH    
     25404    01000633CH    010002D54H    
     25408    010006340H        00000H    
     25412    010006344H    044736552H    "ResD"
     25416    010006348H      0617461H    "ata"
     25420    01000634CH        00000H    
     25424    010006350H        00000H    
     25428    010006354H    010002D68H    
     25432    010006358H        00001H    
     25436    01000635CH    0657A6953H    "Size"
     25440    010006360H    069747000H    
     25444    010006364H      0736E6FH    "ons"
     25448    010006368H        00000H    
     25452    01000636CH    010002D94H    
     25456    010006370H        00002H    
     25460    010006374H    049746547H    "GetI"
     25464    010006378H    06900746EH    "nt"
     25468    01000637CH      0736E6FH    "ons"
     25472    010006380H        00000H    
     25476    010006384H    010002DA0H    
     25480    010006388H        00003H    
     25484    01000638CH    042746547H    "GetB"
     25488    010006390H      0657479H    "yte"
     25492    010006394H      0736E6FH    "ons"
     25496    010006398H        00000H    
     25500    01000639CH    010002DC4H    
     25504    0100063A0H        00004H    
     25508    0100063A4H    043746547H    "GetC"
     25512    0100063A8H      0726168H    "har"
     25516    0100063ACH      0736E6FH    "ons"
     25520    0100063B0H        00000H    
     25524    0100063B4H    010002DE8H    
     25528    0100063B8H        00005H    
     25532    0100063BCH    049746547H    "GetI"
     25536    0100063C0H    07241746EH    "ntAr"
     25540    0100063C4H      0796172H    "ray"
     25544    0100063C8H        00000H    
     25548    0100063CCH    010002E0CH    
     25552    0100063D0H        00006H    
     25556    0100063D4H    052746547H    "GetR"
     25560    0100063D8H      06C6165H    "eal"
     25564    0100063DCH      0796172H    "ray"
     25568    0100063E0H        00000H    
     25572    0100063E4H    010002E88H    
     25576    0100063E8H        00007H    
     25580    0100063ECH    052746547H    "GetR"
     25584    0100063F0H    0416C6165H    "ealA"
     25588    0100063F4H    079617272H    "rray"
     25592    0100063F8H        00000H    
     25596    0100063FCH    010002EACH    
     25600    010006400H        00008H    
     25604    010006404H    04E746547H    "GetN"
     25608    010006408H      0656D61H    "ame"
     25612    01000640CH    079617272H    "rray"
     25616    010006410H        00000H    
     25620    010006414H    010002F28H    
     25624    010006418H        00009H    
     25628    01000641CH    06E756F43H    "Coun"
     25632    010006420H      0650074H    "t"
     25636    010006424H    079617272H    "rray"
     25640    010006428H        00000H    
     25644    01000642CH    010002F94H    
     25648    010006430H        0000AH    
     25652    010006434H    044746547H    "GetD"
     25656    010006438H    063657269H    "irec"
     25660    01000643CH    079726F74H    "tory"
     25664    010006440H        00000H    
     25668    010006444H    010002FE4H    
     25672    010006448H        0000BH    
     25676    01000644CH    06E65704FH    "Open"
     25680    010006450H    063657200H    
     25684    010006454H    079726F74H    "tory"
     25688    010006458H        00000H    
     25692    01000645CH    010003070H    
     25696    010006460H        0000CH    
     25700    010006464H    0696E692EH    ".ini"
     25704    010006468H    063650074H    "t"
     25708    01000646CH    079726F74H    "tory"
     25712    010006470H        00000H    
     25716    010006474H    01000312CH    
     25720    010006478H        00000H    
     25724    01000647CH    0746E7552H    "Runt"
     25728    010006480H    045656D69H    "imeE"
     25732    010006484H    0726F7272H    "rror"
     25736    010006488H      0754F73H    "sOu"
     25740    01000648CH    010003130H    
     25744    010006490H        00001H    
     25748    010006494H    041746E69H    "intA"
     25752    010006498H    079617272H    "rray"
     25756    01000649CH    068436F54H    "ToCh"
     25760    0100064A0H      0737261H    "ars"
     25764    0100064A4H    010003134H    
     25768    0100064A8H        00002H    
     25772    0100064ACH    04E746547H    "GetN"
     25776    0100064B0H      0656D61H    "ame"
     25780    0100064B4H    068436F54H    "ToCh"
     25784    0100064B8H      0737261H    "ars"
     25788    0100064BCH    010003168H    
     25792    0100064C0H        00003H    
     25796    0100064C4H    06E697270H    "prin"
     25800    0100064C8H    061745374H    "tSta"
     25804    0100064CCH    072546B63H    "ckTr"
     25808    0100064D0H      0656361H    "ace"
     25812    0100064D4H    010003290H    
     25816    0100064D8H        00004H    
     25820    0100064DCH    04F676572H    "regO"
     25824    0100064E0H    061007475H    "ut"
     25828    0100064E4H    072546B63H    "ckTr"
     25832    0100064E8H      0656361H    "ace"
     25836    0100064ECH    0100034C4H    
     25840    0100064F0H        00005H    
     25844    0100064F4H    06E697270H    "prin"
     25848    0100064F8H    061745374H    "tSta"
     25852    0100064FCH    064656B63H    "cked"
     25856    010006500H      0676552H    "Reg"
     25860    010006504H    0100034FCH    
     25864    010006508H        00006H    
     25868    01000650CH    06E697270H    "prin"
     25872    010006510H    072754374H    "tCur"
     25876    010006514H    0746E6572H    "rent"
     25880    010006518H      0676552H    "Reg"
     25884    01000651CH    010003630H    
     25888    010006520H        00007H    
     25892    010006524H    06E697250H    "Prin"
     25896    010006528H    063784574H    "tExc"
     25900    01000652CH    069747065H    "epti"
     25904    010006530H        06E6FH    "on"
     25908    010006534H    0100036D8H    
     25912    010006538H        00008H    
     25916    01000653CH    0646E6148H    "Hand"
     25920    010006540H    07845656CH    "leEx"
     25924    010006544H    074706563H    "cept"
     25928    010006548H      06E6F69H    "ion"
     25932    01000654CH    010003900H    
     25936    010006550H        00009H    
     25940    010006554H    057746553H    "SetW"
     25944    010006558H    065746972H    "rite"
     25948    01000655CH    074700072H    "r"
     25952    010006560H      06E6F69H    "ion"
     25956    010006564H    010003934H    
     25960    010006568H        0000AH    
     25964    01000656CH    0696E692EH    ".ini"
     25968    010006570H    065740074H    "t"
     25972    010006574H    074700072H    "r"
     25976    010006578H      06E6F69H    "ion"
     25980    01000657CH    01000395CH    
     25984    010006580H        00000H    
     25988    010006584H    054524155H    "UART"
     25992    010006588H      0766564H    "dev"
     25996    01000658CH        00000H    
     26000    010006590H        00000H    
     26004    010006594H    010003960H    
     26008    010006598H        00001H    
     26012    01000659CH    074696E49H    "Init"
     26016    0100065A0H        04F00H    
     26020    0100065A4H        00000H    
     26024    0100065A8H        00000H    
     26028    0100065ACH    01000398CH    
     26032    0100065B0H        00002H    
     26036    0100065B4H    0666E6F43H    "Conf"
     26040    0100065B8H    072756769H    "igur"
     26044    0100065BCH        00065H    "e"
     26048    0100065C0H        00000H    
     26052    0100065C4H    010003A6CH    
     26056    0100065C8H        00003H    
     26060    0100065CCH    062616E45H    "Enab"
     26064    0100065D0H    07200656CH    "le"
     26068    0100065D4H        00065H    
     26072    0100065D8H        00000H    
     26076    0100065DCH    010003C40H    
     26080    0100065E0H        00004H    
     26084    0100065E4H    061736944H    "Disa"
     26088    0100065E8H      0656C62H    "ble"
     26092    0100065ECH        00065H    
     26096    0100065F0H        00000H    
     26100    0100065F4H    010003C64H    
     26104    0100065F8H        00005H    
     26108    0100065FCH    067616C46H    "Flag"
     26112    010006600H      0650073H    "s"
     26116    010006604H        00065H    
     26120    010006608H        00000H    
     26124    01000660CH    010003C88H    
     26128    010006610H        00006H    
     26132    010006614H    042746547H    "GetB"
     26136    010006618H    043657361H    "aseC"
     26140    01000661CH        06766H    "fg"
     26144    010006620H        00000H    
     26148    010006624H    010003C9CH    
     26152    010006628H        00007H    
     26156    01000662CH    043746547H    "GetC"
     26160    010006630H    065727275H    "urre"
     26164    010006634H    06643746EH    "ntCf"
     26168    010006638H        00067H    "g"
     26172    01000663CH    010003CB8H    
     26176    010006640H        00008H    
     26180    010006644H    046746553H    "SetF"
     26184    010006648H    04C6F6669H    "ifoL"
     26188    01000664CH    066006C76H    "vl"
     26192    010006650H        00067H    
     26196    010006654H    010003D10H    
     26200    010006658H        00009H    
     26204    01000665CH    062616E45H    "Enab"
     26208    010006660H    06E49656CH    "leIn"
     26212    010006664H    066000074H    "t"
     26216    010006668H        00067H    
     26220    01000666CH    010003D50H    
     26224    010006670H        0000AH    
     26228    010006674H    061736944H    "Disa"
     26232    010006678H    049656C62H    "bleI"
     26236    01000667CH    06600746EH    "nt"
     26240    010006680H        00067H    
     26244    010006684H    010003D64H    
     26248    010006688H        0000BH    
     26252    01000668CH    045746547H    "GetE"
     26256    010006690H    06C62616EH    "nabl"
     26260    010006694H    06E496465H    "edIn"
     26264    010006698H        00074H    "t"
     26268    01000669CH    010003D78H    
     26272    0100066A0H        0000CH    
     26276    0100066A4H    049746547H    "GetI"
     26280    0100066A8H    07453746EH    "ntSt"
     26284    0100066ACH    073757461H    "atus"
     26288    0100066B0H        00000H    
     26292    0100066B4H    010003D88H    
     26296    0100066B8H        0000DH    
     26300    0100066BCH    061656C43H    "Clea"
     26304    0100066C0H    0746E4972H    "rInt"
     26308    0100066C4H    073757400H    
     26312    0100066C8H        00000H    
     26316    0100066CCH    010003D98H    
     26320    0100066D0H        0000EH    
     26324    0100066D4H    0696E692EH    ".ini"
     26328    0100066D8H    0746E0074H    "t"
     26332    0100066DCH    073757400H    
     26336    0100066E0H        00000H    
     26340    0100066E4H    010003DACH    
     26344    0100066E8H        00000H    
     26348    0100066ECH    06D726554H    "Term"
     26352    0100066F0H    06C616E69H    "inal"
     26356    0100066F4H        00073H    "s"
     26360    0100066F8H        00000H    
     26364    0100066FCH    010003DB0H    
     26368    010006700H        00001H    
     26372    010006704H    074696E49H    "Init"
     26376    010006708H    054524155H    "UART"
     26380    01000670CH        00000H    
     26384    010006710H        00000H    
     26388    010006714H    010003DB4H    
     26392    010006718H        00002H    
     26396    01000671CH    06E65704FH    "Open"
     26400    010006720H    054524100H    
     26404    010006724H        00000H    
     26408    010006728H        00000H    
     26412    01000672CH    010003E04H    
     26416    010006730H        00003H    
     26420    010006734H    0736F6C43H    "Clos"
     26424    010006738H    054520065H    "e"
     26428    01000673CH        00000H    
     26432    010006740H        00000H    
     26436    010006744H    010003EF4H    
     26440    010006748H        00004H    
     26444    01000674CH    06E65704FH    "Open"
     26448    010006750H      0727245H    "Err"
     26452    010006754H        00000H    
     26456    010006758H        00000H    
     26460    01000675CH    010003F2CH    
     26464    010006760H        00005H    
     26468    010006764H    0696E692EH    ".ini"
     26472    010006768H      0720074H    "t"
     26476    01000676CH        00000H    
     26480    010006770H        00000H    
     26484    010006774H    010003FE8H    
     26488    010006778H        00000H    
     26492    01000677CH      074754FH    "Out"
     26496    010006780H        00000H    
     26500    010006784H        00000H    
     26504    010006788H        00000H    
     26508    01000678CH    01000401CH    
     26512    010006790H        00001H    
     26516    010006794H    06E65704FH    "Open"
     26520    010006798H        00000H    
     26524    01000679CH        00000H    
     26528    0100067A0H        00000H    
     26532    0100067A4H    010004020H    
     26536    0100067A8H        00002H    
     26540    0100067ACH    072616843H    "Char"
     26544    0100067B0H        00000H    
     26548    0100067B4H        00000H    
     26552    0100067B8H        00000H    
     26556    0100067BCH    01000404CH    
     26560    0100067C0H        00003H    
     26564    0100067C4H    069727453H    "Stri"
     26568    0100067C8H        0676EH    "ng"
     26572    0100067CCH        00000H    
     26576    0100067D0H        00000H    
     26580    0100067D4H    010004080H    
     26584    0100067D8H        00004H    
     26588    0100067DCH    069006E4CH    "Ln"
     26592    0100067E0H        0676EH    
     26596    0100067E4H        00000H    
     26600    0100067E8H        00000H    
     26604    0100067ECH    0100040B4H    
     26608    0100067F0H        00005H    
     26612    0100067F4H      0746E49H    "Int"
     26616    0100067F8H        0676EH    
     26620    0100067FCH        00000H    
     26624    010006800H        00000H    
     26628    010006804H    0100040E4H    
     26632    010006808H        00006H    
     26636    01000680CH      0786548H    "Hex"
     26640    010006810H        0676EH    
     26644    010006814H        00000H    
     26648    010006818H        00000H    
     26652    01000681CH    010004118H    
     26656    010006820H        00007H    
     26660    010006824H      06E6942H    "Bin"
     26664    010006828H        0676EH    
     26668    01000682CH        00000H    
     26672    010006830H        00000H    
     26676    010006834H    01000414CH    
     26680    010006838H        00008H    
     26684    01000683CH    073756C46H    "Flus"
     26688    010006840H        00068H    "h"
     26692    010006844H        00000H    
     26696    010006848H        00000H    
     26700    01000684CH    010004180H    
     26704    010006850H        00009H    
     26708    010006854H    0696E692EH    ".ini"
     26712    010006858H        00074H    "t"
     26716    01000685CH        00000H    
     26720    010006860H        00000H    
     26724    010006864H    0100041B0H    
     26728    010006868H        00000H    
     26732    01000686CH        06E49H    
     26736    010006870H        00000H    
     26740    010006874H        00000H    
     26744    010006878H        00000H    
     26748    01000687CH    0100041C4H    
     26752    010006880H        00001H    
     26756    010006884H    06E65704FH    "Open"
     26760    010006888H        00000H    
     26764    01000688CH        00000H    
     26768    010006890H        00000H    
     26772    010006894H    0100041C8H    
     26776    010006898H        00002H    
     26780    01000689CH    069727453H    "Stri"
     26784    0100068A0H        0676EH    "ng"
     26788    0100068A4H        00000H    
     26792    0100068A8H        00000H    
     26796    0100068ACH    0100041F4H    
     26800    0100068B0H        00003H    
     26804    0100068B4H      0746E49H    "Int"
     26808    0100068B8H        0676EH    
     26812    0100068BCH        00000H    
     26816    0100068C0H        00000H    
     26820    0100068C4H    01000422CH    
     26824    0100068C8H        00004H    
     26828    0100068CCH    0696E692EH    ".ini"
     26832    0100068D0H        00074H    "t"
     26836    0100068D4H        00000H    
     26840    0100068D8H        00000H    
     26844    0100068DCH    010004260H    
     26848    0100068E0H        00000H    
     26852    0100068E4H    054524155H    "UART"
     26856    0100068E8H      0727473H    "str"
     26860    0100068ECH        00000H    
     26864    0100068F0H        00000H    
     26868    0100068F4H    010004274H    
     26872    0100068F8H        00001H    
     26876    0100068FCH    043747550H    "PutC"
     26880    010006900H      0726168H    "har"
     26884    010006904H        00000H    
     26888    010006908H        00000H    
     26892    01000690CH    010004278H    
     26896    010006910H        00002H    
     26900    010006914H    053747550H    "PutS"
     26904    010006918H    06E697274H    "trin"
     26908    01000691CH        00067H    "g"
     26912    010006920H        00000H    
     26916    010006924H    0100042B0H    
     26920    010006928H        00003H    
     26924    01000692CH    043746547H    "GetC"
     26928    010006930H      0726168H    "har"
     26932    010006934H        00067H    
     26936    010006938H        00000H    
     26940    01000693CH    010004324H    
     26944    010006940H        00004H    
     26948    010006944H    053746547H    "GetS"
     26952    010006948H    06E697274H    "trin"
     26956    01000694CH        00067H    "g"
     26960    010006950H        00000H    
     26964    010006954H    01000435CH    
     26968    010006958H        00005H    
     26972    01000695CH    069766544H    "Devi"
     26976    010006960H    074536563H    "ceSt"
     26980    010006964H    073757461H    "atus"
     26984    010006968H        00000H    
     26988    01000696CH    010004434H    
     26992    010006970H        00006H    
     26996    010006974H    0696E692EH    ".ini"
     27000    010006978H    074530074H    "t"
     27004    01000697CH    073757461H    "atus"
     27008    010006980H        00000H    
     27012    010006984H    010004464H    
     27016    010006988H        00000H    
     27020    01000698CH    06E69614DH    "Main"
     27024    010006990H        00000H    
     27028    010006994H        00000H    
     27032    010006998H        00000H    
     27036    01000699CH    010004468H    
     27040    0100069A0H        00001H    
     27044    0100069A4H    0666E6F63H    "conf"
     27048    0100069A8H    069506769H    "igPi"
     27052    0100069ACH    07200736EH    "ns"
     27056    0100069B0H      0754F73H    "sOu"
     27060    0100069B4H    01000446CH    
     27064    0100069B8H        00002H    
     27068    0100069BCH    074696E69H    "init"
     27072    0100069C0H    069506700H    
     27076    0100069C4H    07200736EH    "ns"
     27080    0100069C8H      0754F73H    "sOu"
     27084    0100069CCH    01000448CH    
     27088    0100069D0H        00003H    
     27092    0100069D4H    0696E692EH    ".ini"
     27096    0100069D8H    069500074H    "t"
     27100    0100069DCH    07200736EH    "ns"
     27104    0100069E0H      0754F73H    "sOu"
     27108    0100069E4H    01000458CH    
     27112    0100069E8H        00000H    
     27116    0100069ECH    06F726F43H    "Coro"
     27120    0100069F0H    06E697475H    "utin"
     27124    0100069F4H        07365H    "es"
     27128    0100069F8H        00000H    
     27132    0100069FCH    010004598H    
     27136    010006A00H        00001H    
     27140    010006A04H    065736552H    "Rese"
     27144    010006A08H        00074H    "t"
     27148    010006A0CH        00000H    
     27152    010006A10H        00000H    
     27156    010006A14H    0100045B0H    
     27160    010006A18H        00002H    
     27164    010006A1CH    06F6C6C41H    "Allo"
     27168    010006A20H    065746163H    "cate"
     27172    010006A24H        00000H    
     27176    010006A28H        00000H    
     27180    010006A2CH    01000461CH    
     27184    010006A30H        00003H    
     27188    010006A34H    074696E49H    "Init"
     27192    010006A38H    065746100H    
     27196    010006A3CH        00000H    
     27200    010006A40H        00000H    
     27204    010006A44H    01000463CH    
     27208    010006A48H        00004H    
     27212    010006A4CH    06E617254H    "Tran"
     27216    010006A50H    072656673H    "sfer"
     27220    010006A54H        00000H    
     27224    010006A58H        00000H    
     27228    010006A5CH    010004660H    
     27232    010006A60H        00005H    
     27236    010006A64H    0696E692EH    ".ini"
     27240    010006A68H    072650074H    "t"
     27244    010006A6CH        00000H    
     27248    010006A70H        00000H    
     27252    010006A74H    010004674H    
     27256    010006A78H        00000H    
     27260    010006A7CH    054737953H    "SysT"
     27264    010006A80H      06B6369H    "ick"
     27268    010006A84H        00000H    
     27272    010006A88H        00000H    
     27276    010006A8CH    010004678H    
     27280    010006A90H        00001H    
     27284    010006A94H    06B636954H    "Tick"
     27288    010006A98H        00000H    
     27292    010006A9CH        00000H    
     27296    010006AA0H        00000H    
     27300    010006AA4H    01000467CH    
     27304    010006AA8H        00002H    
     27308    010006AACH    062616E45H    "Enab"
     27312    010006AB0H        0656CH    "le"
     27316    010006AB4H        00000H    
     27320    010006AB8H        00000H    
     27324    010006ABCH    010004694H    
     27328    010006AC0H        00003H    
     27332    010006AC4H    074696E49H    "Init"
     27336    010006AC8H        06500H    
     27340    010006ACCH        00000H    
     27344    010006AD0H        00000H    
     27348    010006AD4H    0100046A4H    
     27352    010006AD8H        00004H    
     27356    010006ADCH    0696E692EH    ".ini"
     27360    010006AE0H        00074H    "t"
     27364    010006AE4H        00000H    
     27368    010006AE8H        00000H    
     27372    010006AECH    0100046CCH    
     27376    010006AF0H        00000H    
     27380    010006AF4H    06E72654BH    "Kern"
     27384    010006AF8H        06C65H    "el"
     27388    010006AFCH        00000H    
     27392    010006B00H        00000H    
     27396    010006B04H    0100046D0H    
     27400    010006B08H        00001H    
     27404    010006B0CH    0746F6C73H    "slot"
     27408    010006B10H        06E49H    "In"
     27412    010006B14H        07365H    
     27416    010006B18H        00000H    
     27420    010006B1CH    0100046FCH    
     27424    010006B20H        00002H    
     27428    010006B24H    06F6C6C41H    "Allo"
     27432    010006B28H    065746163H    "cate"
     27436    010006B2CH        07300H    
     27440    010006B30H        00000H    
     27444    010006B34H    01000477CH    
     27448    010006B38H        00003H    
     27452    010006B3CH    06C616552H    "Real"
     27456    010006B40H    061636F6CH    "loca"
     27460    010006B44H        06574H    "te"
     27464    010006B48H        00000H    
     27468    010006B4CH    010004850H    
     27472    010006B50H        00004H    
     27476    010006B54H    062616E45H    "Enab"
     27480    010006B58H    06100656CH    "le"
     27484    010006B5CH        06574H    
     27488    010006B60H        00000H    
     27492    010006B64H    010004894H    
     27496    010006B68H        00005H    
     27500    010006B6CH    050746553H    "SetP"
     27504    010006B70H      06F6972H    "rio"
     27508    010006B74H        06574H    
     27512    010006B78H        00000H    
     27516    010006B7CH    0100048ACH    
     27520    010006B80H        00006H    
     27524    010006B84H    050746553H    "SetP"
     27528    010006B88H    06F697265H    "erio"
     27532    010006B8CH        00064H    "d"
     27536    010006B90H        00000H    
     27540    010006B94H    0100048B8H    
     27544    010006B98H        00007H    
     27548    010006B9CH    07478654EH    "Next"
     27552    010006BA0H    06F697200H    
     27556    010006BA4H        00064H    
     27560    010006BA8H        00000H    
     27564    010006BACH    0100048CCH    
     27568    010006BB0H        00008H    
     27572    010006BB4H    07478654EH    "Next"
     27576    010006BB8H    075657551H    "Queu"
     27580    010006BBCH        06465H    "ed"
     27584    010006BC0H        00000H    
     27588    010006BC4H    010004908H    
     27592    010006BC8H        00009H    
     27596    010006BCCH    070737553H    "Susp"
     27600    010006BD0H    04D646E65H    "endM"
     27604    010006BD4H        00065H    "e"
     27608    010006BD8H        00000H    
     27612    010006BDCH    010004934H    
     27616    010006BE0H        0000AH    
     27620    010006BE4H    0616C6544H    "Dela"
     27624    010006BE8H      0654D79H    "yMe"
     27628    010006BECH        00065H    
     27632    010006BF0H        00000H    
     27636    010006BF4H    010004978H    
     27640    010006BF8H        0000BH    
     27644    010006BFCH    072617453H    "Star"
     27648    010006C00H    06D695474H    "tTim"
     27652    010006C04H    074756F65H    "eout"
     27656    010006C08H        00000H    
     27660    010006C0CH    0100049BCH    
     27664    010006C10H        0000CH    
     27668    010006C14H    0636E6143H    "Canc"
     27672    010006C18H    069546C65H    "elTi"
     27676    010006C1CH    0756F656DH    "meou"
     27680    010006C20H        00074H    "t"
     27684    010006C24H    0100049ECH    
     27688    010006C28H        0000DH    
     27692    010006C2CH    069617741H    "Awai"
     27696    010006C30H    076654474H    "tDev"
     27700    010006C34H    046656369H    "iceF"
     27704    010006C38H      067616CH    "lag"
     27708    010006C3CH    0100049FCH    
     27712    010006C40H        0000EH    
     27716    010006C44H    0636E6143H    "Canc"
     27720    010006C48H    077416C65H    "elAw"
     27724    010006C4CH    044746961H    "aitD"
     27728    010006C50H      0697665H    "evi"
     27732    010006C54H    010004A50H    
     27736    010006C58H        0000FH    
     27740    010006C5CH    067697254H    "Trig"
     27744    010006C60H      0726567H    "ger"
     27748    010006C64H    044746961H    "aitD"
     27752    010006C68H      0697665H    "evi"
     27756    010006C6CH    010004A84H    
     27760    010006C70H        00010H    
     27764    010006C74H    06E616843H    "Chan"
     27768    010006C78H    072506567H    "gePr"
     27772    010006C7CH    044006F69H    "io"
     27776    010006C80H      0697665H    "evi"
     27780    010006C84H    010004AB0H    
     27784    010006C88H        00011H    
     27788    010006C8CH    06E616843H    "Chan"
     27792    010006C90H    065506567H    "gePe"
     27796    010006C94H    0646F6972H    "riod"
     27800    010006C98H      0697600H    
     27804    010006C9CH    010004AE0H    
     27808    010006CA0H        00012H    
     27812    010006CA4H    06E007443H    "Ct"
     27816    010006CA8H    065506567H    "gePe"
     27820    010006CACH    0646F6972H    "riod"
     27824    010006CB0H      0697600H    
     27828    010006CB4H    010004B1CH    
     27832    010006CB8H        00013H    
     27836    010006CBCH      0646954H    "Tid"
     27840    010006CC0H    065506567H    "gePe"
     27844    010006CC4H    0646F6972H    "riod"
     27848    010006CC8H      0697600H    
     27852    010006CCCH    010004B48H    
     27856    010006CD0H        00014H    
     27860    010006CD4H    06F697250H    "Prio"
     27864    010006CD8H    065506500H    
     27868    010006CDCH    0646F6972H    "riod"
     27872    010006CE0H      0697600H    
     27876    010006CE4H    010004B74H    
     27880    010006CE8H        00015H    
     27884    010006CECH    0706F6F6CH    "loop"
     27888    010006CF0H    065500063H    "c"
     27892    010006CF4H    0646F6972H    "riod"
     27896    010006CF8H      0697600H    
     27900    010006CFCH    010004B80H    
     27904    010006D00H        00016H    
     27908    010006D04H      06E7552H    "Run"
     27912    010006D08H    065500063H    "c"
     27916    010006D0CH    0646F6972H    "riod"
     27920    010006D10H      0697600H    
     27924    010006D14H    010004D88H    
     27928    010006D18H        00017H    
     27932    010006D1CH    074736E49H    "Inst"
     27936    010006D20H      06C6C61H    "all"
     27940    010006D24H    0646F6972H    "riod"
     27944    010006D28H      0697600H    
     27948    010006D2CH    010004DECH    
     27952    010006D30H        00018H    
     27956    010006D34H    0696E692EH    ".ini"
     27960    010006D38H      06C0074H    "t"
     27964    010006D3CH    0646F6972H    "riod"
     27968    010006D40H      0697600H    
     27972    010006D44H    010004FB4H    
     27976    010006D48H        00000H    
     27980    010006D4CH    06544454CH    "LEDe"
     27984    010006D50H        07478H    "xt"
     27988    010006D54H        00000H    
     27992    010006D58H        00000H    
     27996    010006D5CH    010004FE4H    
     28000    010006D60H        00001H    
     28004    010006D64H    04C746553H    "SetL"
     28008    010006D68H    069426465H    "edBi"
     28012    010006D6CH        07374H    "ts"
     28016    010006D70H        00000H    
     28020    010006D74H    010004FE8H    
     28024    010006D78H        00002H    
     28028    010006D7CH    056746553H    "SetV"
     28032    010006D80H    065756C61H    "alue"
     28036    010006D84H        07300H    
     28040    010006D88H        00000H    
     28044    010006D8CH    010005088H    
     28048    010006D90H        00003H    
     28052    010006D94H    074696E69H    "init"
     28056    010006D98H    065756C00H    
     28060    010006D9CH        07300H    
     28064    010006DA0H        00000H    
     28068    010006DA4H    01000509CH    
     28072    010006DA8H        00004H    
     28076    010006DACH    0696E692EH    ".ini"
     28080    010006DB0H    065750074H    "t"
     28084    010006DB4H        07300H    
     28088    010006DB8H        00000H    
     28092    010006DBCH    010005144H    
     28096    010006DC0H        00000H    
     28100    010006DC4H    065637845H    "Exce"
     28104    010006DC8H    06F697470H    "ptio"
     28108    010006DCCH        0736EH    "ns"
     28112    010006DD0H        00000H    
     28116    010006DD4H    010005150H    
     28120    010006DD8H        00001H    
     28124    010006DDCH    062616E45H    "Enab"
     28128    010006DE0H    06E49656CH    "leIn"
     28132    010006DE4H        00074H    "t"
     28136    010006DE8H        00000H    
     28140    010006DECH    010005154H    
     28144    010006DF0H        00002H    
     28148    010006DF4H    045746547H    "GetE"
     28152    010006DF8H    06C62616EH    "nabl"
     28156    010006DFCH    06E496465H    "edIn"
     28160    010006E00H        00074H    "t"
     28164    010006E04H    010005164H    
     28168    010006E08H        00003H    
     28172    010006E0CH    061736944H    "Disa"
     28176    010006E10H    049656C62H    "bleI"
     28180    010006E14H    06E00746EH    "nt"
     28184    010006E18H        00074H    
     28188    010006E1CH    010005178H    
     28192    010006E20H        00004H    
     28196    010006E24H    050746553H    "SetP"
     28200    010006E28H    069646E65H    "endi"
     28204    010006E2CH    06E49676EH    "ngIn"
     28208    010006E30H        00074H    "t"
     28212    010006E34H    010005188H    
     28216    010006E38H        00005H    
     28220    010006E3CH    050746547H    "GetP"
     28224    010006E40H    069646E65H    "endi"
     28228    010006E44H    06E49676EH    "ngIn"
     28232    010006E48H        00074H    "t"
     28236    010006E4CH    010005198H    
     28240    010006E50H        00006H    
     28244    010006E54H    061656C43H    "Clea"
     28248    010006E58H    06E655072H    "rPen"
     28252    010006E5CH    0676E6964H    "ding"
     28256    010006E60H      0746E49H    "Int"
     28260    010006E64H    0100051ACH    
     28264    010006E68H        00007H    
     28268    010006E6CH    049746553H    "SetI"
     28272    010006E70H    07250746EH    "ntPr"
     28276    010006E74H    067006F69H    "io"
     28280    010006E78H      0746E49H    "Int"
     28284    010006E7CH    0100051BCH    
     28288    010006E80H        00008H    
     28292    010006E84H    049746547H    "GetI"
     28296    010006E88H    07250746EH    "ntPr"
     28300    010006E8CH    067006F69H    "io"
     28304    010006E90H      0746E49H    "Int"
     28308    010006E94H    0100051F4H    
     28312    010006E98H        00009H    
     28316    010006E9CH    074736E49H    "Inst"
     28320    010006EA0H    0496C6C61H    "allI"
     28324    010006EA4H    06148746EH    "ntHa"
     28328    010006EA8H      06C646EH    "ndl"
     28332    010006EACH    010005214H    
     28336    010006EB0H        0000AH    
     28340    010006EB4H    053746553H    "SetS"
     28344    010006EB8H    078457379H    "ysEx"
     28348    010006EBCH    069725063H    "cPri"
     28352    010006EC0H      06C006FH    "o"
     28356    010006EC4H    010005240H    
     28360    010006EC8H        0000BH    
     28364    010006ECCH    053746547H    "GetS"
     28368    010006ED0H    078457379H    "ysEx"
     28372    010006ED4H    069725063H    "cPri"
     28376    010006ED8H      06C006FH    "o"
     28380    010006EDCH    01000528CH    
     28384    010006EE0H        0000CH    
     28388    010006EE4H    074736E49H    "Inst"
     28392    010006EE8H    0456C6C61H    "allE"
     28396    010006EECH    061486378H    "xcHa"
     28400    010006EF0H      06C646EH    "ndl"
     28404    010006EF4H    0100052C0H    
     28408    010006EF8H        0000DH    
     28412    010006EFCH    04E746553H    "SetN"
     28416    010006F00H    04500494DH    "MI"
     28420    010006F04H    061486378H    "xcHa"
     28424    010006F08H      06C646EH    "ndl"
     28428    010006F0CH    0100052E8H    
     28432    010006F10H        0000EH    
     28436    010006F14H    0696E692EH    ".ini"
     28440    010006F18H    045000074H    "t"
     28444    010006F1CH    061486378H    "xcHa"
     28448    010006F20H      06C646EH    "ndl"
     28452    010006F24H    01000533CH    
     28456    010006F28H        00000H    
     28460    010006F2CH    0656D6954H    "Time"
     28464    010006F30H        07372H    "rs"
     28468    010006F34H        00000H    
     28472    010006F38H        00000H    
     28476    010006F3CH    010005340H    
     28480    010006F40H        00001H    
     28484    010006F44H    054746547H    "GetT"
     28488    010006F48H      0656D69H    "ime"
     28492    010006F4CH        0736EH    
     28496    010006F50H        00000H    
     28500    010006F54H    010005344H    
     28504    010006F58H        00002H    
     28508    010006F5CH    054746547H    "GetT"
     28512    010006F60H    04C656D69H    "imeL"
     28516    010006F64H        07300H    
     28520    010006F68H        00000H    
     28524    010006F6CH    010005394H    
     28528    010006F70H        00003H    
     28532    010006F74H    074736E49H    "Inst"
     28536    010006F78H    0416C6C61H    "allA"
     28540    010006F7CH    06D72616CH    "larm"
     28544    010006F80H      0746E49H    "Int"
     28548    010006F84H    0100053A8H    
     28552    010006F88H        00004H    
     28556    010006F8CH    041746553H    "SetA"
     28560    010006F90H    06D72616CH    "larm"
     28564    010006F94H    050746E49H    "IntP"
     28568    010006F98H      06F6972H    "rio"
     28572    010006F9CH    0100053BCH    
     28576    010006FA0H        00005H    
     28580    010006FA4H    062616E45H    "Enab"
     28584    010006FA8H    06C41656CH    "leAl"
     28588    010006FACH    0496D7261H    "armI"
     28592    010006FB0H        0746EH    "nt"
     28596    010006FB4H    0100053D0H    
     28600    010006FB8H        00006H    
     28604    010006FBCH    073616544H    "Deas"
     28608    010006FC0H    074726573H    "sert"
     28612    010006FC4H    072616C41H    "Alar"
     28616    010006FC8H      06E496DH    "mIn"
     28620    010006FCCH    0100053E8H    
     28624    010006FD0H        00007H    
     28628    010006FD4H    054746553H    "SetT"
     28632    010006FD8H      0656D69H    "ime"
     28636    010006FDCH    072616C41H    "Alar"
     28640    010006FE0H      06E496DH    "mIn"
     28644    010006FE4H    010005400H    
     28648    010006FE8H        00008H    
     28652    010006FECH    0696E692EH    ".ini"
     28656    010006FF0H      0650074H    "t"
     28660    010006FF4H    072616C41H    "Alar"
     28664    010006FF8H      06E496DH    "mIn"
     28668    010006FFCH    01000541CH    
     28672    010007000H        00000H    
     28676    010007004H    075626544H    "Debu"
     28680    010007008H    061764567H    "gEva"
     28684    01000700CH    0706D496CH    "lImp"
     28688    010007010H        00000H    
     28692    010007014H    010005420H    
     28696    010007018H        00001H    
     28700    01000701CH    0696E692EH    ".ini"
     28704    010007020H        00074H    "t"
     28708    010007024H        00000H    
     28712    010007028H        00000H    
     28716    01000702CH    010005438H    
     28720    010007030H        00000H    
     28724    010007034H    075626544H    "Debu"
     28728    010007038H    061764567H    "gEva"
     28732    01000703CH        0006CH    "l"
     28736    010007040H        00000H    
     28740    010007044H    010005448H    
     28744    010007048H        00001H    
     28748    01000704CH    074697277H    "writ"
     28752    010007050H    072685465H    "eThr"
     28756    010007054H    049646165H    "eadI"
     28760    010007058H      06F666EH    "nfo"
     28764    01000705CH    010005488H    
     28768    010007060H        00002H    
     28772    010007064H    074736574H    "test"
     28776    010007068H    065707954H    "Type"
     28780    01000706CH    049646100H    
     28784    010007070H      06F666EH    "nfo"
     28788    010007074H    0100054D0H    
     28792    010007078H        00003H    
     28796    01000707CH      0633074H    "t0c"
     28800    010007080H    065707954H    "Type"
     28804    010007084H    049646100H    
     28808    010007088H      06F666EH    "nfo"
     28812    01000708CH    0100054ECH    
     28816    010007090H        00004H    
     28820    010007094H      0633174H    "t1c"
     28824    010007098H    065707954H    "Type"
     28828    01000709CH    049646100H    
     28832    0100070A0H      06F666EH    "nfo"
     28836    0100070A4H    010005568H    
     28840    0100070A8H        00005H    
     28844    0100070ACH      06E7572H    "run"
     28848    0100070B0H    065707954H    "Type"
     28852    0100070B4H    049646100H    
     28856    0100070B8H      06F666EH    "nfo"
     28860    0100070BCH    0100055D8H    
     28864    0100070C0H        00006H    
     28868    0100070C4H    0696E692EH    ".ini"
     28872    0100070C8H    065700074H    "t"
     28876    0100070CCH    049646100H    
     28880    0100070D0H      06F666EH    "nfo"
     28884    0100070D4H    010005688H    