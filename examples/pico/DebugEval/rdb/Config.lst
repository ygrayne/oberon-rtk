.     0  <Pad: 0>
MODULE Config;
(**
  Oberon RTK Framework
  Configurations and options
  Extending LinkOptions for two cores
  --
  MCU: Cortex-M0+ RP2040, tested on Pico
  --
  Copyright (c) 2023-2024 Gray, gray@grayraven.org
  https://oberon-rtk.org/licences/
  --
  Settings for Astrobe:
  * Data Range: 020000000H, 020030000H
  * Code Range: 010000100H, 010200000H
  * Heap Start: 020000200H
  * Heap Limit: 000000000H
  These values are collected from LinkOptions.
  --
  Memory map SRAM:
  +---------------------------+
  |    core 1 stack           | 020040000H - 04H = CoreOneStackStart
  |                           |
 ~~~                         ~~~
  |                           |
  |    core 1 heap            | 020030200H = CoreOneHeapStart
  +---------------------------+
  |                           |
  |    core 1 vector table    | 020030000H = CoreOneDataStart = LinkOptions.DataEnd
  +---------------------------+
  |    module data (shared)   | shared as per MODULE separation/encapsulation
  |                           |
  +---------------------------+
  |    core 0 stack           | LinkOptions.StackStart
  |                           |
  |                           |
 ~~~                         ~~~
  |                           |
  |                           |
  |    core 0 heap            | 020000200H = LinkOptions.HeapStart
  +---------------------------+
  |                           |
  |    core 0 vector table    | 020000000H = LinkOptions.DataStart
  +---------------------------+

  Memory map FLASH:
                                010200000H = LinkOptions.CodeEnd
  +---------------------------+
  |                           |
  |                           |
 ~~~   code (shared)         ~~~
  |                           |
  |                           | 010000100H = LinkOptions.CodeStart
  +---------------------------+
  |    boot code phase 2      | 010000000H
  +---------------------------+
**)

  IMPORT LinkOptions, MCU := MCU2; (* LinkOptions must be first in list *)

  CONST
    MaxNumThreads* = 16;
    MaxNumProcs* = MaxNumThreads; (* legacy support *)
    NumCores* = MCU.NumCores;

    (* in and out buffer for messaging across cores *)
    MessagesMaxNumSndRcv* = 4;
    MessagesBufferSize* = 4;

    (* core one base storage parameters *)
    CoreOneDataStart* = 020030000H;
    CoreOneStackStart* = 020040000H - 04H; (* use same semantics as Astrobe *)
    CoreOneHeapStart*  = 020030200H;
    CoreOneHeapLimit* = 0;

    CoreZeroMainStackSize* = 1024;
    CoreOneMainStackSize* = 1024;

    CoreZeroRamExtStart* = 020040000H;
    CoreZeroRamExtEnd* = CoreZeroRamExtStart + 01000H;
    CoreOneRamExtStart* = 020041000H;
    CoreOneRamExtEnd* = CoreOneRamExtStart + 01000H;

  VAR
    CoreZeroDataStart*: INTEGER;
    CoreZeroStackStart*: INTEGER;
    CoreZeroHeapStart*: INTEGER;
    CoreZeroHeapLimit*: INTEGER;

    CodeStart*: INTEGER;
    CodeEnd*: INTEGER;

  PROCEDURE init;
  BEGIN
.     4     04H  0B500H          push     { lr }
    CoreZeroDataStart := LinkOptions.DataStart;
.     6     06H  0480CH          ldr      r0,[pc,#48] -> 56
.     8     08H  06800H          ldr      r0,[r0]
.    10     0AH  04911H          ldr      r1,[pc,#68] -> 80
.    12     0CH  06008H          str      r0,[r1]
    CoreZeroStackStart := LinkOptions.StackStart;
.    14     0EH  0480BH          ldr      r0,[pc,#44] -> 60
.    16    010H  06800H          ldr      r0,[r0]
.    18    012H  04910H          ldr      r1,[pc,#64] -> 84
.    20    014H  06008H          str      r0,[r1]
    CoreZeroHeapStart := LinkOptions.HeapStart;
.    22    016H  0480AH          ldr      r0,[pc,#40] -> 64
.    24    018H  06800H          ldr      r0,[r0]
.    26    01AH  0490FH          ldr      r1,[pc,#60] -> 88
.    28    01CH  06008H          str      r0,[r1]
    CoreZeroHeapLimit := LinkOptions.HeapLimit;
.    30    01EH  04809H          ldr      r0,[pc,#36] -> 68
.    32    020H  06800H          ldr      r0,[r0]
.    34    022H  0490EH          ldr      r1,[pc,#56] -> 92
.    36    024H  06008H          str      r0,[r1]
    CodeStart := LinkOptions.CodeStart;
.    38    026H  04808H          ldr      r0,[pc,#32] -> 72
.    40    028H  06800H          ldr      r0,[r0]
.    42    02AH  0490DH          ldr      r1,[pc,#52] -> 96
.    44    02CH  06008H          str      r0,[r1]
    CodeEnd := LinkOptions.CodeEnd
  END init;
.    46    02EH  04807H          ldr      r0,[pc,#28] -> 76
.    48    030H  06800H          ldr      r0,[r0]
.    50    032H  0490CH          ldr      r1,[pc,#48] -> 100
.    52    034H  06008H          str      r0,[r1]
.    54    036H  0BD00H          pop      { pc }
.    56  <Global: 000060000H  060000H>
.    60  <Global: 00004001CH  04001CH>
.    64  <Global: 00002001EH  02001EH>
.    68  <Global: 000030020H  030020H>
.    72  <Global: 000080022H  080022H>
.    76  <Global: 000090024H  090024H>
.    80  <Global: 000040000H  040000H>
.    84  <Global: 000080028H  080028H>
.    88  <Global: 0000C002AH  0C002AH>
.    92  <Global: 00010002CH  010002CH>
.    96  <Global: 00014002EH  014002EH>
.   100  <Global: 000180030H  0180030H>

BEGIN
.   104    068H  0B500H          push     { lr }
  init
END Config.
.   106    06AH  0F7FFFFCBH      bl.w     -106 -> 4
.   110    06EH  0E000H          b        0 -> 114
.   112  <LineNo: 103>
.   114    072H  0BD00H          pop      { pc }
