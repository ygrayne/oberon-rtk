.     0  010004984H              <Pad: 0>
MODULE TestExc1;
(**
  Oberon RTK Framework v2
  --
  Example/test program
  https://oberon-rtk.org/examples/v2/stacktrace
  --
  MCU: RP2040, RP2350
  Board: Pico, Pico 2
  --
  Copyright (c) 2024 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT SYSTEM, MCU := MCU2, Main, Out, Exceptions;

  CONST
    IntNo0 = MCU.PPB_SPAREIRQ_IRQ0;
    IntNo1 = MCU.PPB_SPAREIRQ_IRQ1;

    TestCase = 1;

  PROCEDURE fault;
  (* trigger MCU fault *)
    VAR x: INTEGER;
  BEGIN
.     4  010004988H      0B500H  push    { lr }
.     6  01000498AH      0B081H  sub     sp,#4
    x := MCU.PPB_NVIC_ISER0 + 1;
.     8  01000498CH  0F8DF000CH  ldr.w   r0,[pc,#12] -> 24
.    12  010004990H      09000H  str     r0,[sp]
    SYSTEM.PUT(x, x)
  END fault;
.    14  010004992H      09800H  ldr     r0,[sp]
.    16  010004994H      09900H  ldr     r1,[sp]
.    18  010004996H      06001H  str     r1,[r0]
.    20  010004998H      0B001H  add     sp,#4
.    22  01000499AH      0BD00H  pop     { pc }
.    24  01000499CH  0E000E101H  <Const:  -536813311>

  PROCEDURE error;
  (* trigger runtime error *)
    VAR x: INTEGER;
  BEGIN
.    28  0100049A0H      0B500H  push    { lr }
.    30  0100049A2H      0B081H  sub     sp,#4
    x := 0; x := x DIV x
.    32  0100049A4H      02000H  movs    r0,#0
.    34  0100049A6H      09000H  str     r0,[sp]
  END error;
.    36  0100049A8H      09800H  ldr     r0,[sp]
.    38  0100049AAH      09900H  ldr     r1,[sp]
.    40  0100049ACH  0F1B10F00H  cmp.w   r1,#0
.    44  0100049B0H      0DC01H  bgt.n   2 -> 50
.    46  0100049B2H      0DF07H  svc     7
.    48  0100049B4H      00023H  <LineNo: 35>
.    50  0100049B6H  0FB90F2F1H  sdiv.w  r2,r0,r1
.    54  0100049BAH  0FB020011H  mls.w   r0,r2,r1,r0
.    58  0100049BEH  0EBA270D0H  sub.w   r0,r2,r0,lsr 31
.    62  0100049C2H      09000H  str     r0,[sp]
.    64  0100049C4H      0B001H  add     sp,#4
.    66  0100049C6H      0BD00H  pop     { pc }

  PROCEDURE i2;
  BEGIN
.    68  0100049C8H      0B500H  push    { lr }
    IF TestCase = 1 THEN
.    70  0100049CAH      02001H  movs    r0,#1
.    72  0100049CCH      02801H  cmp     r0,#1
.    74  0100049CEH  0F0408006H  bne.w   12 -> 90
      fault
    ELSIF TestCase = 2 THEN
.    78  0100049D2H  0F7FFFFD9H  bl.w    -78 -> 4
.    82  0100049D6H      0E000H  b       0 -> 86
.    84  0100049D8H      00029H  <LineNo: 41>
.    86  0100049DAH  0F000B808H  b.w     16 -> 106
.    90  0100049DEH      02001H  movs    r0,#1
.    92  0100049E0H      02802H  cmp     r0,#2
.    94  0100049E2H  0F0408004H  bne.w   8 -> 106
      error
    END
.    98  0100049E6H  0F7FFFFDBH  bl.w    -74 -> 28
.   102  0100049EAH      0E000H  b       0 -> 106
.   104  0100049ECH      0002BH  <LineNo: 43>
  END i2;
.   106  0100049EEH      0BD00H  pop     { pc }

  PROCEDURE i1;
  BEGIN
.   108  0100049F0H      0B500H  push    { lr }
    i2
  END i1;
.   110  0100049F2H  0F7FFFFE9H  bl.w    -46 -> 68
.   114  0100049F6H      0E000H  b       0 -> 118
.   116  0100049F8H      00031H  <LineNo: 49>
.   118  0100049FAH      0BD00H  pop     { pc }

  PROCEDURE i0[0];
  BEGIN
.   120  0100049FCH  0E92D4FF0H  push.w  { r4, r5, r6, r7, r8, r9, r10, r11, lr }
    i1
  END i0;
.   124  010004A00H  0F7FFFFF6H  bl.w    -20 -> 108
.   128  010004A04H      0E000H  b       0 -> 132
.   130  010004A06H      00036H  <LineNo: 54>
.   132  010004A08H  0E8BD8FF0H  pop.w   { r4, r5, r6, r7, r8, r9, r10, r11, pc }

  PROCEDURE h2a;
  END h2a;
.   136  010004A0CH      0B500H  push    { lr }
.   138  010004A0EH      0BD00H  pop     { pc }

  PROCEDURE h2;
    VAR x: INTEGER;
  BEGIN
.   140  010004A10H      0B500H  push    { lr }
.   142  010004A12H      0B081H  sub     sp,#4
    x := 0;
.   144  010004A14H      02000H  movs    r0,#0
.   146  010004A16H      09000H  str     r0,[sp]
    h2a;
.   148  010004A18H  0F7FFFFF8H  bl.w    -16 -> 136
.   152  010004A1CH      0E000H  b       0 -> 156
.   154  010004A1EH      00040H  <LineNo: 64>
    (* set int pending *)
    SYSTEM.PUT(MCU.PPB_NVIC_ISPR0 + ((IntNo1 DIV 32) * 4), {IntNo1 MOD 32});
.   156  010004A20H  0F8DF0010H  ldr.w   r0,[pc,#16] -> 176
.   160  010004A24H  0F2480100H  movw    r1,#0008000H
.   164  010004A28H      06001H  str     r1,[r0]
    x := 0;
.   166  010004A2AH      02000H  movs    r0,#0
.   168  010004A2CH      09000H  str     r0,[sp]
  END h2;
.   170  010004A2EH      0B001H  add     sp,#4
.   172  010004A30H      0BD00H  pop     { pc }
.   174  010004A32H      0BF00H  nop     
.   176  010004A34H  0E000E204H  <Const:  -536813052>

  PROCEDURE h1;
  (* FPU operation to test correct stack trace on RP2350 *)
    VAR r: REAL;
  BEGIN
.   180  010004A38H      0B500H  push    { lr }
.   182  010004A3AH      0B081H  sub     sp,#4
    r := 1.0;
.   184  010004A3CH  0F04F507EH  mov.w   r0,#03F800000H
.   188  010004A40H      09000H  str     r0,[sp]
    r := r / r;
.   190  010004A42H      09800H  ldr     r0,[sp]
.   192  010004A44H      09900H  ldr     r1,[sp]
.   194  010004A46H  0EE000A10H  vmov    s0,r0
.   198  010004A4AH  0EE001A90H  vmov    s1,r1
.   202  010004A4EH  0EE800A20H  vdiv.f32s0,s0,s1
.   206  010004A52H  0EE100A10H  vmov    r0,s0
.   210  010004A56H      09000H  str     r0,[sp]
    h2
  END h1;
.   212  010004A58H  0F7FFFFDAH  bl.w    -76 -> 140
.   216  010004A5CH      0E000H  b       0 -> 220
.   218  010004A5EH      0004CH  <LineNo: 76>
.   220  010004A60H      0B001H  add     sp,#4
.   222  010004A62H      0BD00H  pop     { pc }

  PROCEDURE h0[0];
  BEGIN
.   224  010004A64H  0E92D4FF0H  push.w  { r4, r5, r6, r7, r8, r9, r10, r11, lr }
    h1
  END h0;
.   228  010004A68H  0F7FFFFE6H  bl.w    -52 -> 180
.   232  010004A6CH      0E000H  b       0 -> 236
.   234  010004A6EH      00051H  <LineNo: 81>
.   236  010004A70H  0E8BD8FF0H  pop.w   { r4, r5, r6, r7, r8, r9, r10, r11, pc }

  PROCEDURE p1a;
  END p1a;
.   240  010004A74H      0B500H  push    { lr }
.   242  010004A76H      0BD00H  pop     { pc }

  PROCEDURE p1b;
  END p1b;
.   244  010004A78H      0B500H  push    { lr }
.   246  010004A7AH      0BD00H  pop     { pc }

  PROCEDURE p1;
    VAR x: INTEGER;
  BEGIN
.   248  010004A7CH      0B500H  push    { lr }
.   250  010004A7EH      0B081H  sub     sp,#4
    x := 0;
.   252  010004A80H      02000H  movs    r0,#0
.   254  010004A82H      09000H  str     r0,[sp]
    p1a;
.   256  010004A84H  0F7FFFFF6H  bl.w    -20 -> 240
.   260  010004A88H      0E000H  b       0 -> 264
.   262  010004A8AH      0005EH  <LineNo: 94>
    (* set int pending *)
    SYSTEM.PUT(MCU.PPB_NVIC_ISPR0 + ((IntNo0 DIV 32) * 4), {IntNo0 MOD 32});
.   264  010004A8CH  0F8DF0014H  ldr.w   r0,[pc,#20] -> 288
.   268  010004A90H  0F2440100H  movw    r1,#16384
.   272  010004A94H      06001H  str     r1,[r0]
    (*x := 0;*)
    p1b
  END p1;
.   274  010004A96H  0F7FFFFEFH  bl.w    -34 -> 244
.   278  010004A9AH      0E000H  b       0 -> 282
.   280  010004A9CH      00062H  <LineNo: 98>
.   282  010004A9EH      0B001H  add     sp,#4
.   284  010004AA0H      0BD00H  pop     { pc }
.   286  010004AA2H      0BF00H  nop     
.   288  010004AA4H  0E000E204H  <Const:  -536813052>

  PROCEDURE p0;
  BEGIN
.   292  010004AA8H      0B500H  push    { lr }
    SYSTEM.LDREG(12, 0A0B0C0DH);
.   294  010004AAAH  0F8DFC00CH  ldr.w   r12,[pc,#12] -> 308
    p1
  END p0;
.   298  010004AAEH  0F7FFFFE5H  bl.w    -54 -> 248
.   302  010004AB2H      0E000H  b       0 -> 306
.   304  010004AB4H      00068H  <LineNo: 104>
.   306  010004AB6H      0BD00H  pop     { pc }
.   308  010004AB8H  00A0B0C0DH  <Const:  168496141>

  PROCEDURE run;
  BEGIN
.   312  010004ABCH      0B500H  push    { lr }
    Out.Ln; Out.String("TestCase = "); Out.Int(TestCase, 0); Out.Ln;
.   314  010004ABEH  0F7FFFB6BH  bl.w    Ext Proc #4
.   318  010004AC2H      0E000H  b       0 -> 322
.   320  010004AC4H      0006DH  <LineNo: 109>
.   322  010004AC6H      0BF00H  nop     
.   324  010004AC8H      0A000H  adr     r0,pc,#0 -> 328
.   326  010004ACAH      0E005H  b       10 -> 340
.   328  010004ACCH  074736554H  <String: "Test">
.   332  010004AD0H  065736143H  <String: "Case">
.   336  010004AD4H  000203D20H  <String: " = .">
.   340  010004AD8H      0210CH  movs    r1,#12
.   342  010004ADAH  0F7FFFB41H  bl.w    Ext Proc #3
.   346  010004ADEH      0E000H  b       0 -> 350
.   348  010004AE0H      0006DH  <LineNo: 109>
.   350  010004AE2H      02001H  movs    r0,#1
.   352  010004AE4H      02100H  movs    r1,#0
.   354  010004AE6H  0F7FFFB71H  bl.w    Ext Proc #5
.   358  010004AEAH      0E000H  b       0 -> 362
.   360  010004AECH      0006DH  <LineNo: 109>
.   362  010004AEEH  0F7FFFB53H  bl.w    Ext Proc #4
.   366  010004AF2H      0E000H  b       0 -> 370
.   368  010004AF4H      0006DH  <LineNo: 109>
    Exceptions.InstallIntHandler(IntNo0, h0);
.   370  010004AF6H      0202EH  movs    r0,#46
.   372  010004AF8H  0F2AF0198H  adr.w   r1,pc,#-152 -> 224
.   376  010004AFCH  0F7FFFEDEH  bl.w    Ext Proc #10
.   380  010004B00H      0E000H  b       0 -> 384
.   382  010004B02H      0006EH  <LineNo: 110>
    Exceptions.SetIntPrio(IntNo0, MCU.PPB_ExcPrio4);
.   384  010004B04H      0202EH  movs    r0,#46
.   386  010004B06H      02180H  movs    r1,#128
.   388  010004B08H  0F7FFFEA2H  bl.w    Ext Proc #8
.   392  010004B0CH      0E000H  b       0 -> 396
.   394  010004B0EH      0006FH  <LineNo: 111>
    Exceptions.EnableInt(IntNo0);
.   396  010004B10H      0202EH  movs    r0,#46
.   398  010004B12H  0F7FFFE51H  bl.w    Ext Proc #2
.   402  010004B16H      0E000H  b       0 -> 406
.   404  010004B18H      00070H  <LineNo: 112>
    Exceptions.InstallIntHandler(IntNo1, i0);
.   406  010004B1AH      0202FH  movs    r0,#47
.   408  010004B1CH  0F2AF1124H  adr.w   r1,pc,#-292 -> 120
.   412  010004B20H  0F7FFFECCH  bl.w    Ext Proc #10
.   416  010004B24H      0E000H  b       0 -> 420
.   418  010004B26H      00071H  <LineNo: 113>
    Exceptions.SetIntPrio(IntNo1, MCU.PPB_ExcPrio2);
.   420  010004B28H      0202FH  movs    r0,#47
.   422  010004B2AH      02140H  movs    r1,#64
.   424  010004B2CH  0F7FFFE90H  bl.w    Ext Proc #8
.   428  010004B30H      0E000H  b       0 -> 432
.   430  010004B32H      00072H  <LineNo: 114>
    Exceptions.EnableInt(IntNo1);
.   432  010004B34H      0202FH  movs    r0,#47
.   434  010004B36H  0F7FFFE3FH  bl.w    Ext Proc #2
.   438  010004B3AH      0E000H  b       0 -> 442
.   440  010004B3CH      00073H  <LineNo: 115>
    p0
  END run;
.   442  010004B3EH  0F7FFFFB3H  bl.w    -154 -> 292
.   446  010004B42H      0E000H  b       0 -> 450
.   448  010004B44H      00074H  <LineNo: 116>
.   450  010004B46H      0BD00H  pop     { pc }

BEGIN
.   452  010004B48H      0B500H  push    { lr }
  run
END TestExc1.
.   454  010004B4AH  0F7FFFFB7H  bl.w    -146 -> 312
.   458  010004B4EH      0E000H  b       0 -> 462
.   460  010004B50H      00078H  <LineNo: 120>
.   462  010004B52H      0BD00H  pop     { pc }
 