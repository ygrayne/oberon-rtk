.     0  010004974H              <Pad: 0>
MODULE Stacktr0;
(**
  Oberon RTK Framework v2
  --
  Example/test program
  https://oberon-rtk.org/examples/v2/stacktrace
  --
  MCU: RP2040, RP2350
  Board: Pico, Pico 2
  --
  Copyright (c) 2025 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT SYSTEM, MCU := MCU2, Main, Memory, MultiCore, Out (*, RuntimeErrors, RuntimeErrorsOut*);

  CONST Core1 = 1;

  VAR p: PROCEDURE;

  PROCEDURE* fault;
  (* trigger MCU fault *)
    VAR x: INTEGER;
  BEGIN
.     4  010004978H      0B500H  push      { lr }
    x := MCU.PPB_NVIC_ISER0 + 1;
.     6  01000497AH  0F8DF1008H  ldr.w     r1,[pc,#8] -> 16
.    10  01000497EH      04608H  mov       r0,r1
    SYSTEM.PUT(x, x)
  END fault;
.    12  010004980H      06000H  str       r0,[r0]
.    14  010004982H      0BD00H  pop       { pc }
.    16  010004984H  0E000E101H  <Const:  -536813311>

  PROCEDURE* error;
  (* trigger runtime error *)
    VAR x: INTEGER;
  BEGIN
.    20  010004988H      0B500H  push      { lr }
    x := 0; x := x DIV x
.    22  01000498AH      02100H  movs      r1,#0
.    24  01000498CH      04608H  mov       r0,r1
  END error;
.    26  01000498EH  0F1B00F00H  cmp.w     r0,#0
.    30  010004992H      0DC01H  bgt.n     2 -> 36
.    32  010004994H      0DF07H  svc       7
.    34  010004996H      00021H  <LineNo: 33>
.    36  010004998H  0FB90F1F0H  sdiv.w    r1,r0,r0
.    40  01000499CH  0FB010210H  mls.w     r2,r1,r0,r0
.    44  0100049A0H  0EBA170D2H  sub.w     r0,r1,r2,lsr 31
.    48  0100049A4H      0BD00H  pop       { pc }
.    50  0100049A6H      0BF00H  nop       

  PROCEDURE p2;
    VAR cid: INTEGER;
  BEGIN
.    52  0100049A8H      0B500H  push      { lr }
.    54  0100049AAH      0B081H  sub       sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
.    56  0100049ACH  0F04F4050H  mov.w     r0,#0D0000000H
.    60  0100049B0H      06801H  ldr       r1,[r0]
.    62  0100049B2H      09100H  str       r1,[sp]
    IF cid = 0 THEN
.    64  0100049B4H      09800H  ldr       r0,[sp]
.    66  0100049B6H      02800H  cmp       r0,#0
.    68  0100049B8H  0F0408006H  bne.w     12 -> 84
      fault
    ELSE
.    72  0100049BCH  0F7FFFFDCH  bl.w      -72 -> 4
.    76  0100049C0H      0E000H  b         0 -> 80
.    78  0100049C2H      00029H  <LineNo: 41>
      error
.    80  0100049C4H  0F000B804H  b.w       8 -> 92
    END
.    84  0100049C8H  0F7FFFFDEH  bl.w      -68 -> 20
.    88  0100049CCH      0E000H  b         0 -> 92
.    90  0100049CEH      0002BH  <LineNo: 43>
  END p2;
.    92  0100049D0H      0B001H  add       sp,#4
.    94  0100049D2H      0BD00H  pop       { pc }

  PROCEDURE p1;
    (*VAR cid: INTEGER; tr: RuntimeErrors.Trace;*)
  BEGIN
.    96  0100049D4H      0B500H  push      { lr }
    (*
    cid := MultiCore.CPUid();
    RuntimeErrors.Stacktrace(tr);
    RuntimeErrorsOut.PrintStacktrace(Out.W[cid], tr, cid);
    *)
    p2
  END p1;
.    98  0100049D6H  0F7FFFFE7H  bl.w      -50 -> 52
.   102  0100049DAH      0E000H  b         0 -> 106
.   104  0100049DCH      00037H  <LineNo: 55>
.   106  0100049DEH      0BD00H  pop       { pc }

  PROCEDURE p0;
    CONST R12 = 12;
    (* VAR x, y: INTEGER; *)
  BEGIN
.   108  0100049E0H      0B500H  push      { lr }
    SYSTEM.LDREG(R12, 0A0B0C0DH); (* marker *)
.   110  0100049E2H  0F8DFC00CH  ldr.w     r12,[pc,#12] -> 124
    p1
  END p0;
.   114  0100049E6H  0F7FFFFF5H  bl.w      -22 -> 96
.   118  0100049EAH      0E000H  b         0 -> 122
.   120  0100049ECH      0003FH  <LineNo: 63>
.   122  0100049EEH      0BD00H  pop       { pc }
.   124  0100049F0H  00A0B0C0DH  <Const:  168496141>

  PROCEDURE run;
    VAR x: INTEGER;
  BEGIN
.   128  0100049F4H      0B500H  push      { lr }
.   130  0100049F6H      0B081H  sub       sp,#4
    x := Memory.DataMem[0].stackStart;
.   132  0100049F8H  0F8DF0034H  ldr.w     r0,[pc,#52] -> 188
.   136  0100049FCH      06800H  ldr       r0,[r0]
.   138  0100049FEH      09000H  str       r0,[sp]
    Out.Hex(x, 12); Out.Ln;
.   140  010004A00H      09800H  ldr       r0,[sp]
.   142  010004A02H      0210CH  movs      r1,#12
.   144  010004A04H  0F7FDFE40H  bl.w      Ext Proc #7
.   148  010004A08H      0E000H  b         0 -> 152
.   150  010004A0AH      00046H  <LineNo: 70>
.   152  010004A0CH  0F7FDFE06H  bl.w      Ext Proc #5
.   156  010004A10H      0E000H  b         0 -> 160
.   158  010004A12H      00046H  <LineNo: 70>
    p
  END run;
.   160  010004A14H  0F8DF001CH  ldr.w     r0,[pc,#28] -> 192
.   164  010004A18H      06800H  ldr       r0,[r0]
.   166  010004A1AH  0F1B00F00H  cmp.w     r0,#0
.   170  010004A1EH      0D101H  bne.n     2 -> 176
.   172  010004A20H      0DF05H  svc       5
.   174  010004A22H      00047H  <LineNo: 71>
.   176  010004A24H      03001H  adds      r0,#1
.   178  010004A26H      04780H  blx       r0
.   180  010004A28H      0E000H  b         0 -> 184
.   182  010004A2AH      00047H  <LineNo: 71>
.   184  010004A2CH      0B001H  add       sp,#4
.   186  010004A2EH      0BD00H  pop       { pc }
.   188  010004A30H  02003FF84H  <Global: Memory data>
.   192  010004A34H  02003FB50H  <Global: Stacktr0 data>

BEGIN
.   196  010004A38H      0B500H  push      { lr }
  p := p0;
.   198  010004A3AH      0BF00H  nop       
.   200  010004A3CH  0F2AF0060H  adr.w     r0,pc,#-96 -> 108
.   204  010004A40H  0F8DF102CH  ldr.w     r1,[pc,#44] -> 252
.   208  010004A44H      06008H  str       r0,[r1]
  MultiCore.InitCoreOne(run, Memory.DataMem[Core1].stackStart, Memory.DataMem[Core1].dataStart);
.   210  010004A46H      0BF00H  nop       
.   212  010004A48H  0F2AF0058H  adr.w     r0,pc,#-88 -> 128
.   216  010004A4CH  0F8DF101CH  ldr.w     r1,[pc,#28] -> 248
.   220  010004A50H      06889H  ldr       r1,[r1,#8]
.   222  010004A52H  0F8DF2018H  ldr.w     r2,[pc,#24] -> 248
.   226  010004A56H      068D2H  ldr       r2,[r2,#12]
.   228  010004A58H  0F7FFFF34H  bl.w      Ext Proc #7
.   232  010004A5CH      0E000H  b         0 -> 236
.   234  010004A5EH      0004CH  <LineNo: 76>
  run
END Stacktr0.
.   236  010004A60H  0F7FFFFC8H  bl.w      -112 -> 128
.   240  010004A64H      0E000H  b         0 -> 244
.   242  010004A66H      0004DH  <LineNo: 77>
.   244  010004A68H      0BD00H  pop       { pc }
.   246  010004A6AH      0BF00H  nop       
.   248  010004A6CH  02003FF84H  <Global: Memory data>
.   252  010004A70H  02003FB50H  <Global: Stacktr0 data>
 