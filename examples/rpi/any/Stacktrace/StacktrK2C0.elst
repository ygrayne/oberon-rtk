.     0  010005348H              <Pad: 0>
MODULE StacktrK2C0;
(**
  Oberon RTK Framework v2
  --
  Example/test program
  https://oberon-rtk.org/examples/v2/stacktrace
  --
  MCU: RP2040, RP2350
  Board: Pico, Pico 2
  --
  Copyright (c) 2025 Gray gray@grayraven.org
  https://oberon-rtk.org/licences/
**)

  IMPORT SYSTEM, MCU := MCU2, Main, Kernel, MultiCore, Errors, Memory, Out;


  CONST
    ThreadStackSize = 1024;
    MillisecsPerTick = 10;
    Core1 = 1;

  VAR
    p: PROCEDURE;

  PROCEDURE fault;
  (* trigger MCU fault *)
    VAR x: INTEGER;
  BEGIN
.     4  01000534CH      0B500H  push      { lr }
.     6  01000534EH      0B081H  sub       sp,#4
    x := MCU.PPB_NVIC_ISER0 + 1;
.     8  010005350H  0F8DF000CH  ldr.w     r0,[pc,#12] -> 24
.    12  010005354H      09000H  str       r0,[sp]
    SYSTEM.PUT(x, x)
  END fault;
.    14  010005356H      09800H  ldr       r0,[sp]
.    16  010005358H      09900H  ldr       r1,[sp]
.    18  01000535AH      06001H  str       r1,[r0]
.    20  01000535CH      0B001H  add       sp,#4
.    22  01000535EH      0BD00H  pop       { pc }
.    24  010005360H  0E000E101H  <Const:  -536813311>

  PROCEDURE error;
  (* trigger runtime error *)
    VAR x: INTEGER;
  BEGIN
.    28  010005364H      0B500H  push      { lr }
.    30  010005366H      0B081H  sub       sp,#4
    x := 0; x := x DIV x
.    32  010005368H      02000H  movs      r0,#0
.    34  01000536AH      09000H  str       r0,[sp]
  END error;
.    36  01000536CH      09800H  ldr       r0,[sp]
.    38  01000536EH      09900H  ldr       r1,[sp]
.    40  010005370H  0F1B10F00H  cmp.w     r1,#0
.    44  010005374H      0DC01H  bgt.n     2 -> 50
.    46  010005376H      0DF07H  svc       7
.    48  010005378H      00026H  <LineNo: 38>
.    50  01000537AH  0FB90F2F1H  sdiv.w    r2,r0,r1
.    54  01000537EH  0FB020011H  mls.w     r0,r2,r1,r0
.    58  010005382H  0EBA270D0H  sub.w     r0,r2,r0,lsr 31
.    62  010005386H      09000H  str       r0,[sp]
.    64  010005388H      0B001H  add       sp,#4
.    66  01000538AH      0BD00H  pop       { pc }

  PROCEDURE p2;
    VAR cid: INTEGER;
  BEGIN
.    68  01000538CH      0B500H  push      { lr }
.    70  01000538EH      0B081H  sub       sp,#4
    SYSTEM.GET(MCU.SIO_CPUID, cid);
.    72  010005390H  0F04F4050H  mov.w     r0,#0D0000000H
.    76  010005394H      06801H  ldr       r1,[r0]
.    78  010005396H      09100H  str       r1,[sp]
    IF cid = 0 THEN
.    80  010005398H      09800H  ldr       r0,[sp]
.    82  01000539AH      02800H  cmp       r0,#0
.    84  01000539CH  0F0408006H  bne.w     12 -> 100
      fault
    ELSE
.    88  0100053A0H  0F7FFFFD4H  bl.w      -88 -> 4
.    92  0100053A4H      0E000H  b         0 -> 96
.    94  0100053A6H      0002EH  <LineNo: 46>
      error
.    96  0100053A8H  0F000B804H  b.w       8 -> 108
    END
.   100  0100053ACH  0F7FFFFDAH  bl.w      -76 -> 28
.   104  0100053B0H      0E000H  b         0 -> 108
.   106  0100053B2H      00030H  <LineNo: 48>
  END p2;
.   108  0100053B4H      0B001H  add       sp,#4
.   110  0100053B6H      0BD00H  pop       { pc }

  PROCEDURE p1;
  BEGIN
.   112  0100053B8H      0B500H  push      { lr }
    p2
  END p1;
.   114  0100053BAH  0F7FFFFE7H  bl.w      -50 -> 68
.   118  0100053BEH      0E000H  b         0 -> 122
.   120  0100053C0H      00036H  <LineNo: 54>
.   122  0100053C2H      0BD00H  pop       { pc }

  PROCEDURE p0;
    CONST R12 = 12;
  BEGIN
.   124  0100053C4H      0B500H  push      { lr }
    SYSTEM.LDREG(R12, 0A0B0C0DH); (* marker *)
.   126  0100053C6H  0F8DFC00CH  ldr.w     r12,[pc,#12] -> 140
    p1
  END p0;
.   130  0100053CAH  0F7FFFFF5H  bl.w      -22 -> 112
.   134  0100053CEH      0E000H  b         0 -> 138
.   136  0100053D0H      0003DH  <LineNo: 61>
.   138  0100053D2H      0BD00H  pop       { pc }
.   140  0100053D4H  00A0B0C0DH  <Const:  168496141>

  PROCEDURE run;
  BEGIN
.   144  0100053D8H      0B500H  push      { lr }
    p
  END run;
.   146  0100053DAH  0F8DF0018H  ldr.w     r0,[pc,#24] -> 172
.   150  0100053DEH      06800H  ldr       r0,[r0]
.   152  0100053E0H  0F1B00F00H  cmp.w     r0,#0
.   156  0100053E4H      0D101H  bne.n     2 -> 162
.   158  0100053E6H      0DF05H  svc       5
.   160  0100053E8H      00042H  <LineNo: 66>
.   162  0100053EAH      03001H  adds      r0,#1
.   164  0100053ECH      04780H  blx       r0
.   166  0100053EEH      0E000H  b         0 -> 170
.   168  0100053F0H      00042H  <LineNo: 66>
.   170  0100053F2H      0BD00H  pop       { pc }
.   172  0100053F4H  02003FB40H  <Global: StacktrK2C0 data>

  PROCEDURE t0c;
  BEGIN
.   176  0100053F8H      0B500H  push      { lr }
    REPEAT
      run;
.   178  0100053FAH  0F7FFFFEDH  bl.w      -38 -> 144
.   182  0100053FEH      0E000H  b         0 -> 186
.   184  010005400H      00048H  <LineNo: 72>
      Kernel.Next
    UNTIL FALSE
.   186  010005402H  0F7FFFB9FH  bl.w      Ext Proc #9
.   190  010005406H      0E000H  b         0 -> 194
.   192  010005408H      00049H  <LineNo: 73>
  END t0c;
.   194  01000540AH      04280H  cmp       r0,r0
.   196  01000540CH  0F43FAFF5H  beq.w     -22 -> 178
.   200  010005410H      0BD00H  pop       { pc }
.   202  010005412H      0BF00H  nop       

  PROCEDURE run0;
    VAR
      t0: Kernel.Thread;
      x, tid0: INTEGER;
  BEGIN
.   204  010005414H      0B500H  push      { lr }
.   206  010005416H      0B083H  sub       sp,#12
    (* in main stack *)
    x := MultiCore.CPUid();
.   208  010005418H  0F7FFFEF8H  bl.w      Ext Proc #1
.   212  01000541CH      0E000H  b         0 -> 216
.   214  01000541EH      00053H  <LineNo: 83>
.   216  010005420H      09001H  str       r0,[sp,#4]
    x := Memory.DataMem[x].stackStart;
.   218  010005422H      09801H  ldr       r0,[sp,#4]
.   220  010005424H      02802H  cmp       r0,#2
.   222  010005426H      0D301H  bcc.n     2 -> 228
.   224  010005428H      0DF01H  svc       1
.   226  01000542AH      00054H  <LineNo: 84>
.   228  01000542CH  0F8DF1074H  ldr.w     r1,[pc,#116] -> 348
.   232  010005430H      000C2H  lsls      r2,r0,#3
.   234  010005432H  0EB020001H  add.w     r0,r2,r1
.   238  010005436H      06800H  ldr       r0,[r0]
.   240  010005438H      09001H  str       r0,[sp,#4]
    Out.Hex(x, 12); Out.Ln;
.   242  01000543AH      09801H  ldr       r0,[sp,#4]
.   244  01000543CH      0210CH  movs      r1,#12
.   246  01000543EH  0F7FDF923H  bl.w      Ext Proc #7
.   250  010005442H      0E000H  b         0 -> 254
.   252  010005444H      00055H  <LineNo: 85>
.   254  010005446H  0F7FDF8E9H  bl.w      Ext Proc #5
.   258  01000544AH      0E000H  b         0 -> 262
.   260  01000544CH      00055H  <LineNo: 85>
    Kernel.Install(MillisecsPerTick);
.   262  01000544EH      0200AH  movs      r0,#10
.   264  010005450H  0F7FFFDCCH  bl.w      Ext Proc #24
.   268  010005454H      0E000H  b         0 -> 272
.   270  010005456H      00056H  <LineNo: 86>
    Kernel.Allocate(t0c, ThreadStackSize, t0, tid0, x); ASSERT(x = Kernel.OK, Errors.ProgError);
.   272  010005458H  0F2AF0064H  adr.w     r0,pc,#-100 -> 176
.   276  01000545CH  0F2404100H  movw      r1,#1024
.   280  010005460H      0466AH  mov       r2,sp
.   282  010005462H  0F11D0308H  adds.w    r3,sp,#8
.   286  010005466H  0F11D0404H  adds.w    r4,sp,#4
.   290  01000546AH  0F7FFFACFH  bl.w      Ext Proc #4
.   294  01000546EH      0E000H  b         0 -> 298
.   296  010005470H      00057H  <LineNo: 87>
.   298  010005472H      09801H  ldr       r0,[sp,#4]
.   300  010005474H      02800H  cmp       r0,#0
.   302  010005476H      0D001H  beq.n     2 -> 308
.   304  010005478H      0DF68H  svc       104
.   306  01000547AH      00057H  <LineNo: 87>
    Kernel.SetPeriod(t0, 1000, 0); Kernel.Enable(t0);
.   308  01000547CH      09800H  ldr       r0,[sp]
.   310  01000547EH  0F24031E8H  movw      r1,#1000
.   314  010005482H      02200H  movs      r2,#0
.   316  010005484H  0F7FFFB5AH  bl.w      Ext Proc #8
.   320  010005488H      0E000H  b         0 -> 324
.   322  01000548AH      00058H  <LineNo: 88>
.   324  01000548CH      09800H  ldr       r0,[sp]
.   326  01000548EH  0F7FFFB49H  bl.w      Ext Proc #6
.   330  010005492H      0E000H  b         0 -> 334
.   332  010005494H      00058H  <LineNo: 88>
    (* threads will use in their stacks, exceptions will use main stack *)
    Kernel.Run (* resets MSP to top *)
    (* we'll not return here *)
  END run0;
.   334  010005496H  0F7FFFD75H  bl.w      Ext Proc #23
.   338  01000549AH      0E000H  b         0 -> 342
.   340  01000549CH      0005AH  <LineNo: 90>
.   342  01000549EH      0B003H  add       sp,#12
.   344  0100054A0H      0BD00H  pop       { pc }
.   346  0100054A2H      0BF00H  nop       
.   348  0100054A4H  02003FF84H  <Global: Memory data>

BEGIN
.   352  0100054A8H      0B500H  push      { lr }
  p := p0;
.   354  0100054AAH      0BF00H  nop       
.   356  0100054ACH  0F2AF00ECH  adr.w     r0,pc,#-236 -> 124
.   360  0100054B0H  0F8DF102CH  ldr.w     r1,[pc,#44] -> 408
.   364  0100054B4H      06008H  str       r0,[r1]
  MultiCore.InitCoreOne(run0, Memory.DataMem[Core1].stackStart, Memory.DataMem[Core1].dataStart);
.   366  0100054B6H      0BF00H  nop       
.   368  0100054B8H  0F2AF00A8H  adr.w     r0,pc,#-168 -> 204
.   372  0100054BCH  0F8DF101CH  ldr.w     r1,[pc,#28] -> 404
.   376  0100054C0H      06889H  ldr       r1,[r1,#8]
.   378  0100054C2H  0F8DF2018H  ldr.w     r2,[pc,#24] -> 404
.   382  0100054C6H      068D2H  ldr       r2,[r2,#12]
.   384  0100054C8H  0F7FFFEE6H  bl.w      Ext Proc #7
.   388  0100054CCH      0E000H  b         0 -> 392
.   390  0100054CEH      00060H  <LineNo: 96>
  run0
END StacktrK2C0.
.   392  0100054D0H  0F7FFFFA0H  bl.w      -192 -> 204
.   396  0100054D4H      0E000H  b         0 -> 400
.   398  0100054D6H      00061H  <LineNo: 97>
.   400  0100054D8H      0BD00H  pop       { pc }
.   402  0100054DAH      0BF00H  nop       
.   404  0100054DCH  02003FF84H  <Global: Memory data>
.   408  0100054E0H  02003FB40H  <Global: StacktrK2C0 data>
 